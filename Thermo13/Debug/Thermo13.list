
Thermo13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800597c  0800597c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005984  08005984  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800598c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001c4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000082ce  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000194c  00000000  00000000  000283a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000840  00000000  00000000  00029cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000643  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020fe0  00000000  00000000  0002ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000adb9  00000000  00000000  0004bb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c45bd  00000000  00000000  00056914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b24  00000000  00000000  0011aed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0011d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058dc 	.word	0x080058dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080058dc 	.word	0x080058dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <calc_temp>:
// 1) Convert to characters in ASCII
// Print to the Debug Port
// 2) Convert to a way to display to an LCD Screen.

int calc_temp(uint8_t *rxBuffer)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

uint16_t temp_reading = (((uint16_t) rxBuffer[0] << 8) | rxBuffer[1]);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	817b      	strh	r3, [r7, #10]
int temp;

//Check for signed bit
if(rxBuffer[0]&0x80)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da14      	bge.n	8000bda <calc_temp+0x52>
{
 temp =  ((int16_t)temp_reading >> 4) * SCALE_FACTOR;
 8000bb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bb4:	111b      	asrs	r3, r3, #4
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdd5 	bl	8000768 <__aeabi_i2d>
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <calc_temp+0x84>)
 8000bc4:	f7ff fb54 	bl	8000270 <__aeabi_dmul>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4610      	mov	r0, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f7ff fe34 	bl	800083c <__aeabi_d2iz>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e012      	b.n	8000c00 <calc_temp+0x78>
}
else
{
  temp = (temp_reading>>4) * SCALE_FACTOR;
 8000bda:	897b      	ldrh	r3, [r7, #10]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fdc1 	bl	8000768 <__aeabi_i2d>
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <calc_temp+0x84>)
 8000bec:	f7ff fb40 	bl	8000270 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f7ff fe20 	bl	800083c <__aeabi_d2iz>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60fb      	str	r3, [r7, #12]
}
return temp;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	3fb00000 	.word	0x3fb00000

08000c10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d013      	beq.n	8000c50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00b      	beq.n	8000c50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c38:	e000      	b.n	8000c3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f9      	beq.n	8000c3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)

{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e009      	b.n	8000c84 <_write+0x26>

    { ITM_SendChar(*ptr++); }
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffc9 	bl	8000c10 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf1      	blt.n	8000c70 <_write+0x12>

     return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]

}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09e      	sub	sp, #120	; 0x78
 8000c9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fab7 	bl	8001210 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f83d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f000 f8d3 	bl	8000e50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000caa:	f000 f8a3 	bl	8000df4 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8000cae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2302      	movs	r3, #2
 8000cba:	2190      	movs	r1, #144	; 0x90
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <main+0x78>)
 8000cbe:	f000 ff5f 	bl	8001b80 <HAL_I2C_Master_Receive>
	  sprintf(log, "I2C Slave Data: 0x%x, 0x%x,\r\n", buf[0], buf[1]);
 8000cc2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000ccc:	1d38      	adds	r0, r7, #4
 8000cce:	4911      	ldr	r1, [pc, #68]	; (8000d14 <main+0x7c>)
 8000cd0:	f003 fdcc 	bl	800486c <siprintf>
	  printf(log);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 fd5a 	bl	8004790 <iprintf>
	  log[0] = '\0';
 8000cdc:	2300      	movs	r3, #0
 8000cde:	713b      	strb	r3, [r7, #4]
	  temperature = calc_temp(buf);
 8000ce0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff4f 	bl	8000b88 <calc_temp>
 8000cea:	66f8      	str	r0, [r7, #108]	; 0x6c
	  printf("Converted Data\r\n");
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <main+0x80>)
 8000cee:	f003 fdb5 	bl	800485c <puts>
	  sprintf(log, "%d deg C\r\n",temperature);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000cf6:	4909      	ldr	r1, [pc, #36]	; (8000d1c <main+0x84>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fdb7 	bl	800486c <siprintf>
	  printf(log);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fd45 	bl	8004790 <iprintf>
	  HAL_Delay(1000);
 8000d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0a:	f000 faf3 	bl	80012f4 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8000d0e:	e7ce      	b.n	8000cae <main+0x16>
 8000d10:	20000084 	.word	0x20000084
 8000d14:	080058f4 	.word	0x080058f4
 8000d18:	08005914 	.word	0x08005914
 8000d1c:	08005924 	.word	0x08005924

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	; 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fe94 	bl	8004a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SystemClock_Config+0xcc>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 ffbe 	bl	8003d28 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000db2:	f000 f8a5 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fa1f 	bl	8004218 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000de0:	f000 f88e 	bl	8000f00 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	; 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <MX_I2C1_Init+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_I2C1_Init+0x58>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_I2C1_Init+0x50>)
 8000e32:	f000 fd61 	bl	80018f8 <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 f860 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000084 	.word	0x20000084
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	000186a0 	.word	0x000186a0

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_GPIO_Init+0xa8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_GPIO_Init+0xac>)
 8000eea:	f000 fb69 	bl	80015c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f000 fac6 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_I2C_MspInit+0xa4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d13c      	bne.n	8000ff8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = Thermo13_SDA_Pin|Thermo13_SCL_Pin;
 8000f9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fac:	2304      	movs	r3, #4
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <HAL_I2C_MspInit+0xac>)
 8000fb8:	f000 fb02 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_I2C_MspInit+0xa8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	201f      	movs	r0, #31
 8000fde:	f000 fa88 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fe2:	201f      	movs	r0, #31
 8000fe4:	f000 faa1 	bl	800152a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2020      	movs	r0, #32
 8000fee:	f000 fa80 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ff2:	2020      	movs	r0, #32
 8000ff4:	f000 fa99 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40005400 	.word	0x40005400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020400 	.word	0x40020400

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f92c 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <I2C1_EV_IRQHandler+0x10>)
 8001066:	f000 ffb1 	bl	8001fcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000084 	.word	0x20000084

08001074 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <I2C1_ER_IRQHandler+0x10>)
 800107a:	f001 f8fa 	bl	8002272 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000084 	.word	0x20000084

08001088 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109a:	f3af 8000 	nop.w
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
  }

  return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
  return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_isatty>:

int _isatty(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 fccc 	bl	8004af8 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	200000d8 	.word	0x200000d8
 8001194:	20000230 	.word	0x20000230

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f003 fc8b 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fd53 	bl	8000c98 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001200:	0800598c 	.word	0x0800598c
  ldr r2, =_sbss
 8001204:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001208:	2000022c 	.word	0x2000022c

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f94f 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fe62 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f967 	bl	8001546 <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f92f 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	200000dc 	.word	0x200000dc

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000dc 	.word	0x200000dc

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008

0800133c <__NVIC_SetPriorityGrouping>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d004      	beq.n	800157c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00c      	b.n	8001596 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2205      	movs	r2, #5
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e16b      	b.n	80018b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 815a 	bne.w	80018ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80b4 	beq.w	80018ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b60      	ldr	r3, [pc, #384]	; (80018cc <HAL_GPIO_Init+0x30c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a5f      	ldr	r2, [pc, #380]	; (80018cc <HAL_GPIO_Init+0x30c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_GPIO_Init+0x30c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a5b      	ldr	r2, [pc, #364]	; (80018d0 <HAL_GPIO_Init+0x310>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_GPIO_Init+0x314>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d02b      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a51      	ldr	r2, [pc, #324]	; (80018d8 <HAL_GPIO_Init+0x318>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d025      	beq.n	80017e2 <HAL_GPIO_Init+0x222>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <HAL_GPIO_Init+0x31c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01f      	beq.n	80017de <HAL_GPIO_Init+0x21e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <HAL_GPIO_Init+0x320>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_GPIO_Init+0x324>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x328>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_GPIO_Init+0x32c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_GPIO_Init+0x330>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x20a>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00e      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017ca:	2308      	movs	r3, #8
 80017cc:	e00c      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017ce:	2306      	movs	r3, #6
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x228>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x310>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_GPIO_Init+0x334>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <HAL_GPIO_Init+0x334>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_GPIO_Init+0x334>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <HAL_GPIO_Init+0x334>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_GPIO_Init+0x334>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_GPIO_Init+0x334>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_GPIO_Init+0x334>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_GPIO_Init+0x334>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f ae90 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e12b      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fb1c 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800195a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f002 fe54 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <HAL_I2C_Init+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d807      	bhi.n	800197c <HAL_I2C_Init+0x84>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a80      	ldr	r2, [pc, #512]	; (8001b70 <HAL_I2C_Init+0x278>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e006      	b.n	800198a <HAL_I2C_Init+0x92>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a7d      	ldr	r2, [pc, #500]	; (8001b74 <HAL_I2C_Init+0x27c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf94      	ite	ls
 8001984:	2301      	movls	r3, #1
 8001986:	2300      	movhi	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0e7      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4a78      	ldr	r2, [pc, #480]	; (8001b78 <HAL_I2C_Init+0x280>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9b      	lsrs	r3, r3, #18
 800199c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d802      	bhi.n	80019cc <HAL_I2C_Init+0xd4>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	e009      	b.n	80019e0 <HAL_I2C_Init+0xe8>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <HAL_I2C_Init+0x284>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	495c      	ldr	r1, [pc, #368]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d819      	bhi.n	8001a34 <HAL_I2C_Init+0x13c>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e59      	subs	r1, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a14:	400b      	ands	r3, r1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_I2C_Init+0x138>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e59      	subs	r1, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	e051      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e04f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <HAL_I2C_Init+0x168>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_Init+0x18e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Init+0x196>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e022      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <HAL_I2C_Init+0x1bc>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	e00f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6911      	ldr	r1, [r2, #16]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68d2      	ldr	r2, [r2, #12]
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	000186a0 	.word	0x000186a0
 8001b70:	001e847f 	.word	0x001e847f
 8001b74:	003d08ff 	.word	0x003d08ff
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	817b      	strh	r3, [r7, #10]
 8001b90:	4613      	mov	r3, r2
 8001b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fba2 	bl	80012dc <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	f040 820b 	bne.w	8001fbe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	497c      	ldr	r1, [pc, #496]	; (8001da4 <HAL_I2C_Master_Receive+0x224>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 ff3e 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e1fe      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2C_Master_Receive+0x50>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e1f7      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d007      	beq.n	8001bf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2222      	movs	r2, #34	; 0x22
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2210      	movs	r2, #16
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	893a      	ldrh	r2, [r7, #8]
 8001c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a5c      	ldr	r2, [pc, #368]	; (8001da8 <HAL_I2C_Master_Receive+0x228>)
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 fd82 	bl	8003748 <I2C_MasterRequestRead>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1b8      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d113      	bne.n	8001c7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	623b      	str	r3, [r7, #32]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	623b      	str	r3, [r7, #32]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e18c      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d11b      	bne.n	8001cbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e16c      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d11b      	bne.n	8001cfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	e14c      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d24:	e138      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	f200 80f1 	bhi.w	8001f12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d123      	bne.n	8001d80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f001 ff81 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e139      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d7e:	e10b      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d14e      	bne.n	8001e26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4906      	ldr	r1, [pc, #24]	; (8001dac <HAL_I2C_Master_Receive+0x22c>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 fe4e 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e10e      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
 8001da2:	bf00      	nop
 8001da4:	00100002 	.word	0x00100002
 8001da8:	ffff0000 	.word	0xffff0000
 8001dac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e24:	e0b8      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4966      	ldr	r1, [pc, #408]	; (8001fc8 <HAL_I2C_Master_Receive+0x448>)
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f001 fdff 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0bf      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	2200      	movs	r2, #0
 8001e8a:	494f      	ldr	r1, [pc, #316]	; (8001fc8 <HAL_I2C_Master_Receive+0x448>)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f001 fdd1 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e091      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f10:	e042      	b.n	8001f98 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f001 fe94 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e04c      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d118      	bne.n	8001f98 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f47f aec2 	bne.w	8001d26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	00010004 	.word	0x00010004

08001fcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d003      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0x38>
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	f040 80b1 	bne.w	8002166 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_I2C_EV_IRQHandler+0x6e>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002024:	d003      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0x62>
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800202c:	d101      	bne.n	8002032 <HAL_I2C_EV_IRQHandler+0x66>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x68>
 8002032:	2300      	movs	r3, #0
 8002034:	2b01      	cmp	r3, #1
 8002036:	f000 8114 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <HAL_I2C_EV_IRQHandler+0x90>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f001 fe4e 	bl	8003cf0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fd5e 	bl	8002b16 <I2C_Master_SB>
 800205a:	e083      	b.n	8002164 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0xac>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fdd6 	bl	8002c22 <I2C_Master_ADD10>
 8002076:	e075      	b.n	8002164 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_I2C_EV_IRQHandler+0xc8>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fdf2 	bl	8002c76 <I2C_Master_ADDR>
 8002092:	e067      	b.n	8002164 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d036      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ac:	f000 80db 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x10a>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x10a>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9d6 	bl	8002480 <I2C_MasterTransmit_TXE>
 80020d4:	e046      	b.n	8002164 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80c2 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80bc 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020ee:	7bbb      	ldrb	r3, [r7, #14]
 80020f0:	2b21      	cmp	r3, #33	; 0x21
 80020f2:	d103      	bne.n	80020fc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fa5f 	bl	80025b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020fa:	e0b4      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	f040 80b1 	bne.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 facd 	bl	80026a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210a:	e0ac      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211a:	f000 80a4 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_I2C_EV_IRQHandler+0x178>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_I2C_EV_IRQHandler+0x178>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb45 	bl	80027cc <I2C_MasterReceive_RXNE>
 8002142:	e00f      	b.n	8002164 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 808b 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8085 	beq.w	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fbf0 	bl	8002942 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002162:	e080      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
 8002164:	e07f      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e007      	b.n	8002188 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00c      	beq.n	80021b6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80021ac:	69b9      	ldr	r1, [r7, #24]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 ffb0 	bl	8003114 <I2C_Slave_ADDR>
 80021b4:	e05a      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x206>
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 ffea 	bl	80031a4 <I2C_Slave_STOPF>
 80021d0:	e04c      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	2b21      	cmp	r3, #33	; 0x21
 80021d6:	d002      	beq.n	80021de <HAL_I2C_EV_IRQHandler+0x212>
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b29      	cmp	r3, #41	; 0x29
 80021dc:	d120      	bne.n	8002220 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00d      	beq.n	8002204 <HAL_I2C_EV_IRQHandler+0x238>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_I2C_EV_IRQHandler+0x238>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fecb 	bl	8002f98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002202:	e032      	b.n	800226a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02d      	beq.n	800226a <HAL_I2C_EV_IRQHandler+0x29e>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002214:	2b00      	cmp	r3, #0
 8002216:	d028      	beq.n	800226a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fefa 	bl	8003012 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800221e:	e024      	b.n	800226a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <HAL_I2C_EV_IRQHandler+0x27a>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_I2C_EV_IRQHandler+0x27a>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 ff08 	bl	8003054 <I2C_SlaveReceive_RXNE>
 8002244:	e012      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 ff38 	bl	80030d0 <I2C_SlaveReceive_BTF>
 8002260:	e004      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002262:	bf00      	nop
 8002264:	e002      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800226a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b08a      	sub	sp, #40	; 0x28
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002294:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x4a>
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_ER_IRQHandler+0x70>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03e      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0xf8>
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d039      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80022f6:	7efb      	ldrb	r3, [r7, #27]
 80022f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002310:	7ebb      	ldrb	r3, [r7, #26]
 8002312:	2b20      	cmp	r3, #32
 8002314:	d112      	bne.n	800233c <HAL_I2C_ER_IRQHandler+0xca>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <HAL_I2C_ER_IRQHandler+0xca>
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b21      	cmp	r3, #33	; 0x21
 8002320:	d008      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b29      	cmp	r3, #41	; 0x29
 8002326:	d005      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0xc2>
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b28      	cmp	r3, #40	; 0x28
 800232c:	d106      	bne.n	800233c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b21      	cmp	r3, #33	; 0x21
 8002332:	d103      	bne.n	800233c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f001 f865 	bl	8003404 <I2C_Slave_AF>
 800233a:	e016      	b.n	800236a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002344:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800234e:	7efb      	ldrb	r3, [r7, #27]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d002      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0xe8>
 8002354:	7efb      	ldrb	r3, [r7, #27]
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d107      	bne.n	800236a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002368:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <HAL_I2C_ER_IRQHandler+0x11e>
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800238e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 f89e 	bl	80034e4 <I2C_ITError>
  }
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	4613      	mov	r3, r2
 800240e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002496:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d150      	bne.n	8002548 <I2C_MasterTransmit_TXE+0xc8>
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b21      	cmp	r3, #33	; 0x21
 80024aa:	d14d      	bne.n	8002548 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d01d      	beq.n	80024ee <I2C_MasterTransmit_TXE+0x6e>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d01a      	beq.n	80024ee <I2C_MasterTransmit_TXE+0x6e>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024be:	d016      	beq.n	80024ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2211      	movs	r2, #17
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff62 	bl	80023b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ec:	e060      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d107      	bne.n	8002538 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff7d 	bl	8002430 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002536:	e03b      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff35 	bl	80023b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002546:	e033      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b21      	cmp	r3, #33	; 0x21
 800254c:	d005      	beq.n	800255a <I2C_MasterTransmit_TXE+0xda>
 800254e:	7bbb      	ldrb	r3, [r7, #14]
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d12d      	bne.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b22      	cmp	r3, #34	; 0x22
 8002558:	d12a      	bne.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002572:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002574:	e01c      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d103      	bne.n	800258a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f88e 	bl	80026a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002588:	e012      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ae:	e7ff      	b.n	80025b0 <I2C_MasterTransmit_TXE+0x130>
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b21      	cmp	r3, #33	; 0x21
 80025d0:	d164      	bne.n	800269c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002600:	e04c      	b.n	800269c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d01d      	beq.n	8002644 <I2C_MasterTransmit_BTF+0x8c>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b20      	cmp	r3, #32
 800260c:	d01a      	beq.n	8002644 <I2C_MasterTransmit_BTF+0x8c>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002614:	d016      	beq.n	8002644 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002624:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2211      	movs	r2, #17
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff feb7 	bl	80023b0 <HAL_I2C_MasterTxCpltCallback>
}
 8002642:	e02b      	b.n	800269c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002652:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d107      	bne.n	800268e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fed2 	bl	8002430 <HAL_I2C_MemTxCpltCallback>
}
 800268c:	e006      	b.n	800269c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe8a 	bl	80023b0 <HAL_I2C_MasterTxCpltCallback>
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11d      	bne.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10b      	bne.n	80026dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d4:	1c9a      	adds	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026da:	e073      	b.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	121b      	asrs	r3, r3, #8
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026f6:	e065      	b.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10b      	bne.n	8002718 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002716:	e055      	b.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	2b02      	cmp	r3, #2
 800271e:	d151      	bne.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b22      	cmp	r3, #34	; 0x22
 8002724:	d10d      	bne.n	8002742 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002734:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002740:	e040      	b.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b21      	cmp	r3, #33	; 0x21
 8002750:	d112      	bne.n	8002778 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002776:	e025      	b.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d120      	bne.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b21      	cmp	r3, #33	; 0x21
 8002786:	d11d      	bne.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002796:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fe36 	bl	8002430 <HAL_I2C_MemTxCpltCallback>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b22      	cmp	r3, #34	; 0x22
 80027de:	f040 80ac 	bne.w	800293a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d921      	bls.n	8002834 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b03      	cmp	r3, #3
 800281e:	f040 808c 	bne.w	800293a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002832:	e082      	b.n	800293a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	2b02      	cmp	r3, #2
 800283a:	d075      	beq.n	8002928 <I2C_MasterReceive_RXNE+0x15c>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d002      	beq.n	8002848 <I2C_MasterReceive_RXNE+0x7c>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d16f      	bne.n	8002928 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f001 f9c9 	bl	8003be0 <I2C_WaitOnSTOPRequestThroughIT>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d142      	bne.n	80028da <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002862:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002872:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d10a      	bne.n	80028c4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fdc1 	bl	8002444 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028c2:	e03a      	b.n	800293a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2212      	movs	r2, #18
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fd76 	bl	80023c4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028d8:	e02f      	b.n	800293a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fd99 	bl	8002458 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002926:	e008      	b.n	800293a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	605a      	str	r2, [r3, #4]
}
 8002938:	e7ff      	b.n	800293a <I2C_MasterReceive_RXNE+0x16e>
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b04      	cmp	r3, #4
 8002958:	d11b      	bne.n	8002992 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002968:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002990:	e0bd      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d129      	bne.n	80029f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d00a      	beq.n	80029c8 <I2C_MasterReceive_BTF+0x86>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d007      	beq.n	80029c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ee:	e08e      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d176      	bne.n	8002ae8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d002      	beq.n	8002a06 <I2C_MasterReceive_BTF+0xc4>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d108      	bne.n	8002a18 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e019      	b.n	8002a4c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <I2C_MasterReceive_BTF+0xe2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d108      	bne.n	8002a36 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e00a      	b.n	8002a4c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d007      	beq.n	8002a4c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aa6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d10a      	bne.n	8002ad2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fcba 	bl	8002444 <HAL_I2C_MemRxCpltCallback>
}
 8002ad0:	e01d      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2212      	movs	r2, #18
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fc6f 	bl	80023c4 <HAL_I2C_MasterRxCpltCallback>
}
 8002ae6:	e012      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d117      	bne.n	8002b5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b44:	e067      	b.n	8002c16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]
}
 8002b58:	e05d      	b.n	8002c16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b62:	d133      	bne.n	8002bcc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b21      	cmp	r3, #33	; 0x21
 8002b6e:	d109      	bne.n	8002b84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e008      	b.n	8002b96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <I2C_Master_SB+0x92>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d108      	bne.n	8002bba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d032      	beq.n	8002c16 <I2C_Master_SB+0x100>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02d      	beq.n	8002c16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc8:	605a      	str	r2, [r3, #4]
}
 8002bca:	e024      	b.n	8002c16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	11db      	asrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0306 	and.w	r3, r3, #6
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f063 030f 	orn	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]
}
 8002bf0:	e011      	b.n	8002c16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	11db      	asrs	r3, r3, #7
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 0306 	and.w	r3, r3, #6
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f063 030e 	orn	r3, r3, #14
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <I2C_Master_ADD10+0x26>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <I2C_Master_ADD10+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c68:	605a      	str	r2, [r3, #4]
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b091      	sub	sp, #68	; 0x44
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b22      	cmp	r3, #34	; 0x22
 8002c9e:	f040 8169 	bne.w	8002f74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <I2C_Master_ADDR+0x54>
 8002caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d10b      	bne.n	8002cca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	e160      	b.n	8002f8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <I2C_Master_ADDR+0x98>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cda:	d118      	bne.n	8002d0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002d0c:	e13e      	b.n	8002f8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d113      	bne.n	8002d40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e115      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 808a 	bne.w	8002e60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d52:	d137      	bne.n	8002dc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d72:	d113      	bne.n	8002d9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	e0e7      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e0d3      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d02e      	beq.n	8002e28 <I2C_Master_ADDR+0x1b2>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d02b      	beq.n	8002e28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d102      	bne.n	8002ddc <I2C_Master_ADDR+0x166>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d125      	bne.n	8002e28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00e      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d00b      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d008      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e007      	b.n	8002e10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	e0a1      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e085      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d14d      	bne.n	8002f06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d016      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d013      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d010      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e007      	b.n	8002eae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ebc:	d117      	bne.n	8002eee <I2C_Master_ADDR+0x278>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ec4:	d00b      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d008      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d005      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d002      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d107      	bne.n	8002eee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e032      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f24:	d117      	bne.n	8002f56 <I2C_Master_ADDR+0x2e0>
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f2c:	d00b      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d008      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d005      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d002      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d107      	bne.n	8002f56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f72:	e00b      	b.n	8002f8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
}
 8002f8a:	e7ff      	b.n	8002f8c <I2C_Master_ADDR+0x316>
 8002f8c:	bf00      	nop
 8002f8e:	3744      	adds	r7, #68	; 0x44
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02b      	beq.n	800300a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d114      	bne.n	800300a <I2C_SlaveTransmit_TXE+0x72>
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b29      	cmp	r3, #41	; 0x29
 8002fe4:	d111      	bne.n	800300a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2228      	movs	r2, #40	; 0x28
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff f9e7 	bl	80023d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d011      	beq.n	8003048 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02c      	beq.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d114      	bne.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d111      	bne.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2222      	movs	r2, #34	; 0x22
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2228      	movs	r2, #40	; 0x28
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff f992 	bl	80023ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800312e:	2b28      	cmp	r3, #40	; 0x28
 8003130:	d125      	bne.n	800317e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	81bb      	strh	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003170:	89ba      	ldrh	r2, [r7, #12]
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff f942 	bl	8002400 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800317c:	e00e      	b.n	800319c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003200:	d172      	bne.n	80032e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b22      	cmp	r3, #34	; 0x22
 8003206:	d002      	beq.n	800320e <I2C_Slave_STOPF+0x6a>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b2a      	cmp	r3, #42	; 0x2a
 800320c:	d135      	bne.n	800327a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0204 	orr.w	r2, r3, #4
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003240:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe f9ab 	bl	80015a2 <HAL_DMA_GetState>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d049      	beq.n	80032e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4a69      	ldr	r2, [pc, #420]	; (80033fc <I2C_Slave_STOPF+0x258>)
 8003258:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f97d 	bl	800155e <HAL_DMA_Abort_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03d      	beq.n	80032e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003274:	4610      	mov	r0, r2
 8003276:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003278:	e035      	b.n	80032e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f975 	bl	80015a2 <HAL_DMA_GetState>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d014      	beq.n	80032e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	4a4e      	ldr	r2, [pc, #312]	; (80033fc <I2C_Slave_STOPF+0x258>)
 80032c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f947 	bl	800155e <HAL_DMA_Abort_IT>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032e0:	4610      	mov	r0, r2
 80032e2:	4798      	blx	r3
 80032e4:	e000      	b.n	80032e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03e      	beq.n	8003370 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d112      	bne.n	8003326 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d112      	bne.n	800335a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8b3 	bl	80034e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800337e:	e039      	b.n	80033f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b2a      	cmp	r3, #42	; 0x2a
 8003384:	d109      	bne.n	800339a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2228      	movs	r2, #40	; 0x28
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff f829 	bl	80023ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b28      	cmp	r3, #40	; 0x28
 80033a4:	d111      	bne.n	80033ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <I2C_Slave_STOPF+0x25c>)
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff f82a 	bl	800241c <HAL_I2C_ListenCpltCallback>
}
 80033c8:	e014      	b.n	80033f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	2b22      	cmp	r3, #34	; 0x22
 80033d0:	d002      	beq.n	80033d8 <I2C_Slave_STOPF+0x234>
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b22      	cmp	r3, #34	; 0x22
 80033d6:	d10d      	bne.n	80033f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fffc 	bl	80023ec <HAL_I2C_SlaveRxCpltCallback>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	080038e5 	.word	0x080038e5
 8003400:	ffff0000 	.word	0xffff0000

08003404 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d002      	beq.n	8003426 <I2C_Slave_AF+0x22>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b20      	cmp	r3, #32
 8003424:	d129      	bne.n	800347a <I2C_Slave_AF+0x76>
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b28      	cmp	r3, #40	; 0x28
 800342a:	d126      	bne.n	800347a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <I2C_Slave_AF+0xdc>)
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003440:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe ffd2 	bl	800241c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003478:	e02e      	b.n	80034d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b21      	cmp	r3, #33	; 0x21
 800347e:	d126      	bne.n	80034ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <I2C_Slave_AF+0xdc>)
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2221      	movs	r2, #33	; 0x21
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe ff86 	bl	80023d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80034cc:	e004      	b.n	80034d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d6:	615a      	str	r2, [r3, #20]
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0x24>
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d10a      	bne.n	800351e <I2C_ITError+0x3a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b22      	cmp	r3, #34	; 0x22
 800350c:	d107      	bne.n	800351e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003524:	2b28      	cmp	r3, #40	; 0x28
 8003526:	d107      	bne.n	8003538 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2228      	movs	r2, #40	; 0x28
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003536:	e015      	b.n	8003564 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d00a      	beq.n	800355e <I2C_ITError+0x7a>
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b60      	cmp	r3, #96	; 0x60
 800354c:	d007      	beq.n	800355e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003572:	d162      	bne.n	800363a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d020      	beq.n	80035d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <I2C_ITError+0x25c>)
 8003598:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd ffdd 	bl	800155e <HAL_DMA_Abort_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8089 	beq.w	80036be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
 80035d2:	e074      	b.n	80036be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	4a59      	ldr	r2, [pc, #356]	; (8003740 <I2C_ITError+0x25c>)
 80035da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd ffbc 	bl	800155e <HAL_DMA_Abort_IT>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d068      	beq.n	80036be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d10b      	bne.n	8003612 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	e041      	b.n	80036be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b60      	cmp	r3, #96	; 0x60
 8003644:	d125      	bne.n	8003692 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d10b      	bne.n	800367a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe feee 	bl	800246c <HAL_I2C_AbortCpltCallback>
 8003690:	e015      	b.n	80036be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d10b      	bne.n	80036b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe fecd 	bl	8002458 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d113      	bne.n	8003738 <I2C_ITError+0x254>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b28      	cmp	r3, #40	; 0x28
 8003714:	d110      	bne.n	8003738 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <I2C_ITError+0x260>)
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fe72 	bl	800241c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	080038e5 	.word	0x080038e5
 8003744:	ffff0000 	.word	0xffff0000

08003748 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	460b      	mov	r3, r1
 8003756:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d006      	beq.n	8003782 <I2C_MasterRequestRead+0x3a>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d003      	beq.n	8003782 <I2C_MasterRequestRead+0x3a>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00b      	b.n	80037ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	2b11      	cmp	r3, #17
 800379a:	d107      	bne.n	80037ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f93b 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d2:	d103      	bne.n	80037dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e079      	b.n	80038d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e8:	d108      	bne.n	80037fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	e05f      	b.n	80038bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	11db      	asrs	r3, r3, #7
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f063 030f 	orn	r3, r3, #15
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4930      	ldr	r1, [pc, #192]	; (80038dc <I2C_MasterRequestRead+0x194>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f961 	bl	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e054      	b.n	80038d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4929      	ldr	r1, [pc, #164]	; (80038e0 <I2C_MasterRequestRead+0x198>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f951 	bl	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e044      	b.n	80038d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8d9 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d103      	bne.n	80038a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e017      	b.n	80038d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038a4:	897b      	ldrh	r3, [r7, #10]
 80038a6:	11db      	asrs	r3, r3, #7
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 0306 	and.w	r3, r3, #6
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f063 030e 	orn	r3, r3, #14
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <I2C_MasterRequestRead+0x198>)
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f90d 	bl	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	00010008 	.word	0x00010008
 80038e0:	00010002 	.word	0x00010002

080038e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038fe:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <I2C_DMAAbort+0x148>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <I2C_DMAAbort+0x14c>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0a1a      	lsrs	r2, r3, #8
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800392a:	e00a      	b.n	8003942 <I2C_DMAAbort+0x5e>
    }
    count--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d0ea      	beq.n	8003918 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	2200      	movs	r2, #0
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	2200      	movs	r2, #0
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	2200      	movs	r2, #0
 8003986:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	2200      	movs	r2, #0
 8003996:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d10e      	bne.n	80039d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7fe fd4e 	bl	800246c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039d0:	e027      	b.n	8003a22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039d8:	2b28      	cmp	r3, #40	; 0x28
 80039da:	d117      	bne.n	8003a0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2228      	movs	r2, #40	; 0x28
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a0a:	e007      	b.n	8003a1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a1c:	6978      	ldr	r0, [r7, #20]
 8003a1e:	f7fe fd1b 	bl	8002458 <HAL_I2C_ErrorCallback>
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	14f8b589 	.word	0x14f8b589

08003a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a44:	e025      	b.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d021      	beq.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fd fc45 	bl	80012dc <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e023      	b.n	8003ada <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10d      	bne.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	e00c      	b.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d0b6      	beq.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af0:	e051      	b.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b00:	d123      	bne.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0204 	orr.w	r2, r3, #4
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e046      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d021      	beq.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fd fbc3 	bl	80012dc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d116      	bne.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e020      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10c      	bne.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e00b      	b.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d18d      	bne.n	8003af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	0a1a      	lsrs	r2, r3, #8
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e008      	b.n	8003c30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d0e9      	beq.n	8003c02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	14f8b589 	.word	0x14f8b589

08003c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	e042      	b.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d119      	bne.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e029      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7fd fb22 	bl	80012dc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d1b5      	bne.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d00:	d103      	bne.n	8003d0a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d08:	e007      	b.n	8003d1a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d12:	d102      	bne.n	8003d1a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2208      	movs	r2, #8
 8003d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e267      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d075      	beq.n	8003e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d46:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d00c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d112      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x108>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d157      	bne.n	8003e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e242      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x74>
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a75      	ldr	r2, [pc, #468]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e01d      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x98>
 8003da6:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6c      	ldr	r2, [pc, #432]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003dc0:	4b69      	ldr	r3, [pc, #420]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a65      	ldr	r2, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fa7c 	bl	80012dc <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd fa78 	bl	80012dc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e207      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0xc0>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fa68 	bl	80012dc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd fa64 	bl	80012dc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e1f3      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0xe8>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d063      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d11c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x152>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e1c7      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	e03a      	b.n	8003f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e98:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x244>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fa1d 	bl	80012dc <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fa19 	bl	80012dc <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1a8      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4925      	ldr	r1, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x244>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd f9fc 	bl	80012dc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fd f9f8 	bl	80012dc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e187      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d036      	beq.n	8003f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_RCC_OscConfig+0x248>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd f9dc 	bl	80012dc <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd f9d8 	bl	80012dc <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e167      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x200>
 8003f46:	e01b      	b.n	8003f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_OscConfig+0x248>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd f9c5 	bl	80012dc <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd f9c1 	bl	80012dc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e150      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	42470000 	.word	0x42470000
 8003f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8097 	beq.w	80040bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b81      	ldr	r3, [pc, #516]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b7d      	ldr	r3, [pc, #500]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b7a      	ldr	r3, [pc, #488]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b77      	ldr	r3, [pc, #476]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b74      	ldr	r3, [pc, #464]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a73      	ldr	r2, [pc, #460]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f981 	bl	80012dc <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fd f97d 	bl	80012dc <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e10c      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x2ea>
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a63      	ldr	r2, [pc, #396]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x324>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x30c>
 800401a:	4b5f      	ldr	r3, [pc, #380]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5e      	ldr	r2, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a5b      	ldr	r2, [pc, #364]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x324>
 8004034:	4b58      	ldr	r3, [pc, #352]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	4b55      	ldr	r3, [pc, #340]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a54      	ldr	r2, [pc, #336]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd f942 	bl	80012dc <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd f93e 	bl	80012dc <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0cb      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x334>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7fd f92c 	bl	80012dc <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd f928 	bl	80012dc <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0b5      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409e:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a38      	ldr	r2, [pc, #224]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a1 	beq.w	8004208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d05c      	beq.n	800418c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d141      	bne.n	800415e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f8fc 	bl	80012dc <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd f8f8 	bl	80012dc <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e087      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fd f8d1 	bl	80012dc <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413e:	f7fd f8cd 	bl	80012dc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e05c      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x416>
 800415c:	e054      	b.n	8004208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fd f8ba 	bl	80012dc <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd f8b6 	bl	80012dc <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e045      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x444>
 800418a:	e03d      	b.n	8004208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e038      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x4ec>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d028      	beq.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d121      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d11a      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d4:	4013      	ands	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	4293      	cmp	r3, r2
 80041de:	d111      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	3b01      	subs	r3, #1
 80041ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0cc      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d90c      	bls.n	8004254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d044      	beq.n	8004338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e067      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fc ffe8 	bl	80012dc <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fc ffe4 	bl	80012dc <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20c      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc ff48 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08005930 	.word	0x08005930
 80043dc:	20000000 	.word	0x20000000
 80043e0:	20000004 	.word	0x20000004

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b094      	sub	sp, #80	; 0x50
 80043ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	647b      	str	r3, [r7, #68]	; 0x44
 80043f0:	2300      	movs	r3, #0
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	2300      	movs	r3, #0
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fc:	4b79      	ldr	r3, [pc, #484]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	d00d      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x40>
 8004408:	2b08      	cmp	r3, #8
 800440a:	f200 80e1 	bhi.w	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 8004412:	2b04      	cmp	r3, #4
 8004414:	d003      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x3a>
 8004416:	e0db      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800441c:	e0db      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004422:	e0d8      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004424:	4b6f      	ldr	r3, [pc, #444]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442e:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	2200      	movs	r2, #0
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
 8004444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
 8004452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	0159      	lsls	r1, r3, #5
 8004464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004468:	0150      	lsls	r0, r2, #5
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4621      	mov	r1, r4
 8004470:	1a51      	subs	r1, r2, r1
 8004472:	6139      	str	r1, [r7, #16]
 8004474:	4629      	mov	r1, r5
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004488:	4659      	mov	r1, fp
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004492:	4651      	mov	r1, sl
 8004494:	018a      	lsls	r2, r1, #6
 8004496:	4651      	mov	r1, sl
 8004498:	ebb2 0801 	subs.w	r8, r2, r1
 800449c:	4659      	mov	r1, fp
 800449e:	eb63 0901 	sbc.w	r9, r3, r1
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b6:	4690      	mov	r8, r2
 80044b8:	4699      	mov	r9, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	eb18 0303 	adds.w	r3, r8, r3
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	462b      	mov	r3, r5
 80044c4:	eb49 0303 	adc.w	r3, r9, r3
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044d6:	4629      	mov	r1, r5
 80044d8:	024b      	lsls	r3, r1, #9
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e0:	4621      	mov	r1, r4
 80044e2:	024a      	lsls	r2, r1, #9
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f4:	f7fc f9ca 	bl	800088c <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004500:	e058      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	2200      	movs	r2, #0
 800450a:	4618      	mov	r0, r3
 800450c:	4611      	mov	r1, r2
 800450e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0159      	lsls	r1, r3, #5
 800452a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452e:	0150      	lsls	r0, r2, #5
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4641      	mov	r1, r8
 8004536:	ebb2 0a01 	subs.w	sl, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800454c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004554:	ebb2 040a 	subs.w	r4, r2, sl
 8004558:	eb63 050b 	sbc.w	r5, r3, fp
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	00eb      	lsls	r3, r5, #3
 8004566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456a:	00e2      	lsls	r2, r4, #3
 800456c:	4614      	mov	r4, r2
 800456e:	461d      	mov	r5, r3
 8004570:	4643      	mov	r3, r8
 8004572:	18e3      	adds	r3, r4, r3
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	464b      	mov	r3, r9
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800458a:	4629      	mov	r1, r5
 800458c:	028b      	lsls	r3, r1, #10
 800458e:	4621      	mov	r1, r4
 8004590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004594:	4621      	mov	r1, r4
 8004596:	028a      	lsls	r2, r1, #10
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	61fa      	str	r2, [r7, #28]
 80045a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a8:	f7fc f970 	bl	800088c <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	3301      	adds	r3, #1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3750      	adds	r7, #80	; 0x50
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	007a1200 	.word	0x007a1200

080045f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_RCC_GetHCLKFreq+0x14>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000000 	.word	0x20000000

08004608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800460c:	f7ff fff0 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4903      	ldr	r1, [pc, #12]	; (800462c <HAL_RCC_GetPCLK1Freq+0x24>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	08005940 	.word	0x08005940

08004630 <std>:
 8004630:	2300      	movs	r3, #0
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0
 8004636:	e9c0 3300 	strd	r3, r3, [r0]
 800463a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800463e:	6083      	str	r3, [r0, #8]
 8004640:	8181      	strh	r1, [r0, #12]
 8004642:	6643      	str	r3, [r0, #100]	; 0x64
 8004644:	81c2      	strh	r2, [r0, #14]
 8004646:	6183      	str	r3, [r0, #24]
 8004648:	4619      	mov	r1, r3
 800464a:	2208      	movs	r2, #8
 800464c:	305c      	adds	r0, #92	; 0x5c
 800464e:	f000 fa05 	bl	8004a5c <memset>
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <std+0x38>)
 8004654:	6263      	str	r3, [r4, #36]	; 0x24
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <std+0x3c>)
 8004658:	62a3      	str	r3, [r4, #40]	; 0x28
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <std+0x40>)
 800465c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <std+0x44>)
 8004660:	6224      	str	r4, [r4, #32]
 8004662:	6323      	str	r3, [r4, #48]	; 0x30
 8004664:	bd10      	pop	{r4, pc}
 8004666:	bf00      	nop
 8004668:	080048ad 	.word	0x080048ad
 800466c:	080048cf 	.word	0x080048cf
 8004670:	08004907 	.word	0x08004907
 8004674:	0800492b 	.word	0x0800492b

08004678 <stdio_exit_handler>:
 8004678:	4a02      	ldr	r2, [pc, #8]	; (8004684 <stdio_exit_handler+0xc>)
 800467a:	4903      	ldr	r1, [pc, #12]	; (8004688 <stdio_exit_handler+0x10>)
 800467c:	4803      	ldr	r0, [pc, #12]	; (800468c <stdio_exit_handler+0x14>)
 800467e:	f000 b869 	b.w	8004754 <_fwalk_sglue>
 8004682:	bf00      	nop
 8004684:	2000000c 	.word	0x2000000c
 8004688:	080056a5 	.word	0x080056a5
 800468c:	20000018 	.word	0x20000018

08004690 <cleanup_stdio>:
 8004690:	6841      	ldr	r1, [r0, #4]
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <cleanup_stdio+0x34>)
 8004694:	4299      	cmp	r1, r3
 8004696:	b510      	push	{r4, lr}
 8004698:	4604      	mov	r4, r0
 800469a:	d001      	beq.n	80046a0 <cleanup_stdio+0x10>
 800469c:	f001 f802 	bl	80056a4 <_fflush_r>
 80046a0:	68a1      	ldr	r1, [r4, #8]
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <cleanup_stdio+0x38>)
 80046a4:	4299      	cmp	r1, r3
 80046a6:	d002      	beq.n	80046ae <cleanup_stdio+0x1e>
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 fffb 	bl	80056a4 <_fflush_r>
 80046ae:	68e1      	ldr	r1, [r4, #12]
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <cleanup_stdio+0x3c>)
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d004      	beq.n	80046c0 <cleanup_stdio+0x30>
 80046b6:	4620      	mov	r0, r4
 80046b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046bc:	f000 bff2 	b.w	80056a4 <_fflush_r>
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	bf00      	nop
 80046c4:	200000e0 	.word	0x200000e0
 80046c8:	20000148 	.word	0x20000148
 80046cc:	200001b0 	.word	0x200001b0

080046d0 <global_stdio_init.part.0>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <global_stdio_init.part.0+0x30>)
 80046d4:	4c0b      	ldr	r4, [pc, #44]	; (8004704 <global_stdio_init.part.0+0x34>)
 80046d6:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <global_stdio_init.part.0+0x38>)
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	4620      	mov	r0, r4
 80046dc:	2200      	movs	r2, #0
 80046de:	2104      	movs	r1, #4
 80046e0:	f7ff ffa6 	bl	8004630 <std>
 80046e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046e8:	2201      	movs	r2, #1
 80046ea:	2109      	movs	r1, #9
 80046ec:	f7ff ffa0 	bl	8004630 <std>
 80046f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046f4:	2202      	movs	r2, #2
 80046f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fa:	2112      	movs	r1, #18
 80046fc:	f7ff bf98 	b.w	8004630 <std>
 8004700:	20000218 	.word	0x20000218
 8004704:	200000e0 	.word	0x200000e0
 8004708:	08004679 	.word	0x08004679

0800470c <__sfp_lock_acquire>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__sfp_lock_acquire+0x8>)
 800470e:	f000 ba1d 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	20000221 	.word	0x20000221

08004718 <__sfp_lock_release>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__sfp_lock_release+0x8>)
 800471a:	f000 ba18 	b.w	8004b4e <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	20000221 	.word	0x20000221

08004724 <__sinit>:
 8004724:	b510      	push	{r4, lr}
 8004726:	4604      	mov	r4, r0
 8004728:	f7ff fff0 	bl	800470c <__sfp_lock_acquire>
 800472c:	6a23      	ldr	r3, [r4, #32]
 800472e:	b11b      	cbz	r3, 8004738 <__sinit+0x14>
 8004730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004734:	f7ff bff0 	b.w	8004718 <__sfp_lock_release>
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__sinit+0x28>)
 800473a:	6223      	str	r3, [r4, #32]
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <__sinit+0x2c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f5      	bne.n	8004730 <__sinit+0xc>
 8004744:	f7ff ffc4 	bl	80046d0 <global_stdio_init.part.0>
 8004748:	e7f2      	b.n	8004730 <__sinit+0xc>
 800474a:	bf00      	nop
 800474c:	08004691 	.word	0x08004691
 8004750:	20000218 	.word	0x20000218

08004754 <_fwalk_sglue>:
 8004754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004758:	4607      	mov	r7, r0
 800475a:	4688      	mov	r8, r1
 800475c:	4614      	mov	r4, r2
 800475e:	2600      	movs	r6, #0
 8004760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004764:	f1b9 0901 	subs.w	r9, r9, #1
 8004768:	d505      	bpl.n	8004776 <_fwalk_sglue+0x22>
 800476a:	6824      	ldr	r4, [r4, #0]
 800476c:	2c00      	cmp	r4, #0
 800476e:	d1f7      	bne.n	8004760 <_fwalk_sglue+0xc>
 8004770:	4630      	mov	r0, r6
 8004772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d907      	bls.n	800478c <_fwalk_sglue+0x38>
 800477c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004780:	3301      	adds	r3, #1
 8004782:	d003      	beq.n	800478c <_fwalk_sglue+0x38>
 8004784:	4629      	mov	r1, r5
 8004786:	4638      	mov	r0, r7
 8004788:	47c0      	blx	r8
 800478a:	4306      	orrs	r6, r0
 800478c:	3568      	adds	r5, #104	; 0x68
 800478e:	e7e9      	b.n	8004764 <_fwalk_sglue+0x10>

08004790 <iprintf>:
 8004790:	b40f      	push	{r0, r1, r2, r3}
 8004792:	b507      	push	{r0, r1, r2, lr}
 8004794:	4906      	ldr	r1, [pc, #24]	; (80047b0 <iprintf+0x20>)
 8004796:	ab04      	add	r3, sp, #16
 8004798:	6808      	ldr	r0, [r1, #0]
 800479a:	f853 2b04 	ldr.w	r2, [r3], #4
 800479e:	6881      	ldr	r1, [r0, #8]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	f000 fc4f 	bl	8005044 <_vfiprintf_r>
 80047a6:	b003      	add	sp, #12
 80047a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ac:	b004      	add	sp, #16
 80047ae:	4770      	bx	lr
 80047b0:	20000064 	.word	0x20000064

080047b4 <_puts_r>:
 80047b4:	6a03      	ldr	r3, [r0, #32]
 80047b6:	b570      	push	{r4, r5, r6, lr}
 80047b8:	6884      	ldr	r4, [r0, #8]
 80047ba:	4605      	mov	r5, r0
 80047bc:	460e      	mov	r6, r1
 80047be:	b90b      	cbnz	r3, 80047c4 <_puts_r+0x10>
 80047c0:	f7ff ffb0 	bl	8004724 <__sinit>
 80047c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c6:	07db      	lsls	r3, r3, #31
 80047c8:	d405      	bmi.n	80047d6 <_puts_r+0x22>
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	0598      	lsls	r0, r3, #22
 80047ce:	d402      	bmi.n	80047d6 <_puts_r+0x22>
 80047d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d2:	f000 f9bb 	bl	8004b4c <__retarget_lock_acquire_recursive>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	0719      	lsls	r1, r3, #28
 80047da:	d513      	bpl.n	8004804 <_puts_r+0x50>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	b18b      	cbz	r3, 8004804 <_puts_r+0x50>
 80047e0:	3e01      	subs	r6, #1
 80047e2:	68a3      	ldr	r3, [r4, #8]
 80047e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047e8:	3b01      	subs	r3, #1
 80047ea:	60a3      	str	r3, [r4, #8]
 80047ec:	b9e9      	cbnz	r1, 800482a <_puts_r+0x76>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da2e      	bge.n	8004850 <_puts_r+0x9c>
 80047f2:	4622      	mov	r2, r4
 80047f4:	210a      	movs	r1, #10
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 f89b 	bl	8004932 <__swbuf_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d007      	beq.n	8004810 <_puts_r+0x5c>
 8004800:	250a      	movs	r5, #10
 8004802:	e007      	b.n	8004814 <_puts_r+0x60>
 8004804:	4621      	mov	r1, r4
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f8d0 	bl	80049ac <__swsetup_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	d0e7      	beq.n	80047e0 <_puts_r+0x2c>
 8004810:	f04f 35ff 	mov.w	r5, #4294967295
 8004814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004816:	07da      	lsls	r2, r3, #31
 8004818:	d405      	bmi.n	8004826 <_puts_r+0x72>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	059b      	lsls	r3, r3, #22
 800481e:	d402      	bmi.n	8004826 <_puts_r+0x72>
 8004820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004822:	f000 f994 	bl	8004b4e <__retarget_lock_release_recursive>
 8004826:	4628      	mov	r0, r5
 8004828:	bd70      	pop	{r4, r5, r6, pc}
 800482a:	2b00      	cmp	r3, #0
 800482c:	da04      	bge.n	8004838 <_puts_r+0x84>
 800482e:	69a2      	ldr	r2, [r4, #24]
 8004830:	429a      	cmp	r2, r3
 8004832:	dc06      	bgt.n	8004842 <_puts_r+0x8e>
 8004834:	290a      	cmp	r1, #10
 8004836:	d004      	beq.n	8004842 <_puts_r+0x8e>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	7019      	strb	r1, [r3, #0]
 8004840:	e7cf      	b.n	80047e2 <_puts_r+0x2e>
 8004842:	4622      	mov	r2, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f000 f874 	bl	8004932 <__swbuf_r>
 800484a:	3001      	adds	r0, #1
 800484c:	d1c9      	bne.n	80047e2 <_puts_r+0x2e>
 800484e:	e7df      	b.n	8004810 <_puts_r+0x5c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	250a      	movs	r5, #10
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	6022      	str	r2, [r4, #0]
 8004858:	701d      	strb	r5, [r3, #0]
 800485a:	e7db      	b.n	8004814 <_puts_r+0x60>

0800485c <puts>:
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <puts+0xc>)
 800485e:	4601      	mov	r1, r0
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	f7ff bfa7 	b.w	80047b4 <_puts_r>
 8004866:	bf00      	nop
 8004868:	20000064 	.word	0x20000064

0800486c <siprintf>:
 800486c:	b40e      	push	{r1, r2, r3}
 800486e:	b500      	push	{lr}
 8004870:	b09c      	sub	sp, #112	; 0x70
 8004872:	ab1d      	add	r3, sp, #116	; 0x74
 8004874:	9002      	str	r0, [sp, #8]
 8004876:	9006      	str	r0, [sp, #24]
 8004878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800487c:	4809      	ldr	r0, [pc, #36]	; (80048a4 <siprintf+0x38>)
 800487e:	9107      	str	r1, [sp, #28]
 8004880:	9104      	str	r1, [sp, #16]
 8004882:	4909      	ldr	r1, [pc, #36]	; (80048a8 <siprintf+0x3c>)
 8004884:	f853 2b04 	ldr.w	r2, [r3], #4
 8004888:	9105      	str	r1, [sp, #20]
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	a902      	add	r1, sp, #8
 8004890:	f000 fab0 	bl	8004df4 <_svfiprintf_r>
 8004894:	9b02      	ldr	r3, [sp, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	b01c      	add	sp, #112	; 0x70
 800489c:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a0:	b003      	add	sp, #12
 80048a2:	4770      	bx	lr
 80048a4:	20000064 	.word	0x20000064
 80048a8:	ffff0208 	.word	0xffff0208

080048ac <__sread>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	460c      	mov	r4, r1
 80048b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b4:	f000 f8fc 	bl	8004ab0 <_read_r>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	bfab      	itete	ge
 80048bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048be:	89a3      	ldrhlt	r3, [r4, #12]
 80048c0:	181b      	addge	r3, r3, r0
 80048c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048c6:	bfac      	ite	ge
 80048c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ca:	81a3      	strhlt	r3, [r4, #12]
 80048cc:	bd10      	pop	{r4, pc}

080048ce <__swrite>:
 80048ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	461f      	mov	r7, r3
 80048d4:	898b      	ldrh	r3, [r1, #12]
 80048d6:	05db      	lsls	r3, r3, #23
 80048d8:	4605      	mov	r5, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	4616      	mov	r6, r2
 80048de:	d505      	bpl.n	80048ec <__swrite+0x1e>
 80048e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e4:	2302      	movs	r3, #2
 80048e6:	2200      	movs	r2, #0
 80048e8:	f000 f8d0 	bl	8004a8c <_lseek_r>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	4632      	mov	r2, r6
 80048fa:	463b      	mov	r3, r7
 80048fc:	4628      	mov	r0, r5
 80048fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	f000 b8e7 	b.w	8004ad4 <_write_r>

08004906 <__sseek>:
 8004906:	b510      	push	{r4, lr}
 8004908:	460c      	mov	r4, r1
 800490a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490e:	f000 f8bd 	bl	8004a8c <_lseek_r>
 8004912:	1c43      	adds	r3, r0, #1
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	bf15      	itete	ne
 8004918:	6560      	strne	r0, [r4, #84]	; 0x54
 800491a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800491e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004922:	81a3      	strheq	r3, [r4, #12]
 8004924:	bf18      	it	ne
 8004926:	81a3      	strhne	r3, [r4, #12]
 8004928:	bd10      	pop	{r4, pc}

0800492a <__sclose>:
 800492a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492e:	f000 b89d 	b.w	8004a6c <_close_r>

08004932 <__swbuf_r>:
 8004932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004934:	460e      	mov	r6, r1
 8004936:	4614      	mov	r4, r2
 8004938:	4605      	mov	r5, r0
 800493a:	b118      	cbz	r0, 8004944 <__swbuf_r+0x12>
 800493c:	6a03      	ldr	r3, [r0, #32]
 800493e:	b90b      	cbnz	r3, 8004944 <__swbuf_r+0x12>
 8004940:	f7ff fef0 	bl	8004724 <__sinit>
 8004944:	69a3      	ldr	r3, [r4, #24]
 8004946:	60a3      	str	r3, [r4, #8]
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	071a      	lsls	r2, r3, #28
 800494c:	d525      	bpl.n	800499a <__swbuf_r+0x68>
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	b31b      	cbz	r3, 800499a <__swbuf_r+0x68>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	1a98      	subs	r0, r3, r2
 8004958:	6963      	ldr	r3, [r4, #20]
 800495a:	b2f6      	uxtb	r6, r6
 800495c:	4283      	cmp	r3, r0
 800495e:	4637      	mov	r7, r6
 8004960:	dc04      	bgt.n	800496c <__swbuf_r+0x3a>
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 fe9d 	bl	80056a4 <_fflush_r>
 800496a:	b9e0      	cbnz	r0, 80049a6 <__swbuf_r+0x74>
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	60a3      	str	r3, [r4, #8]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	6022      	str	r2, [r4, #0]
 8004978:	701e      	strb	r6, [r3, #0]
 800497a:	6962      	ldr	r2, [r4, #20]
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	429a      	cmp	r2, r3
 8004980:	d004      	beq.n	800498c <__swbuf_r+0x5a>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	07db      	lsls	r3, r3, #31
 8004986:	d506      	bpl.n	8004996 <__swbuf_r+0x64>
 8004988:	2e0a      	cmp	r6, #10
 800498a:	d104      	bne.n	8004996 <__swbuf_r+0x64>
 800498c:	4621      	mov	r1, r4
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fe88 	bl	80056a4 <_fflush_r>
 8004994:	b938      	cbnz	r0, 80049a6 <__swbuf_r+0x74>
 8004996:	4638      	mov	r0, r7
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	4621      	mov	r1, r4
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f805 	bl	80049ac <__swsetup_r>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d0d5      	beq.n	8004952 <__swbuf_r+0x20>
 80049a6:	f04f 37ff 	mov.w	r7, #4294967295
 80049aa:	e7f4      	b.n	8004996 <__swbuf_r+0x64>

080049ac <__swsetup_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <__swsetup_r+0xac>)
 80049b0:	4605      	mov	r5, r0
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	460c      	mov	r4, r1
 80049b6:	b118      	cbz	r0, 80049c0 <__swsetup_r+0x14>
 80049b8:	6a03      	ldr	r3, [r0, #32]
 80049ba:	b90b      	cbnz	r3, 80049c0 <__swsetup_r+0x14>
 80049bc:	f7ff feb2 	bl	8004724 <__sinit>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049c6:	0718      	lsls	r0, r3, #28
 80049c8:	d422      	bmi.n	8004a10 <__swsetup_r+0x64>
 80049ca:	06d9      	lsls	r1, r3, #27
 80049cc:	d407      	bmi.n	80049de <__swsetup_r+0x32>
 80049ce:	2309      	movs	r3, #9
 80049d0:	602b      	str	r3, [r5, #0]
 80049d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	e034      	b.n	8004a48 <__swsetup_r+0x9c>
 80049de:	0758      	lsls	r0, r3, #29
 80049e0:	d512      	bpl.n	8004a08 <__swsetup_r+0x5c>
 80049e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e4:	b141      	cbz	r1, 80049f8 <__swsetup_r+0x4c>
 80049e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ea:	4299      	cmp	r1, r3
 80049ec:	d002      	beq.n	80049f4 <__swsetup_r+0x48>
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f8ae 	bl	8004b50 <_free_r>
 80049f4:	2300      	movs	r3, #0
 80049f6:	6363      	str	r3, [r4, #52]	; 0x34
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	2300      	movs	r3, #0
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	81a3      	strh	r3, [r4, #12]
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	b94b      	cbnz	r3, 8004a28 <__swsetup_r+0x7c>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d003      	beq.n	8004a28 <__swsetup_r+0x7c>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 fe8c 	bl	8005740 <__smakebuf_r>
 8004a28:	89a0      	ldrh	r0, [r4, #12]
 8004a2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a2e:	f010 0301 	ands.w	r3, r0, #1
 8004a32:	d00a      	beq.n	8004a4a <__swsetup_r+0x9e>
 8004a34:	2300      	movs	r3, #0
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	6963      	ldr	r3, [r4, #20]
 8004a3a:	425b      	negs	r3, r3
 8004a3c:	61a3      	str	r3, [r4, #24]
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	b943      	cbnz	r3, 8004a54 <__swsetup_r+0xa8>
 8004a42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a46:	d1c4      	bne.n	80049d2 <__swsetup_r+0x26>
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
 8004a4a:	0781      	lsls	r1, r0, #30
 8004a4c:	bf58      	it	pl
 8004a4e:	6963      	ldrpl	r3, [r4, #20]
 8004a50:	60a3      	str	r3, [r4, #8]
 8004a52:	e7f4      	b.n	8004a3e <__swsetup_r+0x92>
 8004a54:	2000      	movs	r0, #0
 8004a56:	e7f7      	b.n	8004a48 <__swsetup_r+0x9c>
 8004a58:	20000064 	.word	0x20000064

08004a5c <memset>:
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <memset+0xa>
 8004a64:	4770      	bx	lr
 8004a66:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6a:	e7f9      	b.n	8004a60 <memset+0x4>

08004a6c <_close_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d06      	ldr	r5, [pc, #24]	; (8004a88 <_close_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7fc fb23 	bl	80010c2 <_close>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_close_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_close_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	2000021c 	.word	0x2000021c

08004a8c <_lseek_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d07      	ldr	r5, [pc, #28]	; (8004aac <_lseek_r+0x20>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	4608      	mov	r0, r1
 8004a94:	4611      	mov	r1, r2
 8004a96:	2200      	movs	r2, #0
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f7fc fb38 	bl	8001110 <_lseek>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_lseek_r+0x1e>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_lseek_r+0x1e>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	2000021c 	.word	0x2000021c

08004ab0 <_read_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d07      	ldr	r5, [pc, #28]	; (8004ad0 <_read_r+0x20>)
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4611      	mov	r1, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7fc fae2 	bl	8001088 <_read>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_read_r+0x1e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_read_r+0x1e>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	2000021c 	.word	0x2000021c

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	; (8004af4 <_write_r+0x20>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4608      	mov	r0, r1
 8004adc:	4611      	mov	r1, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7fc f8bb 	bl	8000c5e <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	2000021c 	.word	0x2000021c

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000064 	.word	0x20000064

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	; (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	; (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	; (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	; (8004b48 <__libc_init_array+0x44>)
 8004b18:	f000 fee0 	bl	80058dc <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08005984 	.word	0x08005984
 8004b40:	08005984 	.word	0x08005984
 8004b44:	08005984 	.word	0x08005984
 8004b48:	08005988 	.word	0x08005988

08004b4c <__retarget_lock_acquire_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_release_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <_free_r>:
 8004b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d044      	beq.n	8004be0 <_free_r+0x90>
 8004b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5a:	9001      	str	r0, [sp, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b62:	bfb8      	it	lt
 8004b64:	18e4      	addlt	r4, r4, r3
 8004b66:	f000 f8df 	bl	8004d28 <__malloc_lock>
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <_free_r+0x94>)
 8004b6c:	9801      	ldr	r0, [sp, #4]
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	b933      	cbnz	r3, 8004b80 <_free_r+0x30>
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	6014      	str	r4, [r2, #0]
 8004b76:	b003      	add	sp, #12
 8004b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b7c:	f000 b8da 	b.w	8004d34 <__malloc_unlock>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d908      	bls.n	8004b96 <_free_r+0x46>
 8004b84:	6825      	ldr	r5, [r4, #0]
 8004b86:	1961      	adds	r1, r4, r5
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf01      	itttt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	1949      	addeq	r1, r1, r5
 8004b92:	6021      	streq	r1, [r4, #0]
 8004b94:	e7ed      	b.n	8004b72 <_free_r+0x22>
 8004b96:	461a      	mov	r2, r3
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b10b      	cbz	r3, 8004ba0 <_free_r+0x50>
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d9fa      	bls.n	8004b96 <_free_r+0x46>
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	1855      	adds	r5, r2, r1
 8004ba4:	42a5      	cmp	r5, r4
 8004ba6:	d10b      	bne.n	8004bc0 <_free_r+0x70>
 8004ba8:	6824      	ldr	r4, [r4, #0]
 8004baa:	4421      	add	r1, r4
 8004bac:	1854      	adds	r4, r2, r1
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	d1e0      	bne.n	8004b76 <_free_r+0x26>
 8004bb4:	681c      	ldr	r4, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	6053      	str	r3, [r2, #4]
 8004bba:	440c      	add	r4, r1
 8004bbc:	6014      	str	r4, [r2, #0]
 8004bbe:	e7da      	b.n	8004b76 <_free_r+0x26>
 8004bc0:	d902      	bls.n	8004bc8 <_free_r+0x78>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	6003      	str	r3, [r0, #0]
 8004bc6:	e7d6      	b.n	8004b76 <_free_r+0x26>
 8004bc8:	6825      	ldr	r5, [r4, #0]
 8004bca:	1961      	adds	r1, r4, r5
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf04      	itt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	bf04      	itt	eq
 8004bd8:	1949      	addeq	r1, r1, r5
 8004bda:	6021      	streq	r1, [r4, #0]
 8004bdc:	6054      	str	r4, [r2, #4]
 8004bde:	e7ca      	b.n	8004b76 <_free_r+0x26>
 8004be0:	b003      	add	sp, #12
 8004be2:	bd30      	pop	{r4, r5, pc}
 8004be4:	20000224 	.word	0x20000224

08004be8 <sbrk_aligned>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0e      	ldr	r6, [pc, #56]	; (8004c24 <sbrk_aligned+0x3c>)
 8004bec:	460c      	mov	r4, r1
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	b911      	cbnz	r1, 8004bfa <sbrk_aligned+0x12>
 8004bf4:	f000 fe1c 	bl	8005830 <_sbrk_r>
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fe17 	bl	8005830 <_sbrk_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <sbrk_aligned+0x34>
 8004c06:	1cc4      	adds	r4, r0, #3
 8004c08:	f024 0403 	bic.w	r4, r4, #3
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d007      	beq.n	8004c20 <sbrk_aligned+0x38>
 8004c10:	1a21      	subs	r1, r4, r0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fe0c 	bl	8005830 <_sbrk_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d101      	bne.n	8004c20 <sbrk_aligned+0x38>
 8004c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c20:	4620      	mov	r0, r4
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	20000228 	.word	0x20000228

08004c28 <_malloc_r>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	1ccd      	adds	r5, r1, #3
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x1c>
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d905      	bls.n	8004c50 <_malloc_r+0x28>
 8004c44:	230c      	movs	r3, #12
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	2600      	movs	r6, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d24 <_malloc_r+0xfc>
 8004c54:	f000 f868 	bl	8004d28 <__malloc_lock>
 8004c58:	f8d8 3000 	ldr.w	r3, [r8]
 8004c5c:	461c      	mov	r4, r3
 8004c5e:	bb5c      	cbnz	r4, 8004cb8 <_malloc_r+0x90>
 8004c60:	4629      	mov	r1, r5
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7ff ffc0 	bl	8004be8 <sbrk_aligned>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	d155      	bne.n	8004d1a <_malloc_r+0xf2>
 8004c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8004c72:	4626      	mov	r6, r4
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	d145      	bne.n	8004d04 <_malloc_r+0xdc>
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d048      	beq.n	8004d0e <_malloc_r+0xe6>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4638      	mov	r0, r7
 8004c82:	eb04 0903 	add.w	r9, r4, r3
 8004c86:	f000 fdd3 	bl	8005830 <_sbrk_r>
 8004c8a:	4581      	cmp	r9, r0
 8004c8c:	d13f      	bne.n	8004d0e <_malloc_r+0xe6>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	1a6d      	subs	r5, r5, r1
 8004c92:	4629      	mov	r1, r5
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ffa7 	bl	8004be8 <sbrk_aligned>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d037      	beq.n	8004d0e <_malloc_r+0xe6>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	442b      	add	r3, r5
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d038      	beq.n	8004d1e <_malloc_r+0xf6>
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	42a2      	cmp	r2, r4
 8004cb0:	d12b      	bne.n	8004d0a <_malloc_r+0xe2>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	e00f      	b.n	8004cd8 <_malloc_r+0xb0>
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	1b52      	subs	r2, r2, r5
 8004cbc:	d41f      	bmi.n	8004cfe <_malloc_r+0xd6>
 8004cbe:	2a0b      	cmp	r2, #11
 8004cc0:	d917      	bls.n	8004cf2 <_malloc_r+0xca>
 8004cc2:	1961      	adds	r1, r4, r5
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	6025      	str	r5, [r4, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	6059      	strne	r1, [r3, #4]
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	bf08      	it	eq
 8004cd0:	f8c8 1000 	streq.w	r1, [r8]
 8004cd4:	5162      	str	r2, [r4, r5]
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f104 060b 	add.w	r6, r4, #11
 8004cde:	f000 f829 	bl	8004d34 <__malloc_unlock>
 8004ce2:	f026 0607 	bic.w	r6, r6, #7
 8004ce6:	1d23      	adds	r3, r4, #4
 8004ce8:	1af2      	subs	r2, r6, r3
 8004cea:	d0ae      	beq.n	8004c4a <_malloc_r+0x22>
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	50a3      	str	r3, [r4, r2]
 8004cf0:	e7ab      	b.n	8004c4a <_malloc_r+0x22>
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6862      	ldr	r2, [r4, #4]
 8004cf6:	d1dd      	bne.n	8004cb4 <_malloc_r+0x8c>
 8004cf8:	f8c8 2000 	str.w	r2, [r8]
 8004cfc:	e7ec      	b.n	8004cd8 <_malloc_r+0xb0>
 8004cfe:	4623      	mov	r3, r4
 8004d00:	6864      	ldr	r4, [r4, #4]
 8004d02:	e7ac      	b.n	8004c5e <_malloc_r+0x36>
 8004d04:	4634      	mov	r4, r6
 8004d06:	6876      	ldr	r6, [r6, #4]
 8004d08:	e7b4      	b.n	8004c74 <_malloc_r+0x4c>
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	e7cc      	b.n	8004ca8 <_malloc_r+0x80>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4638      	mov	r0, r7
 8004d14:	f000 f80e 	bl	8004d34 <__malloc_unlock>
 8004d18:	e797      	b.n	8004c4a <_malloc_r+0x22>
 8004d1a:	6025      	str	r5, [r4, #0]
 8004d1c:	e7dc      	b.n	8004cd8 <_malloc_r+0xb0>
 8004d1e:	605b      	str	r3, [r3, #4]
 8004d20:	deff      	udf	#255	; 0xff
 8004d22:	bf00      	nop
 8004d24:	20000224 	.word	0x20000224

08004d28 <__malloc_lock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_lock+0x8>)
 8004d2a:	f7ff bf0f 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20000220 	.word	0x20000220

08004d34 <__malloc_unlock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_unlock+0x8>)
 8004d36:	f7ff bf0a 	b.w	8004b4e <__retarget_lock_release_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	20000220 	.word	0x20000220

08004d40 <__ssputs_r>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	688e      	ldr	r6, [r1, #8]
 8004d46:	461f      	mov	r7, r3
 8004d48:	42be      	cmp	r6, r7
 8004d4a:	680b      	ldr	r3, [r1, #0]
 8004d4c:	4682      	mov	sl, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4690      	mov	r8, r2
 8004d52:	d82c      	bhi.n	8004dae <__ssputs_r+0x6e>
 8004d54:	898a      	ldrh	r2, [r1, #12]
 8004d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d5a:	d026      	beq.n	8004daa <__ssputs_r+0x6a>
 8004d5c:	6965      	ldr	r5, [r4, #20]
 8004d5e:	6909      	ldr	r1, [r1, #16]
 8004d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d64:	eba3 0901 	sub.w	r9, r3, r1
 8004d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d6c:	1c7b      	adds	r3, r7, #1
 8004d6e:	444b      	add	r3, r9
 8004d70:	106d      	asrs	r5, r5, #1
 8004d72:	429d      	cmp	r5, r3
 8004d74:	bf38      	it	cc
 8004d76:	461d      	movcc	r5, r3
 8004d78:	0553      	lsls	r3, r2, #21
 8004d7a:	d527      	bpl.n	8004dcc <__ssputs_r+0x8c>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f7ff ff53 	bl	8004c28 <_malloc_r>
 8004d82:	4606      	mov	r6, r0
 8004d84:	b360      	cbz	r0, 8004de0 <__ssputs_r+0xa0>
 8004d86:	6921      	ldr	r1, [r4, #16]
 8004d88:	464a      	mov	r2, r9
 8004d8a:	f000 fd61 	bl	8005850 <memcpy>
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	6126      	str	r6, [r4, #16]
 8004d9c:	6165      	str	r5, [r4, #20]
 8004d9e:	444e      	add	r6, r9
 8004da0:	eba5 0509 	sub.w	r5, r5, r9
 8004da4:	6026      	str	r6, [r4, #0]
 8004da6:	60a5      	str	r5, [r4, #8]
 8004da8:	463e      	mov	r6, r7
 8004daa:	42be      	cmp	r6, r7
 8004dac:	d900      	bls.n	8004db0 <__ssputs_r+0x70>
 8004dae:	463e      	mov	r6, r7
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	4632      	mov	r2, r6
 8004db4:	4641      	mov	r1, r8
 8004db6:	f000 fcff 	bl	80057b8 <memmove>
 8004dba:	68a3      	ldr	r3, [r4, #8]
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	60a3      	str	r3, [r4, #8]
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	4433      	add	r3, r6
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	462a      	mov	r2, r5
 8004dce:	f000 fd4d 	bl	800586c <_realloc_r>
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d1e0      	bne.n	8004d9a <__ssputs_r+0x5a>
 8004dd8:	6921      	ldr	r1, [r4, #16]
 8004dda:	4650      	mov	r0, sl
 8004ddc:	f7ff feb8 	bl	8004b50 <_free_r>
 8004de0:	230c      	movs	r3, #12
 8004de2:	f8ca 3000 	str.w	r3, [sl]
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295
 8004df2:	e7e9      	b.n	8004dc8 <__ssputs_r+0x88>

08004df4 <_svfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	4698      	mov	r8, r3
 8004dfa:	898b      	ldrh	r3, [r1, #12]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	b09d      	sub	sp, #116	; 0x74
 8004e00:	4607      	mov	r7, r0
 8004e02:	460d      	mov	r5, r1
 8004e04:	4614      	mov	r4, r2
 8004e06:	d50e      	bpl.n	8004e26 <_svfiprintf_r+0x32>
 8004e08:	690b      	ldr	r3, [r1, #16]
 8004e0a:	b963      	cbnz	r3, 8004e26 <_svfiprintf_r+0x32>
 8004e0c:	2140      	movs	r1, #64	; 0x40
 8004e0e:	f7ff ff0b 	bl	8004c28 <_malloc_r>
 8004e12:	6028      	str	r0, [r5, #0]
 8004e14:	6128      	str	r0, [r5, #16]
 8004e16:	b920      	cbnz	r0, 8004e22 <_svfiprintf_r+0x2e>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e0d0      	b.n	8004fc4 <_svfiprintf_r+0x1d0>
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e34:	2330      	movs	r3, #48	; 0x30
 8004e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fdc <_svfiprintf_r+0x1e8>
 8004e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e3e:	f04f 0901 	mov.w	r9, #1
 8004e42:	4623      	mov	r3, r4
 8004e44:	469a      	mov	sl, r3
 8004e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4a:	b10a      	cbz	r2, 8004e50 <_svfiprintf_r+0x5c>
 8004e4c:	2a25      	cmp	r2, #37	; 0x25
 8004e4e:	d1f9      	bne.n	8004e44 <_svfiprintf_r+0x50>
 8004e50:	ebba 0b04 	subs.w	fp, sl, r4
 8004e54:	d00b      	beq.n	8004e6e <_svfiprintf_r+0x7a>
 8004e56:	465b      	mov	r3, fp
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff6f 	bl	8004d40 <__ssputs_r>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f000 80a9 	beq.w	8004fba <_svfiprintf_r+0x1c6>
 8004e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6a:	445a      	add	r2, fp
 8004e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a1 	beq.w	8004fba <_svfiprintf_r+0x1c6>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e82:	f10a 0a01 	add.w	sl, sl, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e90:	4654      	mov	r4, sl
 8004e92:	2205      	movs	r2, #5
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	4850      	ldr	r0, [pc, #320]	; (8004fdc <_svfiprintf_r+0x1e8>)
 8004e9a:	f7fb f999 	bl	80001d0 <memchr>
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_svfiprintf_r+0xe6>
 8004ea2:	06d0      	lsls	r0, r2, #27
 8004ea4:	bf44      	itt	mi
 8004ea6:	2320      	movmi	r3, #32
 8004ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eac:	0711      	lsls	r1, r2, #28
 8004eae:	bf44      	itt	mi
 8004eb0:	232b      	movmi	r3, #43	; 0x2b
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b2a      	cmp	r3, #42	; 0x2a
 8004ebc:	d015      	beq.n	8004eea <_svfiprintf_r+0xf6>
 8004ebe:	9a07      	ldr	r2, [sp, #28]
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f04f 0c0a 	mov.w	ip, #10
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ece:	3b30      	subs	r3, #48	; 0x30
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d94d      	bls.n	8004f70 <_svfiprintf_r+0x17c>
 8004ed4:	b1b0      	cbz	r0, 8004f04 <_svfiprintf_r+0x110>
 8004ed6:	9207      	str	r2, [sp, #28]
 8004ed8:	e014      	b.n	8004f04 <_svfiprintf_r+0x110>
 8004eda:	eba0 0308 	sub.w	r3, r0, r8
 8004ede:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	46a2      	mov	sl, r4
 8004ee8:	e7d2      	b.n	8004e90 <_svfiprintf_r+0x9c>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	9103      	str	r1, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbb      	ittet	lt
 8004ef6:	425b      	neglt	r3, r3
 8004ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8004efc:	9307      	strge	r3, [sp, #28]
 8004efe:	9307      	strlt	r3, [sp, #28]
 8004f00:	bfb8      	it	lt
 8004f02:	9204      	strlt	r2, [sp, #16]
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	2b2e      	cmp	r3, #46	; 0x2e
 8004f08:	d10c      	bne.n	8004f24 <_svfiprintf_r+0x130>
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0e:	d134      	bne.n	8004f7a <_svfiprintf_r+0x186>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f20:	3402      	adds	r4, #2
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004fec <_svfiprintf_r+0x1f8>
 8004f28:	7821      	ldrb	r1, [r4, #0]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f7fb f94f 	bl	80001d0 <memchr>
 8004f32:	b138      	cbz	r0, 8004f44 <_svfiprintf_r+0x150>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	eba0 000a 	sub.w	r0, r0, sl
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	4082      	lsls	r2, r0
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	3401      	adds	r4, #1
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f48:	4825      	ldr	r0, [pc, #148]	; (8004fe0 <_svfiprintf_r+0x1ec>)
 8004f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f4e:	2206      	movs	r2, #6
 8004f50:	f7fb f93e 	bl	80001d0 <memchr>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d038      	beq.n	8004fca <_svfiprintf_r+0x1d6>
 8004f58:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <_svfiprintf_r+0x1f0>)
 8004f5a:	bb1b      	cbnz	r3, 8004fa4 <_svfiprintf_r+0x1b0>
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	3307      	adds	r3, #7
 8004f60:	f023 0307 	bic.w	r3, r3, #7
 8004f64:	3308      	adds	r3, #8
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6a:	4433      	add	r3, r6
 8004f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6e:	e768      	b.n	8004e42 <_svfiprintf_r+0x4e>
 8004f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f74:	460c      	mov	r4, r1
 8004f76:	2001      	movs	r0, #1
 8004f78:	e7a6      	b.n	8004ec8 <_svfiprintf_r+0xd4>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	3401      	adds	r4, #1
 8004f7e:	9305      	str	r3, [sp, #20]
 8004f80:	4619      	mov	r1, r3
 8004f82:	f04f 0c0a 	mov.w	ip, #10
 8004f86:	4620      	mov	r0, r4
 8004f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8c:	3a30      	subs	r2, #48	; 0x30
 8004f8e:	2a09      	cmp	r2, #9
 8004f90:	d903      	bls.n	8004f9a <_svfiprintf_r+0x1a6>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0c6      	beq.n	8004f24 <_svfiprintf_r+0x130>
 8004f96:	9105      	str	r1, [sp, #20]
 8004f98:	e7c4      	b.n	8004f24 <_svfiprintf_r+0x130>
 8004f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e7f0      	b.n	8004f86 <_svfiprintf_r+0x192>
 8004fa4:	ab03      	add	r3, sp, #12
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <_svfiprintf_r+0x1f4>)
 8004fac:	a904      	add	r1, sp, #16
 8004fae:	4638      	mov	r0, r7
 8004fb0:	f3af 8000 	nop.w
 8004fb4:	1c42      	adds	r2, r0, #1
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	d1d6      	bne.n	8004f68 <_svfiprintf_r+0x174>
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	065b      	lsls	r3, r3, #25
 8004fbe:	f53f af2d 	bmi.w	8004e1c <_svfiprintf_r+0x28>
 8004fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc4:	b01d      	add	sp, #116	; 0x74
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	ab03      	add	r3, sp, #12
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	462a      	mov	r2, r5
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <_svfiprintf_r+0x1f4>)
 8004fd2:	a904      	add	r1, sp, #16
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f000 f9bd 	bl	8005354 <_printf_i>
 8004fda:	e7eb      	b.n	8004fb4 <_svfiprintf_r+0x1c0>
 8004fdc:	08005948 	.word	0x08005948
 8004fe0:	08005952 	.word	0x08005952
 8004fe4:	00000000 	.word	0x00000000
 8004fe8:	08004d41 	.word	0x08004d41
 8004fec:	0800594e 	.word	0x0800594e

08004ff0 <__sfputc_r>:
 8004ff0:	6893      	ldr	r3, [r2, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	b410      	push	{r4}
 8004ff8:	6093      	str	r3, [r2, #8]
 8004ffa:	da08      	bge.n	800500e <__sfputc_r+0x1e>
 8004ffc:	6994      	ldr	r4, [r2, #24]
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	db01      	blt.n	8005006 <__sfputc_r+0x16>
 8005002:	290a      	cmp	r1, #10
 8005004:	d103      	bne.n	800500e <__sfputc_r+0x1e>
 8005006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500a:	f7ff bc92 	b.w	8004932 <__swbuf_r>
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	1c58      	adds	r0, r3, #1
 8005012:	6010      	str	r0, [r2, #0]
 8005014:	7019      	strb	r1, [r3, #0]
 8005016:	4608      	mov	r0, r1
 8005018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800501c:	4770      	bx	lr

0800501e <__sfputs_r>:
 800501e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	4614      	mov	r4, r2
 8005026:	18d5      	adds	r5, r2, r3
 8005028:	42ac      	cmp	r4, r5
 800502a:	d101      	bne.n	8005030 <__sfputs_r+0x12>
 800502c:	2000      	movs	r0, #0
 800502e:	e007      	b.n	8005040 <__sfputs_r+0x22>
 8005030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005034:	463a      	mov	r2, r7
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ffda 	bl	8004ff0 <__sfputc_r>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d1f3      	bne.n	8005028 <__sfputs_r+0xa>
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005044 <_vfiprintf_r>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	460d      	mov	r5, r1
 800504a:	b09d      	sub	sp, #116	; 0x74
 800504c:	4614      	mov	r4, r2
 800504e:	4698      	mov	r8, r3
 8005050:	4606      	mov	r6, r0
 8005052:	b118      	cbz	r0, 800505c <_vfiprintf_r+0x18>
 8005054:	6a03      	ldr	r3, [r0, #32]
 8005056:	b90b      	cbnz	r3, 800505c <_vfiprintf_r+0x18>
 8005058:	f7ff fb64 	bl	8004724 <__sinit>
 800505c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	d405      	bmi.n	800506e <_vfiprintf_r+0x2a>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	059a      	lsls	r2, r3, #22
 8005066:	d402      	bmi.n	800506e <_vfiprintf_r+0x2a>
 8005068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800506a:	f7ff fd6f 	bl	8004b4c <__retarget_lock_acquire_recursive>
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	d501      	bpl.n	8005078 <_vfiprintf_r+0x34>
 8005074:	692b      	ldr	r3, [r5, #16]
 8005076:	b99b      	cbnz	r3, 80050a0 <_vfiprintf_r+0x5c>
 8005078:	4629      	mov	r1, r5
 800507a:	4630      	mov	r0, r6
 800507c:	f7ff fc96 	bl	80049ac <__swsetup_r>
 8005080:	b170      	cbz	r0, 80050a0 <_vfiprintf_r+0x5c>
 8005082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005084:	07dc      	lsls	r4, r3, #31
 8005086:	d504      	bpl.n	8005092 <_vfiprintf_r+0x4e>
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	b01d      	add	sp, #116	; 0x74
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	0598      	lsls	r0, r3, #22
 8005096:	d4f7      	bmi.n	8005088 <_vfiprintf_r+0x44>
 8005098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800509a:	f7ff fd58 	bl	8004b4e <__retarget_lock_release_recursive>
 800509e:	e7f3      	b.n	8005088 <_vfiprintf_r+0x44>
 80050a0:	2300      	movs	r3, #0
 80050a2:	9309      	str	r3, [sp, #36]	; 0x24
 80050a4:	2320      	movs	r3, #32
 80050a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ae:	2330      	movs	r3, #48	; 0x30
 80050b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005264 <_vfiprintf_r+0x220>
 80050b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b8:	f04f 0901 	mov.w	r9, #1
 80050bc:	4623      	mov	r3, r4
 80050be:	469a      	mov	sl, r3
 80050c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050c4:	b10a      	cbz	r2, 80050ca <_vfiprintf_r+0x86>
 80050c6:	2a25      	cmp	r2, #37	; 0x25
 80050c8:	d1f9      	bne.n	80050be <_vfiprintf_r+0x7a>
 80050ca:	ebba 0b04 	subs.w	fp, sl, r4
 80050ce:	d00b      	beq.n	80050e8 <_vfiprintf_r+0xa4>
 80050d0:	465b      	mov	r3, fp
 80050d2:	4622      	mov	r2, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff ffa1 	bl	800501e <__sfputs_r>
 80050dc:	3001      	adds	r0, #1
 80050de:	f000 80a9 	beq.w	8005234 <_vfiprintf_r+0x1f0>
 80050e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e4:	445a      	add	r2, fp
 80050e6:	9209      	str	r2, [sp, #36]	; 0x24
 80050e8:	f89a 3000 	ldrb.w	r3, [sl]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80a1 	beq.w	8005234 <_vfiprintf_r+0x1f0>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050fc:	f10a 0a01 	add.w	sl, sl, #1
 8005100:	9304      	str	r3, [sp, #16]
 8005102:	9307      	str	r3, [sp, #28]
 8005104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005108:	931a      	str	r3, [sp, #104]	; 0x68
 800510a:	4654      	mov	r4, sl
 800510c:	2205      	movs	r2, #5
 800510e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005112:	4854      	ldr	r0, [pc, #336]	; (8005264 <_vfiprintf_r+0x220>)
 8005114:	f7fb f85c 	bl	80001d0 <memchr>
 8005118:	9a04      	ldr	r2, [sp, #16]
 800511a:	b9d8      	cbnz	r0, 8005154 <_vfiprintf_r+0x110>
 800511c:	06d1      	lsls	r1, r2, #27
 800511e:	bf44      	itt	mi
 8005120:	2320      	movmi	r3, #32
 8005122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005126:	0713      	lsls	r3, r2, #28
 8005128:	bf44      	itt	mi
 800512a:	232b      	movmi	r3, #43	; 0x2b
 800512c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005130:	f89a 3000 	ldrb.w	r3, [sl]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d015      	beq.n	8005164 <_vfiprintf_r+0x120>
 8005138:	9a07      	ldr	r2, [sp, #28]
 800513a:	4654      	mov	r4, sl
 800513c:	2000      	movs	r0, #0
 800513e:	f04f 0c0a 	mov.w	ip, #10
 8005142:	4621      	mov	r1, r4
 8005144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005148:	3b30      	subs	r3, #48	; 0x30
 800514a:	2b09      	cmp	r3, #9
 800514c:	d94d      	bls.n	80051ea <_vfiprintf_r+0x1a6>
 800514e:	b1b0      	cbz	r0, 800517e <_vfiprintf_r+0x13a>
 8005150:	9207      	str	r2, [sp, #28]
 8005152:	e014      	b.n	800517e <_vfiprintf_r+0x13a>
 8005154:	eba0 0308 	sub.w	r3, r0, r8
 8005158:	fa09 f303 	lsl.w	r3, r9, r3
 800515c:	4313      	orrs	r3, r2
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	46a2      	mov	sl, r4
 8005162:	e7d2      	b.n	800510a <_vfiprintf_r+0xc6>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	1d19      	adds	r1, r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	9103      	str	r1, [sp, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfbb      	ittet	lt
 8005170:	425b      	neglt	r3, r3
 8005172:	f042 0202 	orrlt.w	r2, r2, #2
 8005176:	9307      	strge	r3, [sp, #28]
 8005178:	9307      	strlt	r3, [sp, #28]
 800517a:	bfb8      	it	lt
 800517c:	9204      	strlt	r2, [sp, #16]
 800517e:	7823      	ldrb	r3, [r4, #0]
 8005180:	2b2e      	cmp	r3, #46	; 0x2e
 8005182:	d10c      	bne.n	800519e <_vfiprintf_r+0x15a>
 8005184:	7863      	ldrb	r3, [r4, #1]
 8005186:	2b2a      	cmp	r3, #42	; 0x2a
 8005188:	d134      	bne.n	80051f4 <_vfiprintf_r+0x1b0>
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	9203      	str	r2, [sp, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	bfb8      	it	lt
 8005196:	f04f 33ff 	movlt.w	r3, #4294967295
 800519a:	3402      	adds	r4, #2
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005274 <_vfiprintf_r+0x230>
 80051a2:	7821      	ldrb	r1, [r4, #0]
 80051a4:	2203      	movs	r2, #3
 80051a6:	4650      	mov	r0, sl
 80051a8:	f7fb f812 	bl	80001d0 <memchr>
 80051ac:	b138      	cbz	r0, 80051be <_vfiprintf_r+0x17a>
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	eba0 000a 	sub.w	r0, r0, sl
 80051b4:	2240      	movs	r2, #64	; 0x40
 80051b6:	4082      	lsls	r2, r0
 80051b8:	4313      	orrs	r3, r2
 80051ba:	3401      	adds	r4, #1
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c2:	4829      	ldr	r0, [pc, #164]	; (8005268 <_vfiprintf_r+0x224>)
 80051c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c8:	2206      	movs	r2, #6
 80051ca:	f7fb f801 	bl	80001d0 <memchr>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d03f      	beq.n	8005252 <_vfiprintf_r+0x20e>
 80051d2:	4b26      	ldr	r3, [pc, #152]	; (800526c <_vfiprintf_r+0x228>)
 80051d4:	bb1b      	cbnz	r3, 800521e <_vfiprintf_r+0x1da>
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	3307      	adds	r3, #7
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	3308      	adds	r3, #8
 80051e0:	9303      	str	r3, [sp, #12]
 80051e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e4:	443b      	add	r3, r7
 80051e6:	9309      	str	r3, [sp, #36]	; 0x24
 80051e8:	e768      	b.n	80050bc <_vfiprintf_r+0x78>
 80051ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ee:	460c      	mov	r4, r1
 80051f0:	2001      	movs	r0, #1
 80051f2:	e7a6      	b.n	8005142 <_vfiprintf_r+0xfe>
 80051f4:	2300      	movs	r3, #0
 80051f6:	3401      	adds	r4, #1
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	4619      	mov	r1, r3
 80051fc:	f04f 0c0a 	mov.w	ip, #10
 8005200:	4620      	mov	r0, r4
 8005202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005206:	3a30      	subs	r2, #48	; 0x30
 8005208:	2a09      	cmp	r2, #9
 800520a:	d903      	bls.n	8005214 <_vfiprintf_r+0x1d0>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0c6      	beq.n	800519e <_vfiprintf_r+0x15a>
 8005210:	9105      	str	r1, [sp, #20]
 8005212:	e7c4      	b.n	800519e <_vfiprintf_r+0x15a>
 8005214:	fb0c 2101 	mla	r1, ip, r1, r2
 8005218:	4604      	mov	r4, r0
 800521a:	2301      	movs	r3, #1
 800521c:	e7f0      	b.n	8005200 <_vfiprintf_r+0x1bc>
 800521e:	ab03      	add	r3, sp, #12
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	462a      	mov	r2, r5
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <_vfiprintf_r+0x22c>)
 8005226:	a904      	add	r1, sp, #16
 8005228:	4630      	mov	r0, r6
 800522a:	f3af 8000 	nop.w
 800522e:	4607      	mov	r7, r0
 8005230:	1c78      	adds	r0, r7, #1
 8005232:	d1d6      	bne.n	80051e2 <_vfiprintf_r+0x19e>
 8005234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005236:	07d9      	lsls	r1, r3, #31
 8005238:	d405      	bmi.n	8005246 <_vfiprintf_r+0x202>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	059a      	lsls	r2, r3, #22
 800523e:	d402      	bmi.n	8005246 <_vfiprintf_r+0x202>
 8005240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005242:	f7ff fc84 	bl	8004b4e <__retarget_lock_release_recursive>
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	065b      	lsls	r3, r3, #25
 800524a:	f53f af1d 	bmi.w	8005088 <_vfiprintf_r+0x44>
 800524e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005250:	e71c      	b.n	800508c <_vfiprintf_r+0x48>
 8005252:	ab03      	add	r3, sp, #12
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	462a      	mov	r2, r5
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_vfiprintf_r+0x22c>)
 800525a:	a904      	add	r1, sp, #16
 800525c:	4630      	mov	r0, r6
 800525e:	f000 f879 	bl	8005354 <_printf_i>
 8005262:	e7e4      	b.n	800522e <_vfiprintf_r+0x1ea>
 8005264:	08005948 	.word	0x08005948
 8005268:	08005952 	.word	0x08005952
 800526c:	00000000 	.word	0x00000000
 8005270:	0800501f 	.word	0x0800501f
 8005274:	0800594e 	.word	0x0800594e

08005278 <_printf_common>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	4616      	mov	r6, r2
 800527e:	4699      	mov	r9, r3
 8005280:	688a      	ldr	r2, [r1, #8]
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005288:	4293      	cmp	r3, r2
 800528a:	bfb8      	it	lt
 800528c:	4613      	movlt	r3, r2
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005294:	4607      	mov	r7, r0
 8005296:	460c      	mov	r4, r1
 8005298:	b10a      	cbz	r2, 800529e <_printf_common+0x26>
 800529a:	3301      	adds	r3, #1
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	0699      	lsls	r1, r3, #26
 80052a2:	bf42      	ittt	mi
 80052a4:	6833      	ldrmi	r3, [r6, #0]
 80052a6:	3302      	addmi	r3, #2
 80052a8:	6033      	strmi	r3, [r6, #0]
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	f015 0506 	ands.w	r5, r5, #6
 80052b0:	d106      	bne.n	80052c0 <_printf_common+0x48>
 80052b2:	f104 0a19 	add.w	sl, r4, #25
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	6832      	ldr	r2, [r6, #0]
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	42ab      	cmp	r3, r5
 80052be:	dc26      	bgt.n	800530e <_printf_common+0x96>
 80052c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c4:	1e13      	subs	r3, r2, #0
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	bf18      	it	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	0692      	lsls	r2, r2, #26
 80052ce:	d42b      	bmi.n	8005328 <_printf_common+0xb0>
 80052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d4:	4649      	mov	r1, r9
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	3001      	adds	r0, #1
 80052dc:	d01e      	beq.n	800531c <_printf_common+0xa4>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	6922      	ldr	r2, [r4, #16]
 80052e2:	f003 0306 	and.w	r3, r3, #6
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	bf02      	ittt	eq
 80052ea:	68e5      	ldreq	r5, [r4, #12]
 80052ec:	6833      	ldreq	r3, [r6, #0]
 80052ee:	1aed      	subeq	r5, r5, r3
 80052f0:	68a3      	ldr	r3, [r4, #8]
 80052f2:	bf0c      	ite	eq
 80052f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f8:	2500      	movne	r5, #0
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bfc4      	itt	gt
 80052fe:	1a9b      	subgt	r3, r3, r2
 8005300:	18ed      	addgt	r5, r5, r3
 8005302:	2600      	movs	r6, #0
 8005304:	341a      	adds	r4, #26
 8005306:	42b5      	cmp	r5, r6
 8005308:	d11a      	bne.n	8005340 <_printf_common+0xc8>
 800530a:	2000      	movs	r0, #0
 800530c:	e008      	b.n	8005320 <_printf_common+0xa8>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4649      	mov	r1, r9
 8005314:	4638      	mov	r0, r7
 8005316:	47c0      	blx	r8
 8005318:	3001      	adds	r0, #1
 800531a:	d103      	bne.n	8005324 <_printf_common+0xac>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	3501      	adds	r5, #1
 8005326:	e7c6      	b.n	80052b6 <_printf_common+0x3e>
 8005328:	18e1      	adds	r1, r4, r3
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	2030      	movs	r0, #48	; 0x30
 800532e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005332:	4422      	add	r2, r4
 8005334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800533c:	3302      	adds	r3, #2
 800533e:	e7c7      	b.n	80052d0 <_printf_common+0x58>
 8005340:	2301      	movs	r3, #1
 8005342:	4622      	mov	r2, r4
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d0e6      	beq.n	800531c <_printf_common+0xa4>
 800534e:	3601      	adds	r6, #1
 8005350:	e7d9      	b.n	8005306 <_printf_common+0x8e>
	...

08005354 <_printf_i>:
 8005354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	7e0f      	ldrb	r7, [r1, #24]
 800535a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800535c:	2f78      	cmp	r7, #120	; 0x78
 800535e:	4691      	mov	r9, r2
 8005360:	4680      	mov	r8, r0
 8005362:	460c      	mov	r4, r1
 8005364:	469a      	mov	sl, r3
 8005366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800536a:	d807      	bhi.n	800537c <_printf_i+0x28>
 800536c:	2f62      	cmp	r7, #98	; 0x62
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x32>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80d4 	beq.w	800551e <_printf_i+0x1ca>
 8005376:	2f58      	cmp	r7, #88	; 0x58
 8005378:	f000 80c0 	beq.w	80054fc <_printf_i+0x1a8>
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005384:	e03a      	b.n	80053fc <_printf_i+0xa8>
 8005386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538a:	2b15      	cmp	r3, #21
 800538c:	d8f6      	bhi.n	800537c <_printf_i+0x28>
 800538e:	a101      	add	r1, pc, #4	; (adr r1, 8005394 <_printf_i+0x40>)
 8005390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005394:	080053ed 	.word	0x080053ed
 8005398:	08005401 	.word	0x08005401
 800539c:	0800537d 	.word	0x0800537d
 80053a0:	0800537d 	.word	0x0800537d
 80053a4:	0800537d 	.word	0x0800537d
 80053a8:	0800537d 	.word	0x0800537d
 80053ac:	08005401 	.word	0x08005401
 80053b0:	0800537d 	.word	0x0800537d
 80053b4:	0800537d 	.word	0x0800537d
 80053b8:	0800537d 	.word	0x0800537d
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	08005505 	.word	0x08005505
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	080054bf 	.word	0x080054bf
 80053cc:	0800537d 	.word	0x0800537d
 80053d0:	0800537d 	.word	0x0800537d
 80053d4:	08005527 	.word	0x08005527
 80053d8:	0800537d 	.word	0x0800537d
 80053dc:	0800542d 	.word	0x0800542d
 80053e0:	0800537d 	.word	0x0800537d
 80053e4:	0800537d 	.word	0x0800537d
 80053e8:	080054c7 	.word	0x080054c7
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	602a      	str	r2, [r5, #0]
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e09f      	b.n	8005540 <_printf_i+0x1ec>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	682b      	ldr	r3, [r5, #0]
 8005404:	0607      	lsls	r7, r0, #24
 8005406:	f103 0104 	add.w	r1, r3, #4
 800540a:	6029      	str	r1, [r5, #0]
 800540c:	d501      	bpl.n	8005412 <_printf_i+0xbe>
 800540e:	681e      	ldr	r6, [r3, #0]
 8005410:	e003      	b.n	800541a <_printf_i+0xc6>
 8005412:	0646      	lsls	r6, r0, #25
 8005414:	d5fb      	bpl.n	800540e <_printf_i+0xba>
 8005416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800541a:	2e00      	cmp	r6, #0
 800541c:	da03      	bge.n	8005426 <_printf_i+0xd2>
 800541e:	232d      	movs	r3, #45	; 0x2d
 8005420:	4276      	negs	r6, r6
 8005422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005426:	485a      	ldr	r0, [pc, #360]	; (8005590 <_printf_i+0x23c>)
 8005428:	230a      	movs	r3, #10
 800542a:	e012      	b.n	8005452 <_printf_i+0xfe>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	6820      	ldr	r0, [r4, #0]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	6029      	str	r1, [r5, #0]
 8005434:	0605      	lsls	r5, r0, #24
 8005436:	d501      	bpl.n	800543c <_printf_i+0xe8>
 8005438:	681e      	ldr	r6, [r3, #0]
 800543a:	e002      	b.n	8005442 <_printf_i+0xee>
 800543c:	0641      	lsls	r1, r0, #25
 800543e:	d5fb      	bpl.n	8005438 <_printf_i+0xe4>
 8005440:	881e      	ldrh	r6, [r3, #0]
 8005442:	4853      	ldr	r0, [pc, #332]	; (8005590 <_printf_i+0x23c>)
 8005444:	2f6f      	cmp	r7, #111	; 0x6f
 8005446:	bf0c      	ite	eq
 8005448:	2308      	moveq	r3, #8
 800544a:	230a      	movne	r3, #10
 800544c:	2100      	movs	r1, #0
 800544e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005452:	6865      	ldr	r5, [r4, #4]
 8005454:	60a5      	str	r5, [r4, #8]
 8005456:	2d00      	cmp	r5, #0
 8005458:	bfa2      	ittt	ge
 800545a:	6821      	ldrge	r1, [r4, #0]
 800545c:	f021 0104 	bicge.w	r1, r1, #4
 8005460:	6021      	strge	r1, [r4, #0]
 8005462:	b90e      	cbnz	r6, 8005468 <_printf_i+0x114>
 8005464:	2d00      	cmp	r5, #0
 8005466:	d04b      	beq.n	8005500 <_printf_i+0x1ac>
 8005468:	4615      	mov	r5, r2
 800546a:	fbb6 f1f3 	udiv	r1, r6, r3
 800546e:	fb03 6711 	mls	r7, r3, r1, r6
 8005472:	5dc7      	ldrb	r7, [r0, r7]
 8005474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005478:	4637      	mov	r7, r6
 800547a:	42bb      	cmp	r3, r7
 800547c:	460e      	mov	r6, r1
 800547e:	d9f4      	bls.n	800546a <_printf_i+0x116>
 8005480:	2b08      	cmp	r3, #8
 8005482:	d10b      	bne.n	800549c <_printf_i+0x148>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07de      	lsls	r6, r3, #31
 8005488:	d508      	bpl.n	800549c <_printf_i+0x148>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	6861      	ldr	r1, [r4, #4]
 800548e:	4299      	cmp	r1, r3
 8005490:	bfde      	ittt	le
 8005492:	2330      	movle	r3, #48	; 0x30
 8005494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800549c:	1b52      	subs	r2, r2, r5
 800549e:	6122      	str	r2, [r4, #16]
 80054a0:	f8cd a000 	str.w	sl, [sp]
 80054a4:	464b      	mov	r3, r9
 80054a6:	aa03      	add	r2, sp, #12
 80054a8:	4621      	mov	r1, r4
 80054aa:	4640      	mov	r0, r8
 80054ac:	f7ff fee4 	bl	8005278 <_printf_common>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d14a      	bne.n	800554a <_printf_i+0x1f6>
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	b004      	add	sp, #16
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	4833      	ldr	r0, [pc, #204]	; (8005594 <_printf_i+0x240>)
 80054c8:	2778      	movs	r7, #120	; 0x78
 80054ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	6829      	ldr	r1, [r5, #0]
 80054d2:	061f      	lsls	r7, r3, #24
 80054d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d8:	d402      	bmi.n	80054e0 <_printf_i+0x18c>
 80054da:	065f      	lsls	r7, r3, #25
 80054dc:	bf48      	it	mi
 80054de:	b2b6      	uxthmi	r6, r6
 80054e0:	07df      	lsls	r7, r3, #31
 80054e2:	bf48      	it	mi
 80054e4:	f043 0320 	orrmi.w	r3, r3, #32
 80054e8:	6029      	str	r1, [r5, #0]
 80054ea:	bf48      	it	mi
 80054ec:	6023      	strmi	r3, [r4, #0]
 80054ee:	b91e      	cbnz	r6, 80054f8 <_printf_i+0x1a4>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	f023 0320 	bic.w	r3, r3, #32
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	2310      	movs	r3, #16
 80054fa:	e7a7      	b.n	800544c <_printf_i+0xf8>
 80054fc:	4824      	ldr	r0, [pc, #144]	; (8005590 <_printf_i+0x23c>)
 80054fe:	e7e4      	b.n	80054ca <_printf_i+0x176>
 8005500:	4615      	mov	r5, r2
 8005502:	e7bd      	b.n	8005480 <_printf_i+0x12c>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	6826      	ldr	r6, [r4, #0]
 8005508:	6961      	ldr	r1, [r4, #20]
 800550a:	1d18      	adds	r0, r3, #4
 800550c:	6028      	str	r0, [r5, #0]
 800550e:	0635      	lsls	r5, r6, #24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	d501      	bpl.n	8005518 <_printf_i+0x1c4>
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	e002      	b.n	800551e <_printf_i+0x1ca>
 8005518:	0670      	lsls	r0, r6, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0x1c0>
 800551c:	8019      	strh	r1, [r3, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	4615      	mov	r5, r2
 8005524:	e7bc      	b.n	80054a0 <_printf_i+0x14c>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	2100      	movs	r1, #0
 8005532:	4628      	mov	r0, r5
 8005534:	f7fa fe4c 	bl	80001d0 <memchr>
 8005538:	b108      	cbz	r0, 800553e <_printf_i+0x1ea>
 800553a:	1b40      	subs	r0, r0, r5
 800553c:	6060      	str	r0, [r4, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	2300      	movs	r3, #0
 8005544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005548:	e7aa      	b.n	80054a0 <_printf_i+0x14c>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	462a      	mov	r2, r5
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	47d0      	blx	sl
 8005554:	3001      	adds	r0, #1
 8005556:	d0ad      	beq.n	80054b4 <_printf_i+0x160>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	079b      	lsls	r3, r3, #30
 800555c:	d413      	bmi.n	8005586 <_printf_i+0x232>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	4298      	cmp	r0, r3
 8005564:	bfb8      	it	lt
 8005566:	4618      	movlt	r0, r3
 8005568:	e7a6      	b.n	80054b8 <_printf_i+0x164>
 800556a:	2301      	movs	r3, #1
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	47d0      	blx	sl
 8005574:	3001      	adds	r0, #1
 8005576:	d09d      	beq.n	80054b4 <_printf_i+0x160>
 8005578:	3501      	adds	r5, #1
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	9903      	ldr	r1, [sp, #12]
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	42ab      	cmp	r3, r5
 8005582:	dcf2      	bgt.n	800556a <_printf_i+0x216>
 8005584:	e7eb      	b.n	800555e <_printf_i+0x20a>
 8005586:	2500      	movs	r5, #0
 8005588:	f104 0619 	add.w	r6, r4, #25
 800558c:	e7f5      	b.n	800557a <_printf_i+0x226>
 800558e:	bf00      	nop
 8005590:	08005959 	.word	0x08005959
 8005594:	0800596a 	.word	0x0800596a

08005598 <__sflush_r>:
 8005598:	898a      	ldrh	r2, [r1, #12]
 800559a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559e:	4605      	mov	r5, r0
 80055a0:	0710      	lsls	r0, r2, #28
 80055a2:	460c      	mov	r4, r1
 80055a4:	d458      	bmi.n	8005658 <__sflush_r+0xc0>
 80055a6:	684b      	ldr	r3, [r1, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dc05      	bgt.n	80055b8 <__sflush_r+0x20>
 80055ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dc02      	bgt.n	80055b8 <__sflush_r+0x20>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	d0f9      	beq.n	80055b2 <__sflush_r+0x1a>
 80055be:	2300      	movs	r3, #0
 80055c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055c4:	682f      	ldr	r7, [r5, #0]
 80055c6:	6a21      	ldr	r1, [r4, #32]
 80055c8:	602b      	str	r3, [r5, #0]
 80055ca:	d032      	beq.n	8005632 <__sflush_r+0x9a>
 80055cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	075a      	lsls	r2, r3, #29
 80055d2:	d505      	bpl.n	80055e0 <__sflush_r+0x48>
 80055d4:	6863      	ldr	r3, [r4, #4]
 80055d6:	1ac0      	subs	r0, r0, r3
 80055d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055da:	b10b      	cbz	r3, 80055e0 <__sflush_r+0x48>
 80055dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055de:	1ac0      	subs	r0, r0, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	4602      	mov	r2, r0
 80055e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055e6:	6a21      	ldr	r1, [r4, #32]
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b0      	blx	r6
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	d106      	bne.n	8005600 <__sflush_r+0x68>
 80055f2:	6829      	ldr	r1, [r5, #0]
 80055f4:	291d      	cmp	r1, #29
 80055f6:	d82b      	bhi.n	8005650 <__sflush_r+0xb8>
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <__sflush_r+0x108>)
 80055fa:	410a      	asrs	r2, r1
 80055fc:	07d6      	lsls	r6, r2, #31
 80055fe:	d427      	bmi.n	8005650 <__sflush_r+0xb8>
 8005600:	2200      	movs	r2, #0
 8005602:	6062      	str	r2, [r4, #4]
 8005604:	04d9      	lsls	r1, r3, #19
 8005606:	6922      	ldr	r2, [r4, #16]
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	d504      	bpl.n	8005616 <__sflush_r+0x7e>
 800560c:	1c42      	adds	r2, r0, #1
 800560e:	d101      	bne.n	8005614 <__sflush_r+0x7c>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b903      	cbnz	r3, 8005616 <__sflush_r+0x7e>
 8005614:	6560      	str	r0, [r4, #84]	; 0x54
 8005616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005618:	602f      	str	r7, [r5, #0]
 800561a:	2900      	cmp	r1, #0
 800561c:	d0c9      	beq.n	80055b2 <__sflush_r+0x1a>
 800561e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005622:	4299      	cmp	r1, r3
 8005624:	d002      	beq.n	800562c <__sflush_r+0x94>
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fa92 	bl	8004b50 <_free_r>
 800562c:	2000      	movs	r0, #0
 800562e:	6360      	str	r0, [r4, #52]	; 0x34
 8005630:	e7c0      	b.n	80055b4 <__sflush_r+0x1c>
 8005632:	2301      	movs	r3, #1
 8005634:	4628      	mov	r0, r5
 8005636:	47b0      	blx	r6
 8005638:	1c41      	adds	r1, r0, #1
 800563a:	d1c8      	bne.n	80055ce <__sflush_r+0x36>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0c5      	beq.n	80055ce <__sflush_r+0x36>
 8005642:	2b1d      	cmp	r3, #29
 8005644:	d001      	beq.n	800564a <__sflush_r+0xb2>
 8005646:	2b16      	cmp	r3, #22
 8005648:	d101      	bne.n	800564e <__sflush_r+0xb6>
 800564a:	602f      	str	r7, [r5, #0]
 800564c:	e7b1      	b.n	80055b2 <__sflush_r+0x1a>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	e7ad      	b.n	80055b4 <__sflush_r+0x1c>
 8005658:	690f      	ldr	r7, [r1, #16]
 800565a:	2f00      	cmp	r7, #0
 800565c:	d0a9      	beq.n	80055b2 <__sflush_r+0x1a>
 800565e:	0793      	lsls	r3, r2, #30
 8005660:	680e      	ldr	r6, [r1, #0]
 8005662:	bf08      	it	eq
 8005664:	694b      	ldreq	r3, [r1, #20]
 8005666:	600f      	str	r7, [r1, #0]
 8005668:	bf18      	it	ne
 800566a:	2300      	movne	r3, #0
 800566c:	eba6 0807 	sub.w	r8, r6, r7
 8005670:	608b      	str	r3, [r1, #8]
 8005672:	f1b8 0f00 	cmp.w	r8, #0
 8005676:	dd9c      	ble.n	80055b2 <__sflush_r+0x1a>
 8005678:	6a21      	ldr	r1, [r4, #32]
 800567a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800567c:	4643      	mov	r3, r8
 800567e:	463a      	mov	r2, r7
 8005680:	4628      	mov	r0, r5
 8005682:	47b0      	blx	r6
 8005684:	2800      	cmp	r0, #0
 8005686:	dc06      	bgt.n	8005696 <__sflush_r+0xfe>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	e78e      	b.n	80055b4 <__sflush_r+0x1c>
 8005696:	4407      	add	r7, r0
 8005698:	eba8 0800 	sub.w	r8, r8, r0
 800569c:	e7e9      	b.n	8005672 <__sflush_r+0xda>
 800569e:	bf00      	nop
 80056a0:	dfbffffe 	.word	0xdfbffffe

080056a4 <_fflush_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	4605      	mov	r5, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	b913      	cbnz	r3, 80056b4 <_fflush_r+0x10>
 80056ae:	2500      	movs	r5, #0
 80056b0:	4628      	mov	r0, r5
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	b118      	cbz	r0, 80056be <_fflush_r+0x1a>
 80056b6:	6a03      	ldr	r3, [r0, #32]
 80056b8:	b90b      	cbnz	r3, 80056be <_fflush_r+0x1a>
 80056ba:	f7ff f833 	bl	8004724 <__sinit>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f3      	beq.n	80056ae <_fflush_r+0xa>
 80056c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056c8:	07d0      	lsls	r0, r2, #31
 80056ca:	d404      	bmi.n	80056d6 <_fflush_r+0x32>
 80056cc:	0599      	lsls	r1, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_fflush_r+0x32>
 80056d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d2:	f7ff fa3b 	bl	8004b4c <__retarget_lock_acquire_recursive>
 80056d6:	4628      	mov	r0, r5
 80056d8:	4621      	mov	r1, r4
 80056da:	f7ff ff5d 	bl	8005598 <__sflush_r>
 80056de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056e0:	07da      	lsls	r2, r3, #31
 80056e2:	4605      	mov	r5, r0
 80056e4:	d4e4      	bmi.n	80056b0 <_fflush_r+0xc>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	059b      	lsls	r3, r3, #22
 80056ea:	d4e1      	bmi.n	80056b0 <_fflush_r+0xc>
 80056ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ee:	f7ff fa2e 	bl	8004b4e <__retarget_lock_release_recursive>
 80056f2:	e7dd      	b.n	80056b0 <_fflush_r+0xc>

080056f4 <__swhatbuf_r>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	460c      	mov	r4, r1
 80056f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fc:	2900      	cmp	r1, #0
 80056fe:	b096      	sub	sp, #88	; 0x58
 8005700:	4615      	mov	r5, r2
 8005702:	461e      	mov	r6, r3
 8005704:	da0d      	bge.n	8005722 <__swhatbuf_r+0x2e>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f013 0f80 	tst.w	r3, #128	; 0x80
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	bf0c      	ite	eq
 8005712:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005716:	2340      	movne	r3, #64	; 0x40
 8005718:	2000      	movs	r0, #0
 800571a:	6031      	str	r1, [r6, #0]
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	b016      	add	sp, #88	; 0x58
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	466a      	mov	r2, sp
 8005724:	f000 f862 	bl	80057ec <_fstat_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	dbec      	blt.n	8005706 <__swhatbuf_r+0x12>
 800572c:	9901      	ldr	r1, [sp, #4]
 800572e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005732:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005736:	4259      	negs	r1, r3
 8005738:	4159      	adcs	r1, r3
 800573a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573e:	e7eb      	b.n	8005718 <__swhatbuf_r+0x24>

08005740 <__smakebuf_r>:
 8005740:	898b      	ldrh	r3, [r1, #12]
 8005742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005744:	079d      	lsls	r5, r3, #30
 8005746:	4606      	mov	r6, r0
 8005748:	460c      	mov	r4, r1
 800574a:	d507      	bpl.n	800575c <__smakebuf_r+0x1c>
 800574c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	6123      	str	r3, [r4, #16]
 8005754:	2301      	movs	r3, #1
 8005756:	6163      	str	r3, [r4, #20]
 8005758:	b002      	add	sp, #8
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	ab01      	add	r3, sp, #4
 800575e:	466a      	mov	r2, sp
 8005760:	f7ff ffc8 	bl	80056f4 <__swhatbuf_r>
 8005764:	9900      	ldr	r1, [sp, #0]
 8005766:	4605      	mov	r5, r0
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff fa5d 	bl	8004c28 <_malloc_r>
 800576e:	b948      	cbnz	r0, 8005784 <__smakebuf_r+0x44>
 8005770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005774:	059a      	lsls	r2, r3, #22
 8005776:	d4ef      	bmi.n	8005758 <__smakebuf_r+0x18>
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	e7e3      	b.n	800574c <__smakebuf_r+0xc>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	6020      	str	r0, [r4, #0]
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	6163      	str	r3, [r4, #20]
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	6120      	str	r0, [r4, #16]
 8005796:	b15b      	cbz	r3, 80057b0 <__smakebuf_r+0x70>
 8005798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579c:	4630      	mov	r0, r6
 800579e:	f000 f837 	bl	8005810 <_isatty_r>
 80057a2:	b128      	cbz	r0, 80057b0 <__smakebuf_r+0x70>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	431d      	orrs	r5, r3
 80057b4:	81a5      	strh	r5, [r4, #12]
 80057b6:	e7cf      	b.n	8005758 <__smakebuf_r+0x18>

080057b8 <memmove>:
 80057b8:	4288      	cmp	r0, r1
 80057ba:	b510      	push	{r4, lr}
 80057bc:	eb01 0402 	add.w	r4, r1, r2
 80057c0:	d902      	bls.n	80057c8 <memmove+0x10>
 80057c2:	4284      	cmp	r4, r0
 80057c4:	4623      	mov	r3, r4
 80057c6:	d807      	bhi.n	80057d8 <memmove+0x20>
 80057c8:	1e43      	subs	r3, r0, #1
 80057ca:	42a1      	cmp	r1, r4
 80057cc:	d008      	beq.n	80057e0 <memmove+0x28>
 80057ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057d6:	e7f8      	b.n	80057ca <memmove+0x12>
 80057d8:	4402      	add	r2, r0
 80057da:	4601      	mov	r1, r0
 80057dc:	428a      	cmp	r2, r1
 80057de:	d100      	bne.n	80057e2 <memmove+0x2a>
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ea:	e7f7      	b.n	80057dc <memmove+0x24>

080057ec <_fstat_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d07      	ldr	r5, [pc, #28]	; (800580c <_fstat_r+0x20>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	f7fb fc6e 	bl	80010da <_fstat>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d102      	bne.n	8005808 <_fstat_r+0x1c>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	b103      	cbz	r3, 8005808 <_fstat_r+0x1c>
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	bd38      	pop	{r3, r4, r5, pc}
 800580a:	bf00      	nop
 800580c:	2000021c 	.word	0x2000021c

08005810 <_isatty_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d06      	ldr	r5, [pc, #24]	; (800582c <_isatty_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fb fc6d 	bl	80010fa <_isatty>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_isatty_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_isatty_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	2000021c 	.word	0x2000021c

08005830 <_sbrk_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	; (800584c <_sbrk_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fb fc76 	bl	800112c <_sbrk>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_sbrk_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_sbrk_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	2000021c 	.word	0x2000021c

08005850 <memcpy>:
 8005850:	440a      	add	r2, r1
 8005852:	4291      	cmp	r1, r2
 8005854:	f100 33ff 	add.w	r3, r0, #4294967295
 8005858:	d100      	bne.n	800585c <memcpy+0xc>
 800585a:	4770      	bx	lr
 800585c:	b510      	push	{r4, lr}
 800585e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005866:	4291      	cmp	r1, r2
 8005868:	d1f9      	bne.n	800585e <memcpy+0xe>
 800586a:	bd10      	pop	{r4, pc}

0800586c <_realloc_r>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	4680      	mov	r8, r0
 8005872:	4614      	mov	r4, r2
 8005874:	460e      	mov	r6, r1
 8005876:	b921      	cbnz	r1, 8005882 <_realloc_r+0x16>
 8005878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587c:	4611      	mov	r1, r2
 800587e:	f7ff b9d3 	b.w	8004c28 <_malloc_r>
 8005882:	b92a      	cbnz	r2, 8005890 <_realloc_r+0x24>
 8005884:	f7ff f964 	bl	8004b50 <_free_r>
 8005888:	4625      	mov	r5, r4
 800588a:	4628      	mov	r0, r5
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	f000 f81b 	bl	80058ca <_malloc_usable_size_r>
 8005894:	4284      	cmp	r4, r0
 8005896:	4607      	mov	r7, r0
 8005898:	d802      	bhi.n	80058a0 <_realloc_r+0x34>
 800589a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800589e:	d812      	bhi.n	80058c6 <_realloc_r+0x5a>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff f9c0 	bl	8004c28 <_malloc_r>
 80058a8:	4605      	mov	r5, r0
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0ed      	beq.n	800588a <_realloc_r+0x1e>
 80058ae:	42bc      	cmp	r4, r7
 80058b0:	4622      	mov	r2, r4
 80058b2:	4631      	mov	r1, r6
 80058b4:	bf28      	it	cs
 80058b6:	463a      	movcs	r2, r7
 80058b8:	f7ff ffca 	bl	8005850 <memcpy>
 80058bc:	4631      	mov	r1, r6
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff f946 	bl	8004b50 <_free_r>
 80058c4:	e7e1      	b.n	800588a <_realloc_r+0x1e>
 80058c6:	4635      	mov	r5, r6
 80058c8:	e7df      	b.n	800588a <_realloc_r+0x1e>

080058ca <_malloc_usable_size_r>:
 80058ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ce:	1f18      	subs	r0, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bfbc      	itt	lt
 80058d4:	580b      	ldrlt	r3, [r1, r0]
 80058d6:	18c0      	addlt	r0, r0, r3
 80058d8:	4770      	bx	lr
	...

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
