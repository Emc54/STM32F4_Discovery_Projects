
Thermo13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ffc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005208  08005208  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005210  08005210  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001c4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000081b0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018d8  00000000  00000000  0002828b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000820  00000000  00000000  00029b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000062e  00000000  00000000  0002a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020f49  00000000  00000000  0002a9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a975  00000000  00000000  0004b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c44fa  00000000  00000000  00056274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000029bc  00000000  00000000  0011a770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0011d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005174 	.word	0x08005174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005174 	.word	0x08005174

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000578:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d013      	beq.n	80005ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800058c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00b      	beq.n	80005ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	e000      	b.n	8000598 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000596:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f9      	beq.n	8000596 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)

{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x26>

    { ITM_SendChar(*ptr++); }
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffc9 	bl	800056c <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x12>

     return len;
 80005e8:	687b      	ldr	r3, [r7, #4]

}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	b0a1      	sub	sp, #132	; 0x84
 80005f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 faaf 	bl	8000b5c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f835 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8cb 	bl	800079c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f000 f89b 	bl	8000740 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, 5, HAL_MAX_DELAY);
 800060a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2305      	movs	r3, #5
 8000616:	2190      	movs	r1, #144	; 0x90
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0x70>)
 800061a:	f000 ff57 	bl	80014cc <HAL_I2C_Master_Receive>
	  sprintf(log, "I2C Slave Data: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x,\r\n", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 800061e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000622:	461d      	mov	r5, r3
 8000624:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000628:	461e      	mov	r6, r3
 800062a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800062e:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000632:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8000636:	f897 006d 	ldrb.w	r0, [r7, #109]	; 0x6d
 800063a:	4604      	mov	r4, r0
 800063c:	1d38      	adds	r0, r7, #4
 800063e:	9403      	str	r4, [sp, #12]
 8000640:	9102      	str	r1, [sp, #8]
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4633      	mov	r3, r6
 8000648:	462a      	mov	r2, r5
 800064a:	4907      	ldr	r1, [pc, #28]	; (8000668 <main+0x74>)
 800064c:	f003 fd58 	bl	8004100 <siprintf>
	  printf(log);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fd42 	bl	80040dc <iprintf>
	  HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 faf0 	bl	8000c40 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, 5, HAL_MAX_DELAY);
 8000660:	e7d3      	b.n	800060a <main+0x16>
 8000662:	bf00      	nop
 8000664:	20000084 	.word	0x20000084
 8000668:	0800518c 	.word	0x0800518c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fda3 	bl	80041c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ffbe 	bl	8003674 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f8a5 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fa1f 	bl	8003b64 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800072c:	f000 f88e 	bl	800084c <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f000 fd61 	bl	8001244 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f860 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_GPIO_Init+0xa8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_GPIO_Init+0xa8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <MX_GPIO_Init+0xa8>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_GPIO_Init+0xa8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000822:	2304      	movs	r3, #4
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xac>)
 8000836:	f000 fb69 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fac6 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <HAL_I2C_MspInit+0xa4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d13c      	bne.n	8000944 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = Thermo13_SDA_Pin|Thermo13_SCL_Pin;
 80008e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	2312      	movs	r3, #18
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f8:	2304      	movs	r3, #4
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4814      	ldr	r0, [pc, #80]	; (8000954 <HAL_I2C_MspInit+0xac>)
 8000904:	f000 fb02 	bl	8000f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 8000912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_I2C_MspInit+0xa8>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	201f      	movs	r0, #31
 800092a:	f000 fa88 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800092e:	201f      	movs	r0, #31
 8000930:	f000 faa1 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2020      	movs	r0, #32
 800093a:	f000 fa80 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800093e:	2020      	movs	r0, #32
 8000940:	f000 fa99 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f92c 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <I2C1_EV_IRQHandler+0x10>)
 80009b2:	f000 ffb1 	bl	8001918 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000084 	.word	0x20000084

080009c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <I2C1_ER_IRQHandler+0x10>)
 80009c6:	f001 f8fa 	bl	8001bbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000084 	.word	0x20000084

080009d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e00a      	b.n	80009fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e6:	f3af 8000 	nop.w
 80009ea:	4601      	mov	r1, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf0      	blt.n	80009e6 <_read+0x12>
  }

  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f003 fbdc 	bl	8004264 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20020000 	.word	0x20020000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	20000230 	.word	0x20000230

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fb9b 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fd5b 	bl	80005f4 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b4c:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 8000b50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b54:	2000022c 	.word	0x2000022c

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f94f 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe62 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f967 	bl	8000e92 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f92f 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200000dc 	.word	0x200000dc

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000dc 	.word	0x200000dc

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriorityGrouping>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00c      	b.n	8000ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2205      	movs	r2, #5
 8000ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e16b      	b.n	8001200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 815a 	bne.w	80011fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80b4 	beq.w	80011fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b60      	ldr	r3, [pc, #384]	; (8001218 <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_GPIO_Init+0x30c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a5b      	ldr	r2, [pc, #364]	; (800121c <HAL_GPIO_Init+0x310>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x324>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x328>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x32c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x330>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x20a>
 8001112:	2307      	movs	r3, #7
 8001114:	e00e      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001116:	2308      	movs	r3, #8
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111a:	2306      	movs	r3, #6
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x310>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <HAL_GPIO_Init+0x334>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_GPIO_Init+0x334>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae90 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e12b      	b.n	80014ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fb1c 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012a8:	f002 fe54 	bl	8003f54 <HAL_RCC_GetPCLK1Freq>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a81      	ldr	r2, [pc, #516]	; (80014b8 <HAL_I2C_Init+0x274>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d807      	bhi.n	80012c8 <HAL_I2C_Init+0x84>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a80      	ldr	r2, [pc, #512]	; (80014bc <HAL_I2C_Init+0x278>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	bf94      	ite	ls
 80012c0:	2301      	movls	r3, #1
 80012c2:	2300      	movhi	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	e006      	b.n	80012d6 <HAL_I2C_Init+0x92>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a7d      	ldr	r2, [pc, #500]	; (80014c0 <HAL_I2C_Init+0x27c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	bf94      	ite	ls
 80012d0:	2301      	movls	r3, #1
 80012d2:	2300      	movhi	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e0e7      	b.n	80014ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4a78      	ldr	r2, [pc, #480]	; (80014c4 <HAL_I2C_Init+0x280>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9b      	lsrs	r3, r3, #18
 80012e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a6a      	ldr	r2, [pc, #424]	; (80014b8 <HAL_I2C_Init+0x274>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d802      	bhi.n	8001318 <HAL_I2C_Init+0xd4>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3301      	adds	r3, #1
 8001316:	e009      	b.n	800132c <HAL_I2C_Init+0xe8>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <HAL_I2C_Init+0x284>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	3301      	adds	r3, #1
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	430b      	orrs	r3, r1
 8001332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800133e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	495c      	ldr	r1, [pc, #368]	; (80014b8 <HAL_I2C_Init+0x274>)
 8001348:	428b      	cmp	r3, r1
 800134a:	d819      	bhi.n	8001380 <HAL_I2C_Init+0x13c>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fbb1 f3f3 	udiv	r3, r1, r3
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001360:	400b      	ands	r3, r1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00a      	beq.n	800137c <HAL_I2C_Init+0x138>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1e59      	subs	r1, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fbb1 f3f3 	udiv	r3, r1, r3
 8001374:	3301      	adds	r3, #1
 8001376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137a:	e051      	b.n	8001420 <HAL_I2C_Init+0x1dc>
 800137c:	2304      	movs	r3, #4
 800137e:	e04f      	b.n	8001420 <HAL_I2C_Init+0x1dc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <HAL_I2C_Init+0x168>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	e012      	b.n	80013d2 <HAL_I2C_Init+0x18e>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e58      	subs	r0, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	0099      	lsls	r1, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Init+0x196>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e022      	b.n	8001420 <HAL_I2C_Init+0x1dc>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10e      	bne.n	8001400 <HAL_I2C_Init+0x1bc>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1e58      	subs	r0, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6859      	ldr	r1, [r3, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	440b      	add	r3, r1
 80013f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fe:	e00f      	b.n	8001420 <HAL_I2C_Init+0x1dc>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e58      	subs	r0, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	0099      	lsls	r1, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	fbb0 f3f3 	udiv	r3, r0, r3
 8001416:	3301      	adds	r3, #1
 8001418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	6809      	ldr	r1, [r1, #0]
 8001424:	4313      	orrs	r3, r2
 8001426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800144e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6911      	ldr	r1, [r2, #16]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68d2      	ldr	r2, [r2, #12]
 800145a:	4311      	orrs	r1, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	430b      	orrs	r3, r1
 8001462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2220      	movs	r2, #32
 800149a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	000186a0 	.word	0x000186a0
 80014bc:	001e847f 	.word	0x001e847f
 80014c0:	003d08ff 	.word	0x003d08ff
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	10624dd3 	.word	0x10624dd3

080014cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	817b      	strh	r3, [r7, #10]
 80014dc:	4613      	mov	r3, r2
 80014de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff fba2 	bl	8000c28 <HAL_GetTick>
 80014e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	f040 820b 	bne.w	800190a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2319      	movs	r3, #25
 80014fa:	2201      	movs	r2, #1
 80014fc:	497c      	ldr	r1, [pc, #496]	; (80016f0 <HAL_I2C_Master_Receive+0x224>)
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f001 ff3e 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
 800150c:	e1fe      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_I2C_Master_Receive+0x50>
 8001518:	2302      	movs	r3, #2
 800151a:	e1f7      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d007      	beq.n	8001542 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001550:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2222      	movs	r2, #34	; 0x22
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2210      	movs	r2, #16
 800155e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_I2C_Master_Receive+0x228>)
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001584:	8979      	ldrh	r1, [r7, #10]
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f001 fd82 	bl	8003094 <I2C_MasterRequestRead>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1b8      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d113      	bne.n	80015ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e18c      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d11b      	bne.n	800160a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e16c      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	2b02      	cmp	r3, #2
 8001610:	d11b      	bne.n	800164a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001620:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	e14c      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001670:	e138      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	2b03      	cmp	r3, #3
 8001678:	f200 80f1 	bhi.w	800185e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	2b01      	cmp	r3, #1
 8001682:	d123      	bne.n	80016cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f001 ff81 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e139      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016ca:	e10b      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d14e      	bne.n	8001772 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	2200      	movs	r2, #0
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <HAL_I2C_Master_Receive+0x22c>)
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f001 fe4e 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e10e      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
 80016ee:	bf00      	nop
 80016f0:	00100002 	.word	0x00100002
 80016f4:	ffff0000 	.word	0xffff0000
 80016f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800170a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001770:	e0b8      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	2200      	movs	r2, #0
 800177a:	4966      	ldr	r1, [pc, #408]	; (8001914 <HAL_I2C_Master_Receive+0x448>)
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f001 fdff 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0bf      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d4:	2200      	movs	r2, #0
 80017d6:	494f      	ldr	r1, [pc, #316]	; (8001914 <HAL_I2C_Master_Receive+0x448>)
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f001 fdd1 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e091      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800185c:	e042      	b.n	80018e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f001 fe94 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e04c      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d118      	bne.n	80018e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f47f aec2 	bne.w	8001672 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	00010004 	.word	0x00010004

08001918 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001938:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001940:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b10      	cmp	r3, #16
 8001946:	d003      	beq.n	8001950 <HAL_I2C_EV_IRQHandler+0x38>
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	f040 80b1 	bne.w	8001ab2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_I2C_EV_IRQHandler+0x6e>
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001970:	d003      	beq.n	800197a <HAL_I2C_EV_IRQHandler+0x62>
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001978:	d101      	bne.n	800197e <HAL_I2C_EV_IRQHandler+0x66>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_I2C_EV_IRQHandler+0x68>
 800197e:	2300      	movs	r3, #0
 8001980:	2b01      	cmp	r3, #1
 8001982:	f000 8114 	beq.w	8001bae <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x90>
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 fe4e 	bl	800363c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fd5e 	bl	8002462 <I2C_Master_SB>
 80019a6:	e083      	b.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0xac>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fdd6 	bl	800256e <I2C_Master_ADD10>
 80019c2:	e075      	b.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_I2C_EV_IRQHandler+0xc8>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fdf2 	bl	80025c2 <I2C_Master_ADDR>
 80019de:	e067      	b.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d036      	beq.n	8001a58 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f8:	f000 80db 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9d6 	bl	8001dcc <I2C_MasterTransmit_TXE>
 8001a20:	e046      	b.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80c2 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80bc 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	2b21      	cmp	r3, #33	; 0x21
 8001a3e:	d103      	bne.n	8001a48 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fa5f 	bl	8001f04 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a46:	e0b4      	b.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	f040 80b1 	bne.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 facd 	bl	8001ff0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	e0ac      	b.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a66:	f000 80a4 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <HAL_I2C_EV_IRQHandler+0x178>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_EV_IRQHandler+0x178>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb45 	bl	8002118 <I2C_MasterReceive_RXNE>
 8001a8e:	e00f      	b.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 808b 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8085 	beq.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fbf0 	bl	800228e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aae:	e080      	b.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001ab0:	e07f      	b.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e007      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00c      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001af8:	69b9      	ldr	r1, [r7, #24]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 ffb0 	bl	8002a60 <I2C_Slave_ADDR>
 8001b00:	e05a      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_I2C_EV_IRQHandler+0x206>
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 ffea 	bl	8002af0 <I2C_Slave_STOPF>
 8001b1c:	e04c      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b1e:	7bbb      	ldrb	r3, [r7, #14]
 8001b20:	2b21      	cmp	r3, #33	; 0x21
 8001b22:	d002      	beq.n	8001b2a <HAL_I2C_EV_IRQHandler+0x212>
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	2b29      	cmp	r3, #41	; 0x29
 8001b28:	d120      	bne.n	8001b6c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x238>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x238>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fecb 	bl	80028e4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b4e:	e032      	b.n	8001bb6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d02d      	beq.n	8001bb6 <HAL_I2C_EV_IRQHandler+0x29e>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d028      	beq.n	8001bb6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fefa 	bl	800295e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b6a:	e024      	b.n	8001bb6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 ff08 	bl	80029a0 <I2C_SlaveReceive_RXNE>
 8001b90:	e012      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 ff38 	bl	8002a1c <I2C_SlaveReceive_BTF>
 8001bac:	e004      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001bae:	bf00      	nop
 8001bb0:	e002      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b08a      	sub	sp, #40	; 0x28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001be0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00d      	beq.n	8001c08 <HAL_I2C_ER_IRQHandler+0x4a>
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c06:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00d      	beq.n	8001c2e <HAL_I2C_ER_IRQHandler+0x70>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001c2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03e      	beq.n	8001cb6 <HAL_I2C_ER_IRQHandler+0xf8>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d039      	beq.n	8001cb6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001c42:	7efb      	ldrb	r3, [r7, #27]
 8001c44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001c5c:	7ebb      	ldrb	r3, [r7, #26]
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d112      	bne.n	8001c88 <HAL_I2C_ER_IRQHandler+0xca>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <HAL_I2C_ER_IRQHandler+0xca>
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	2b21      	cmp	r3, #33	; 0x21
 8001c6c:	d008      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	2b29      	cmp	r3, #41	; 0x29
 8001c72:	d005      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0xc2>
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b28      	cmp	r3, #40	; 0x28
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b21      	cmp	r3, #33	; 0x21
 8001c7e:	d103      	bne.n	8001c88 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 f865 	bl	8002d50 <I2C_Slave_AF>
 8001c86:	e016      	b.n	8001cb6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c9a:	7efb      	ldrb	r3, [r7, #27]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d002      	beq.n	8001ca6 <HAL_I2C_ER_IRQHandler+0xe8>
 8001ca0:	7efb      	ldrb	r3, [r7, #27]
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d107      	bne.n	8001cb6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <HAL_I2C_ER_IRQHandler+0x11e>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001cda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f001 f89e 	bl	8002e30 <I2C_ITError>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d150      	bne.n	8001e94 <I2C_MasterTransmit_TXE+0xc8>
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b21      	cmp	r3, #33	; 0x21
 8001df6:	d14d      	bne.n	8001e94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d01d      	beq.n	8001e3a <I2C_MasterTransmit_TXE+0x6e>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d01a      	beq.n	8001e3a <I2C_MasterTransmit_TXE+0x6e>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e0a:	d016      	beq.n	8001e3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2211      	movs	r2, #17
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff62 	bl	8001cfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e38:	e060      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d107      	bne.n	8001e84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff7d 	bl	8001d7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e82:	e03b      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff35 	bl	8001cfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e92:	e033      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b21      	cmp	r3, #33	; 0x21
 8001e98:	d005      	beq.n	8001ea6 <I2C_MasterTransmit_TXE+0xda>
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d12d      	bne.n	8001efc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b22      	cmp	r3, #34	; 0x22
 8001ea4:	d12a      	bne.n	8001efc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ec0:	e01c      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d103      	bne.n	8001ed6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f88e 	bl	8001ff0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001ed4:	e012      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001efa:	e7ff      	b.n	8001efc <I2C_MasterTransmit_TXE+0x130>
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b21      	cmp	r3, #33	; 0x21
 8001f1c:	d164      	bne.n	8001fe8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001f4c:	e04c      	b.n	8001fe8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d01d      	beq.n	8001f90 <I2C_MasterTransmit_BTF+0x8c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d01a      	beq.n	8001f90 <I2C_MasterTransmit_BTF+0x8c>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f60:	d016      	beq.n	8001f90 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f70:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2211      	movs	r2, #17
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff feb7 	bl	8001cfc <HAL_I2C_MasterTxCpltCallback>
}
 8001f8e:	e02b      	b.n	8001fe8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f9e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d107      	bne.n	8001fda <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fed2 	bl	8001d7c <HAL_I2C_MemTxCpltCallback>
}
 8001fd8:	e006      	b.n	8001fe8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fe8a 	bl	8001cfc <HAL_I2C_MasterTxCpltCallback>
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11d      	bne.n	8002044 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10b      	bne.n	8002028 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002026:	e073      	b.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	b29b      	uxth	r3, r3
 800202e:	121b      	asrs	r3, r3, #8
 8002030:	b2da      	uxtb	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002042:	e065      	b.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10b      	bne.n	8002064 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002062:	e055      	b.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002068:	2b02      	cmp	r3, #2
 800206a:	d151      	bne.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b22      	cmp	r3, #34	; 0x22
 8002070:	d10d      	bne.n	800208e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002080:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800208c:	e040      	b.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b21      	cmp	r3, #33	; 0x21
 800209c:	d112      	bne.n	80020c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020c2:	e025      	b.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d120      	bne.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b21      	cmp	r3, #33	; 0x21
 80020d2:	d11d      	bne.n	8002110 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe36 	bl	8001d7c <HAL_I2C_MemTxCpltCallback>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b22      	cmp	r3, #34	; 0x22
 800212a:	f040 80ac 	bne.w	8002286 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d921      	bls.n	8002180 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b03      	cmp	r3, #3
 800216a:	f040 808c 	bne.w	8002286 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800217e:	e082      	b.n	8002286 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b02      	cmp	r3, #2
 8002186:	d075      	beq.n	8002274 <I2C_MasterReceive_RXNE+0x15c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d002      	beq.n	8002194 <I2C_MasterReceive_RXNE+0x7c>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d16f      	bne.n	8002274 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f001 f9c9 	bl	800352c <I2C_WaitOnSTOPRequestThroughIT>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d142      	bne.n	8002226 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d10a      	bne.n	8002210 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fdc1 	bl	8001d90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800220e:	e03a      	b.n	8002286 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2212      	movs	r2, #18
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fd76 	bl	8001d10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002224:	e02f      	b.n	8002286 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002234:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fd99 	bl	8001da4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002272:	e008      	b.n	8002286 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002282:	605a      	str	r2, [r3, #4]
}
 8002284:	e7ff      	b.n	8002286 <I2C_MasterReceive_RXNE+0x16e>
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d11b      	bne.n	80022de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80022dc:	e0bd      	b.n	800245a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d129      	bne.n	800233c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00a      	beq.n	8002314 <I2C_MasterReceive_BTF+0x86>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d007      	beq.n	8002314 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800233a:	e08e      	b.n	800245a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d176      	bne.n	8002434 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d002      	beq.n	8002352 <I2C_MasterReceive_BTF+0xc4>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d108      	bne.n	8002364 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e019      	b.n	8002398 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <I2C_MasterReceive_BTF+0xe2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d108      	bne.n	8002382 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e00a      	b.n	8002398 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b10      	cmp	r3, #16
 8002386:	d007      	beq.n	8002398 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d10a      	bne.n	800241e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fcba 	bl	8001d90 <HAL_I2C_MemRxCpltCallback>
}
 800241c:	e01d      	b.n	800245a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2212      	movs	r2, #18
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fc6f 	bl	8001d10 <HAL_I2C_MasterRxCpltCallback>
}
 8002432:	e012      	b.n	800245a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d117      	bne.n	80024a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800248e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002490:	e067      	b.n	8002562 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]
}
 80024a4:	e05d      	b.n	8002562 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ae:	d133      	bne.n	8002518 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b21      	cmp	r3, #33	; 0x21
 80024ba:	d109      	bne.n	80024d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024cc:	611a      	str	r2, [r3, #16]
 80024ce:	e008      	b.n	80024e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <I2C_Master_SB+0x92>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d108      	bne.n	8002506 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d032      	beq.n	8002562 <I2C_Master_SB+0x100>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02d      	beq.n	8002562 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002514:	605a      	str	r2, [r3, #4]
}
 8002516:	e024      	b.n	8002562 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10e      	bne.n	800253e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	b29b      	uxth	r3, r3
 8002526:	11db      	asrs	r3, r3, #7
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f003 0306 	and.w	r3, r3, #6
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f063 030f 	orn	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]
}
 800253c:	e011      	b.n	8002562 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10d      	bne.n	8002562 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	b29b      	uxth	r3, r3
 800254c:	11db      	asrs	r3, r3, #7
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f003 0306 	and.w	r3, r3, #6
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f063 030e 	orn	r3, r3, #14
 800255a:	b2da      	uxtb	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	b2da      	uxtb	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <I2C_Master_ADD10+0x26>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <I2C_Master_ADD10+0x48>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b4:	605a      	str	r2, [r3, #4]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b091      	sub	sp, #68	; 0x44
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b22      	cmp	r3, #34	; 0x22
 80025ea:	f040 8169 	bne.w	80028c0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <I2C_Master_ADDR+0x54>
 80025f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d10b      	bne.n	8002616 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	e160      	b.n	80028d8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <I2C_Master_ADDR+0x98>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002626:	d118      	bne.n	800265a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	651a      	str	r2, [r3, #80]	; 0x50
 8002658:	e13e      	b.n	80028d8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002664:	2300      	movs	r3, #0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e115      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	f040 808a 	bne.w	80027ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800269e:	d137      	bne.n	8002710 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026be:	d113      	bne.n	80026e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	e0e7      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e0d3      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	2b08      	cmp	r3, #8
 8002714:	d02e      	beq.n	8002774 <I2C_Master_ADDR+0x1b2>
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2b20      	cmp	r3, #32
 800271a:	d02b      	beq.n	8002774 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	2b12      	cmp	r3, #18
 8002720:	d102      	bne.n	8002728 <I2C_Master_ADDR+0x166>
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	2b01      	cmp	r3, #1
 8002726:	d125      	bne.n	8002774 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	2b04      	cmp	r3, #4
 800272c:	d00e      	beq.n	800274c <I2C_Master_ADDR+0x18a>
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2b02      	cmp	r3, #2
 8002732:	d00b      	beq.n	800274c <I2C_Master_ADDR+0x18a>
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	2b10      	cmp	r3, #16
 8002738:	d008      	beq.n	800274c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	e0a1      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e085      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d14d      	bne.n	8002852 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d016      	beq.n	80027ea <I2C_Master_ADDR+0x228>
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d013      	beq.n	80027ea <I2C_Master_ADDR+0x228>
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d010      	beq.n	80027ea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e007      	b.n	80027fa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002808:	d117      	bne.n	800283a <I2C_Master_ADDR+0x278>
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002810:	d00b      	beq.n	800282a <I2C_Master_ADDR+0x268>
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b01      	cmp	r3, #1
 8002816:	d008      	beq.n	800282a <I2C_Master_ADDR+0x268>
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	2b08      	cmp	r3, #8
 800281c:	d005      	beq.n	800282a <I2C_Master_ADDR+0x268>
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	2b10      	cmp	r3, #16
 8002822:	d002      	beq.n	800282a <I2C_Master_ADDR+0x268>
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	2b20      	cmp	r3, #32
 8002828:	d107      	bne.n	800283a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002838:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	e032      	b.n	80028b8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002860:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002870:	d117      	bne.n	80028a2 <I2C_Master_ADDR+0x2e0>
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002878:	d00b      	beq.n	8002892 <I2C_Master_ADDR+0x2d0>
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	2b01      	cmp	r3, #1
 800287e:	d008      	beq.n	8002892 <I2C_Master_ADDR+0x2d0>
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	2b08      	cmp	r3, #8
 8002884:	d005      	beq.n	8002892 <I2C_Master_ADDR+0x2d0>
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b10      	cmp	r3, #16
 800288a:	d002      	beq.n	8002892 <I2C_Master_ADDR+0x2d0>
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	2b20      	cmp	r3, #32
 8002890:	d107      	bne.n	80028a2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80028be:	e00b      	b.n	80028d8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	e7ff      	b.n	80028d8 <I2C_Master_ADDR+0x316>
 80028d8:	bf00      	nop
 80028da:	3744      	adds	r7, #68	; 0x44
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d02b      	beq.n	8002956 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d114      	bne.n	8002956 <I2C_SlaveTransmit_TXE+0x72>
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b29      	cmp	r3, #41	; 0x29
 8002930:	d111      	bne.n	8002956 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002940:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2228      	movs	r2, #40	; 0x28
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff f9e7 	bl	8001d24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d02c      	beq.n	8002a14 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <I2C_SlaveReceive_RXNE+0x74>
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b2a      	cmp	r3, #42	; 0x2a
 80029ee:	d111      	bne.n	8002a14 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2222      	movs	r2, #34	; 0x22
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2228      	movs	r2, #40	; 0x28
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff f992 	bl	8001d38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a7a:	2b28      	cmp	r3, #40	; 0x28
 8002a7c:	d125      	bne.n	8002aca <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	81bb      	strh	r3, [r7, #12]
 8002aac:	e002      	b.n	8002ab4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002abc:	89ba      	ldrh	r2, [r7, #12]
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff f942 	bl	8001d4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ac8:	e00e      	b.n	8002ae8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	d172      	bne.n	8002c34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b22      	cmp	r3, #34	; 0x22
 8002b52:	d002      	beq.n	8002b5a <I2C_Slave_STOPF+0x6a>
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b2a      	cmp	r3, #42	; 0x2a
 8002b58:	d135      	bne.n	8002bc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0204 	orr.w	r2, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f9ab 	bl	8000eee <HAL_DMA_GetState>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d049      	beq.n	8002c32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <I2C_Slave_STOPF+0x258>)
 8002ba4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe f97d 	bl	8000eaa <HAL_DMA_Abort_IT>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03d      	beq.n	8002c32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bc4:	e035      	b.n	8002c32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f975 	bl	8000eee <HAL_DMA_GetState>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d014      	beq.n	8002c34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <I2C_Slave_STOPF+0x258>)
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f947 	bl	8000eaa <HAL_DMA_Abort_IT>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4798      	blx	r3
 8002c30:	e000      	b.n	8002c34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03e      	beq.n	8002cbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d112      	bne.n	8002c72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d112      	bne.n	8002ca6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8b3 	bl	8002e30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002cca:	e039      	b.n	8002d40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd0:	d109      	bne.n	8002ce6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2228      	movs	r2, #40	; 0x28
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff f829 	bl	8001d38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b28      	cmp	r3, #40	; 0x28
 8002cf0:	d111      	bne.n	8002d16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <I2C_Slave_STOPF+0x25c>)
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff f82a 	bl	8001d68 <HAL_I2C_ListenCpltCallback>
}
 8002d14:	e014      	b.n	8002d40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	2b22      	cmp	r3, #34	; 0x22
 8002d1c:	d002      	beq.n	8002d24 <I2C_Slave_STOPF+0x234>
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b22      	cmp	r3, #34	; 0x22
 8002d22:	d10d      	bne.n	8002d40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fffc 	bl	8001d38 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08003231 	.word	0x08003231
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d002      	beq.n	8002d72 <I2C_Slave_AF+0x22>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d129      	bne.n	8002dc6 <I2C_Slave_AF+0x76>
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b28      	cmp	r3, #40	; 0x28
 8002d76:	d126      	bne.n	8002dc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <I2C_Slave_AF+0xdc>)
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe ffd2 	bl	8001d68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002dc4:	e02e      	b.n	8002e24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b21      	cmp	r3, #33	; 0x21
 8002dca:	d126      	bne.n	8002e1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <I2C_Slave_AF+0xdc>)
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2221      	movs	r2, #33	; 0x21
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002df6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe ff86 	bl	8001d24 <HAL_I2C_SlaveTxCpltCallback>
}
 8002e18:	e004      	b.n	8002e24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e22:	615a      	str	r2, [r3, #20]
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	ffff0000 	.word	0xffff0000

08002e30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e48:	7bbb      	ldrb	r3, [r7, #14]
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d002      	beq.n	8002e54 <I2C_ITError+0x24>
 8002e4e:	7bbb      	ldrb	r3, [r7, #14]
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d10a      	bne.n	8002e6a <I2C_ITError+0x3a>
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b22      	cmp	r3, #34	; 0x22
 8002e58:	d107      	bne.n	8002e6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e70:	2b28      	cmp	r3, #40	; 0x28
 8002e72:	d107      	bne.n	8002e84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2228      	movs	r2, #40	; 0x28
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e82:	e015      	b.n	8002eb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e92:	d00a      	beq.n	8002eaa <I2C_ITError+0x7a>
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b60      	cmp	r3, #96	; 0x60
 8002e98:	d007      	beq.n	8002eaa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ebe:	d162      	bne.n	8002f86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ece:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d020      	beq.n	8002f20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	4a6a      	ldr	r2, [pc, #424]	; (800308c <I2C_ITError+0x25c>)
 8002ee4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd ffdd 	bl	8000eaa <HAL_DMA_Abort_IT>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8089 	beq.w	800300a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4798      	blx	r3
 8002f1e:	e074      	b.n	800300a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	4a59      	ldr	r2, [pc, #356]	; (800308c <I2C_ITError+0x25c>)
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd ffbc 	bl	8000eaa <HAL_DMA_Abort_IT>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d068      	beq.n	800300a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10b      	bne.n	8002f5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f80:	4610      	mov	r0, r2
 8002f82:	4798      	blx	r3
 8002f84:	e041      	b.n	800300a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b60      	cmp	r3, #96	; 0x60
 8002f90:	d125      	bne.n	8002fde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d10b      	bne.n	8002fc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe feee 	bl	8001db8 <HAL_I2C_AbortCpltCallback>
 8002fdc:	e015      	b.n	800300a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d10b      	bne.n	8003004 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fe fecd 	bl	8001da4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d113      	bne.n	8003084 <I2C_ITError+0x254>
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b28      	cmp	r3, #40	; 0x28
 8003060:	d110      	bne.n	8003084 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <I2C_ITError+0x260>)
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fe72 	bl	8001d68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08003231 	.word	0x08003231
 8003090:	ffff0000 	.word	0xffff0000

08003094 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d006      	beq.n	80030ce <I2C_MasterRequestRead+0x3a>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d003      	beq.n	80030ce <I2C_MasterRequestRead+0x3a>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030cc:	d108      	bne.n	80030e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e00b      	b.n	80030f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b11      	cmp	r3, #17
 80030e6:	d107      	bne.n	80030f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f93b 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311e:	d103      	bne.n	8003128 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e079      	b.n	8003220 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003134:	d108      	bne.n	8003148 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]
 8003146:	e05f      	b.n	8003208 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003148:	897b      	ldrh	r3, [r7, #10]
 800314a:	11db      	asrs	r3, r3, #7
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 0306 	and.w	r3, r3, #6
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f063 030f 	orn	r3, r3, #15
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4930      	ldr	r1, [pc, #192]	; (8003228 <I2C_MasterRequestRead+0x194>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f961 	bl	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e054      	b.n	8003220 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4929      	ldr	r1, [pc, #164]	; (800322c <I2C_MasterRequestRead+0x198>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f951 	bl	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e044      	b.n	8003220 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f8d9 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e2:	d103      	bne.n	80031ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e017      	b.n	8003220 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031f0:	897b      	ldrh	r3, [r7, #10]
 80031f2:	11db      	asrs	r3, r3, #7
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0306 	and.w	r3, r3, #6
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f063 030e 	orn	r3, r3, #14
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4907      	ldr	r1, [pc, #28]	; (800322c <I2C_MasterRequestRead+0x198>)
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f90d 	bl	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	00010008 	.word	0x00010008
 800322c:	00010002 	.word	0x00010002

08003230 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800324a:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <I2C_DMAAbort+0x148>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	08db      	lsrs	r3, r3, #3
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <I2C_DMAAbort+0x14c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a1a      	lsrs	r2, r3, #8
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003276:	e00a      	b.n	800328e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d0ea      	beq.n	8003264 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2200      	movs	r2, #0
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	2200      	movs	r2, #0
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	2200      	movs	r2, #0
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2200      	movs	r2, #0
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d10e      	bne.n	800331e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7fe fd4e 	bl	8001db8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800331c:	e027      	b.n	800336e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003324:	2b28      	cmp	r3, #40	; 0x28
 8003326:	d117      	bne.n	8003358 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003346:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2228      	movs	r2, #40	; 0x28
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003356:	e007      	b.n	8003368 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003368:	6978      	ldr	r0, [r7, #20]
 800336a:	f7fe fd1b 	bl	8001da4 <HAL_I2C_ErrorCallback>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000
 800337c:	14f8b589 	.word	0x14f8b589

08003380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	e025      	b.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d021      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fd fc45 	bl	8000c28 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e023      	b.n	8003426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10d      	bne.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	e00c      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	429a      	cmp	r2, r3
 8003422:	d0b6      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343c:	e051      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344c:	d123      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e046      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d021      	beq.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fd fbc3 	bl	8000c28 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e020      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10c      	bne.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e00b      	b.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d18d      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	0a1a      	lsrs	r2, r3, #8
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e008      	b.n	800357c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d0e9      	beq.n	800354e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000000 	.word	0x20000000
 800358c:	14f8b589 	.word	0x14f8b589

08003590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800359c:	e042      	b.n	8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d119      	bne.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e029      	b.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fd fb22 	bl	8000c28 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d116      	bne.n	8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e007      	b.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d1b5      	bne.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800364c:	d103      	bne.n	8003656 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003654:	e007      	b.n	8003666 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800365e:	d102      	bne.n	8003666 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2208      	movs	r2, #8
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e267      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d075      	beq.n	800377e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d00c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d112      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036aa:	4b82      	ldr	r3, [pc, #520]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05b      	beq.n	800377c <HAL_RCC_OscConfig+0x108>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d157      	bne.n	800377c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e242      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x74>
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e01d      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x98>
 80036f2:	4b70      	ldr	r3, [pc, #448]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6f      	ldr	r2, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6c      	ldr	r2, [pc, #432]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 800370c:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fa7c 	bl	8000c28 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fd fa78 	bl	8000c28 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e207      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0xc0>
 8003752:	e014      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd fa68 	bl	8000c28 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375c:	f7fd fa64 	bl	8000c28 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e1f3      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0xe8>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d063      	beq.n	8003852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d11c      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e1c7      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037da:	e03a      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fa1d 	bl	8000c28 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fd fa19 	bl	8000c28 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e1a8      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd f9fc 	bl	8000c28 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003834:	f7fd f9f8 	bl	8000c28 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e187      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d036      	beq.n	80038cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd f9dc 	bl	8000c28 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003874:	f7fd f9d8 	bl	8000c28 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e167      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x200>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fd f9c5 	bl	8000c28 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	e00e      	b.n	80038c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fd f9c1 	bl	8000c28 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d907      	bls.n	80038c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e150      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	42470000 	.word	0x42470000
 80038bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ea      	bne.n	80038a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8097 	beq.w	8003a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a7c      	ldr	r2, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003916:	4b74      	ldr	r3, [pc, #464]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a73      	ldr	r2, [pc, #460]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fd f981 	bl	8000c28 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fd f97d 	bl	8000c28 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e10c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x2ea>
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e01c      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x30c>
 8003966:	4b5f      	ldr	r3, [pc, #380]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 8003980:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd f942 	bl	8000c28 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd f93e 	bl	8000c28 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0cb      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ee      	beq.n	80039a8 <HAL_RCC_OscConfig+0x334>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fd f92c 	bl	8000c28 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fd f928 	bl	8000c28 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0b5      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ee      	bne.n	80039d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a1 	beq.w	8003b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d05c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d141      	bne.n	8003aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd f8fc 	bl	8000c28 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd f8f8 	bl	8000c28 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e087      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd f8d1 	bl	8000c28 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd f8cd 	bl	8000c28 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e05c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x416>
 8003aa8:	e054      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd f8ba 	bl	8000c28 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd f8b6 	bl	8000c28 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e045      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x444>
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e038      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4ec>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d028      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cc      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90c      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d119      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e067      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4934      	ldr	r1, [pc, #208]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c54:	f7fc ffe8 	bl	8000c28 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7fc ffe4 	bl	8000c28 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e04f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d20c      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc ff48 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	080051bc 	.word	0x080051bc
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b094      	sub	sp, #80	; 0x50
 8003d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	2300      	movs	r3, #0
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d48:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d00d      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x40>
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	f200 80e1 	bhi.w	8003f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d62:	e0db      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d64:	4b73      	ldr	r3, [pc, #460]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d68:	e0db      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d6a:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d6e:	e0d8      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d70:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d063      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d86:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	f04f 0000 	mov.w	r0, #0
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db4:	0150      	lsls	r0, r2, #5
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4621      	mov	r1, r4
 8003dbc:	1a51      	subs	r1, r2, r1
 8003dbe:	6139      	str	r1, [r7, #16]
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	018b      	lsls	r3, r1, #6
 8003dd8:	4651      	mov	r1, sl
 8003dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dde:	4651      	mov	r1, sl
 8003de0:	018a      	lsls	r2, r1, #6
 8003de2:	4651      	mov	r1, sl
 8003de4:	ebb2 0801 	subs.w	r8, r2, r1
 8003de8:	4659      	mov	r1, fp
 8003dea:	eb63 0901 	sbc.w	r9, r3, r1
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e02:	4690      	mov	r8, r2
 8003e04:	4699      	mov	r9, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	eb18 0303 	adds.w	r3, r8, r3
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	462b      	mov	r3, r5
 8003e10:	eb49 0303 	adc.w	r3, r9, r3
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e22:	4629      	mov	r1, r5
 8003e24:	024b      	lsls	r3, r1, #9
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	024a      	lsls	r2, r1, #9
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e36:	2200      	movs	r2, #0
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e40:	f7fc fa16 	bl	8000270 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	e058      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	4611      	mov	r1, r2
 8003e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	2300      	movs	r3, #0
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	f04f 0000 	mov.w	r0, #0
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	0159      	lsls	r1, r3, #5
 8003e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7a:	0150      	lsls	r0, r2, #5
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4641      	mov	r1, r8
 8003e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	00eb      	lsls	r3, r5, #3
 8003eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb6:	00e2      	lsls	r2, r4, #3
 8003eb8:	4614      	mov	r4, r2
 8003eba:	461d      	mov	r5, r3
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	18e3      	adds	r3, r4, r3
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	eb45 0303 	adc.w	r3, r5, r3
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	028b      	lsls	r3, r1, #10
 8003eda:	4621      	mov	r1, r4
 8003edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	028a      	lsls	r2, r1, #10
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eea:	2200      	movs	r2, #0
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	61fa      	str	r2, [r7, #28]
 8003ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef4:	f7fc f9bc 	bl	8000270 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3750      	adds	r7, #80	; 0x50
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	007a1200 	.word	0x007a1200

08003f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000000 	.word	0x20000000

08003f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f58:	f7ff fff0 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0a9b      	lsrs	r3, r3, #10
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4903      	ldr	r1, [pc, #12]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	080051cc 	.word	0x080051cc

08003f7c <std>:
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	4604      	mov	r4, r0
 8003f82:	e9c0 3300 	strd	r3, r3, [r0]
 8003f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f8a:	6083      	str	r3, [r0, #8]
 8003f8c:	8181      	strh	r1, [r0, #12]
 8003f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f90:	81c2      	strh	r2, [r0, #14]
 8003f92:	6183      	str	r3, [r0, #24]
 8003f94:	4619      	mov	r1, r3
 8003f96:	2208      	movs	r2, #8
 8003f98:	305c      	adds	r0, #92	; 0x5c
 8003f9a:	f000 f914 	bl	80041c6 <memset>
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <std+0x38>)
 8003fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x3c>)
 8003fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x40>)
 8003fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <std+0x44>)
 8003fac:	6224      	str	r4, [r4, #32]
 8003fae:	6323      	str	r3, [r4, #48]	; 0x30
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08004141 	.word	0x08004141
 8003fb8:	08004163 	.word	0x08004163
 8003fbc:	0800419b 	.word	0x0800419b
 8003fc0:	080041bf 	.word	0x080041bf

08003fc4 <stdio_exit_handler>:
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <stdio_exit_handler+0xc>)
 8003fc6:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <stdio_exit_handler+0x10>)
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <stdio_exit_handler+0x14>)
 8003fca:	f000 b869 	b.w	80040a0 <_fwalk_sglue>
 8003fce:	bf00      	nop
 8003fd0:	2000000c 	.word	0x2000000c
 8003fd4:	08004e11 	.word	0x08004e11
 8003fd8:	20000018 	.word	0x20000018

08003fdc <cleanup_stdio>:
 8003fdc:	6841      	ldr	r1, [r0, #4]
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <cleanup_stdio+0x34>)
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	d001      	beq.n	8003fec <cleanup_stdio+0x10>
 8003fe8:	f000 ff12 	bl	8004e10 <_fflush_r>
 8003fec:	68a1      	ldr	r1, [r4, #8]
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <cleanup_stdio+0x38>)
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	d002      	beq.n	8003ffa <cleanup_stdio+0x1e>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 ff0b 	bl	8004e10 <_fflush_r>
 8003ffa:	68e1      	ldr	r1, [r4, #12]
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <cleanup_stdio+0x3c>)
 8003ffe:	4299      	cmp	r1, r3
 8004000:	d004      	beq.n	800400c <cleanup_stdio+0x30>
 8004002:	4620      	mov	r0, r4
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004008:	f000 bf02 	b.w	8004e10 <_fflush_r>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	200000e0 	.word	0x200000e0
 8004014:	20000148 	.word	0x20000148
 8004018:	200001b0 	.word	0x200001b0

0800401c <global_stdio_init.part.0>:
 800401c:	b510      	push	{r4, lr}
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <global_stdio_init.part.0+0x30>)
 8004020:	4c0b      	ldr	r4, [pc, #44]	; (8004050 <global_stdio_init.part.0+0x34>)
 8004022:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <global_stdio_init.part.0+0x38>)
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4620      	mov	r0, r4
 8004028:	2200      	movs	r2, #0
 800402a:	2104      	movs	r1, #4
 800402c:	f7ff ffa6 	bl	8003f7c <std>
 8004030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004034:	2201      	movs	r2, #1
 8004036:	2109      	movs	r1, #9
 8004038:	f7ff ffa0 	bl	8003f7c <std>
 800403c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004040:	2202      	movs	r2, #2
 8004042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004046:	2112      	movs	r1, #18
 8004048:	f7ff bf98 	b.w	8003f7c <std>
 800404c:	20000218 	.word	0x20000218
 8004050:	200000e0 	.word	0x200000e0
 8004054:	08003fc5 	.word	0x08003fc5

08004058 <__sfp_lock_acquire>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__sfp_lock_acquire+0x8>)
 800405a:	f000 b92d 	b.w	80042b8 <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	20000221 	.word	0x20000221

08004064 <__sfp_lock_release>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__sfp_lock_release+0x8>)
 8004066:	f000 b928 	b.w	80042ba <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	20000221 	.word	0x20000221

08004070 <__sinit>:
 8004070:	b510      	push	{r4, lr}
 8004072:	4604      	mov	r4, r0
 8004074:	f7ff fff0 	bl	8004058 <__sfp_lock_acquire>
 8004078:	6a23      	ldr	r3, [r4, #32]
 800407a:	b11b      	cbz	r3, 8004084 <__sinit+0x14>
 800407c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004080:	f7ff bff0 	b.w	8004064 <__sfp_lock_release>
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <__sinit+0x28>)
 8004086:	6223      	str	r3, [r4, #32]
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__sinit+0x2c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f5      	bne.n	800407c <__sinit+0xc>
 8004090:	f7ff ffc4 	bl	800401c <global_stdio_init.part.0>
 8004094:	e7f2      	b.n	800407c <__sinit+0xc>
 8004096:	bf00      	nop
 8004098:	08003fdd 	.word	0x08003fdd
 800409c:	20000218 	.word	0x20000218

080040a0 <_fwalk_sglue>:
 80040a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a4:	4607      	mov	r7, r0
 80040a6:	4688      	mov	r8, r1
 80040a8:	4614      	mov	r4, r2
 80040aa:	2600      	movs	r6, #0
 80040ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040b0:	f1b9 0901 	subs.w	r9, r9, #1
 80040b4:	d505      	bpl.n	80040c2 <_fwalk_sglue+0x22>
 80040b6:	6824      	ldr	r4, [r4, #0]
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d1f7      	bne.n	80040ac <_fwalk_sglue+0xc>
 80040bc:	4630      	mov	r0, r6
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c2:	89ab      	ldrh	r3, [r5, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d907      	bls.n	80040d8 <_fwalk_sglue+0x38>
 80040c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040cc:	3301      	adds	r3, #1
 80040ce:	d003      	beq.n	80040d8 <_fwalk_sglue+0x38>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	4306      	orrs	r6, r0
 80040d8:	3568      	adds	r5, #104	; 0x68
 80040da:	e7e9      	b.n	80040b0 <_fwalk_sglue+0x10>

080040dc <iprintf>:
 80040dc:	b40f      	push	{r0, r1, r2, r3}
 80040de:	b507      	push	{r0, r1, r2, lr}
 80040e0:	4906      	ldr	r1, [pc, #24]	; (80040fc <iprintf+0x20>)
 80040e2:	ab04      	add	r3, sp, #16
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ea:	6881      	ldr	r1, [r0, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	f000 fb5f 	bl	80047b0 <_vfiprintf_r>
 80040f2:	b003      	add	sp, #12
 80040f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr
 80040fc:	20000064 	.word	0x20000064

08004100 <siprintf>:
 8004100:	b40e      	push	{r1, r2, r3}
 8004102:	b500      	push	{lr}
 8004104:	b09c      	sub	sp, #112	; 0x70
 8004106:	ab1d      	add	r3, sp, #116	; 0x74
 8004108:	9002      	str	r0, [sp, #8]
 800410a:	9006      	str	r0, [sp, #24]
 800410c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004110:	4809      	ldr	r0, [pc, #36]	; (8004138 <siprintf+0x38>)
 8004112:	9107      	str	r1, [sp, #28]
 8004114:	9104      	str	r1, [sp, #16]
 8004116:	4909      	ldr	r1, [pc, #36]	; (800413c <siprintf+0x3c>)
 8004118:	f853 2b04 	ldr.w	r2, [r3], #4
 800411c:	9105      	str	r1, [sp, #20]
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	a902      	add	r1, sp, #8
 8004124:	f000 fa1c 	bl	8004560 <_svfiprintf_r>
 8004128:	9b02      	ldr	r3, [sp, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	b01c      	add	sp, #112	; 0x70
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b003      	add	sp, #12
 8004136:	4770      	bx	lr
 8004138:	20000064 	.word	0x20000064
 800413c:	ffff0208 	.word	0xffff0208

08004140 <__sread>:
 8004140:	b510      	push	{r4, lr}
 8004142:	460c      	mov	r4, r1
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	f000 f868 	bl	800421c <_read_r>
 800414c:	2800      	cmp	r0, #0
 800414e:	bfab      	itete	ge
 8004150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004152:	89a3      	ldrhlt	r3, [r4, #12]
 8004154:	181b      	addge	r3, r3, r0
 8004156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800415a:	bfac      	ite	ge
 800415c:	6563      	strge	r3, [r4, #84]	; 0x54
 800415e:	81a3      	strhlt	r3, [r4, #12]
 8004160:	bd10      	pop	{r4, pc}

08004162 <__swrite>:
 8004162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	461f      	mov	r7, r3
 8004168:	898b      	ldrh	r3, [r1, #12]
 800416a:	05db      	lsls	r3, r3, #23
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4616      	mov	r6, r2
 8004172:	d505      	bpl.n	8004180 <__swrite+0x1e>
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	2302      	movs	r3, #2
 800417a:	2200      	movs	r2, #0
 800417c:	f000 f83c 	bl	80041f8 <_lseek_r>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	4632      	mov	r2, r6
 800418e:	463b      	mov	r3, r7
 8004190:	4628      	mov	r0, r5
 8004192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004196:	f000 b853 	b.w	8004240 <_write_r>

0800419a <__sseek>:
 800419a:	b510      	push	{r4, lr}
 800419c:	460c      	mov	r4, r1
 800419e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a2:	f000 f829 	bl	80041f8 <_lseek_r>
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	bf15      	itete	ne
 80041ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80041ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041b6:	81a3      	strheq	r3, [r4, #12]
 80041b8:	bf18      	it	ne
 80041ba:	81a3      	strhne	r3, [r4, #12]
 80041bc:	bd10      	pop	{r4, pc}

080041be <__sclose>:
 80041be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c2:	f000 b809 	b.w	80041d8 <_close_r>

080041c6 <memset>:
 80041c6:	4402      	add	r2, r0
 80041c8:	4603      	mov	r3, r0
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d100      	bne.n	80041d0 <memset+0xa>
 80041ce:	4770      	bx	lr
 80041d0:	f803 1b01 	strb.w	r1, [r3], #1
 80041d4:	e7f9      	b.n	80041ca <memset+0x4>
	...

080041d8 <_close_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d06      	ldr	r5, [pc, #24]	; (80041f4 <_close_r+0x1c>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fc fc13 	bl	8000a0e <_close>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_close_r+0x1a>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_close_r+0x1a>
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	2000021c 	.word	0x2000021c

080041f8 <_lseek_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d07      	ldr	r5, [pc, #28]	; (8004218 <_lseek_r+0x20>)
 80041fc:	4604      	mov	r4, r0
 80041fe:	4608      	mov	r0, r1
 8004200:	4611      	mov	r1, r2
 8004202:	2200      	movs	r2, #0
 8004204:	602a      	str	r2, [r5, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f7fc fc28 	bl	8000a5c <_lseek>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_lseek_r+0x1e>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_lseek_r+0x1e>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	2000021c 	.word	0x2000021c

0800421c <_read_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d07      	ldr	r5, [pc, #28]	; (800423c <_read_r+0x20>)
 8004220:	4604      	mov	r4, r0
 8004222:	4608      	mov	r0, r1
 8004224:	4611      	mov	r1, r2
 8004226:	2200      	movs	r2, #0
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fc fbd2 	bl	80009d4 <_read>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_read_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_read_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	2000021c 	.word	0x2000021c

08004240 <_write_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4d07      	ldr	r5, [pc, #28]	; (8004260 <_write_r+0x20>)
 8004244:	4604      	mov	r4, r0
 8004246:	4608      	mov	r0, r1
 8004248:	4611      	mov	r1, r2
 800424a:	2200      	movs	r2, #0
 800424c:	602a      	str	r2, [r5, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f7fc f9b3 	bl	80005ba <_write>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d102      	bne.n	800425e <_write_r+0x1e>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	b103      	cbz	r3, 800425e <_write_r+0x1e>
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	2000021c 	.word	0x2000021c

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000064 	.word	0x20000064

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4d0d      	ldr	r5, [pc, #52]	; (80042a8 <__libc_init_array+0x38>)
 8004274:	4c0d      	ldr	r4, [pc, #52]	; (80042ac <__libc_init_array+0x3c>)
 8004276:	1b64      	subs	r4, r4, r5
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2600      	movs	r6, #0
 800427c:	42a6      	cmp	r6, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	4d0b      	ldr	r5, [pc, #44]	; (80042b0 <__libc_init_array+0x40>)
 8004282:	4c0c      	ldr	r4, [pc, #48]	; (80042b4 <__libc_init_array+0x44>)
 8004284:	f000 ff76 	bl	8005174 <_init>
 8004288:	1b64      	subs	r4, r4, r5
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	2600      	movs	r6, #0
 800428e:	42a6      	cmp	r6, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f855 3b04 	ldr.w	r3, [r5], #4
 8004298:	4798      	blx	r3
 800429a:	3601      	adds	r6, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a2:	4798      	blx	r3
 80042a4:	3601      	adds	r6, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	08005210 	.word	0x08005210
 80042ac:	08005210 	.word	0x08005210
 80042b0:	08005210 	.word	0x08005210
 80042b4:	08005214 	.word	0x08005214

080042b8 <__retarget_lock_acquire_recursive>:
 80042b8:	4770      	bx	lr

080042ba <__retarget_lock_release_recursive>:
 80042ba:	4770      	bx	lr

080042bc <_free_r>:
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	2900      	cmp	r1, #0
 80042c0:	d044      	beq.n	800434c <_free_r+0x90>
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	9001      	str	r0, [sp, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f1a1 0404 	sub.w	r4, r1, #4
 80042ce:	bfb8      	it	lt
 80042d0:	18e4      	addlt	r4, r4, r3
 80042d2:	f000 f8df 	bl	8004494 <__malloc_lock>
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <_free_r+0x94>)
 80042d8:	9801      	ldr	r0, [sp, #4]
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	b933      	cbnz	r3, 80042ec <_free_r+0x30>
 80042de:	6063      	str	r3, [r4, #4]
 80042e0:	6014      	str	r4, [r2, #0]
 80042e2:	b003      	add	sp, #12
 80042e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042e8:	f000 b8da 	b.w	80044a0 <__malloc_unlock>
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d908      	bls.n	8004302 <_free_r+0x46>
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf01      	itttt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	1949      	addeq	r1, r1, r5
 80042fe:	6021      	streq	r1, [r4, #0]
 8004300:	e7ed      	b.n	80042de <_free_r+0x22>
 8004302:	461a      	mov	r2, r3
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b10b      	cbz	r3, 800430c <_free_r+0x50>
 8004308:	42a3      	cmp	r3, r4
 800430a:	d9fa      	bls.n	8004302 <_free_r+0x46>
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	1855      	adds	r5, r2, r1
 8004310:	42a5      	cmp	r5, r4
 8004312:	d10b      	bne.n	800432c <_free_r+0x70>
 8004314:	6824      	ldr	r4, [r4, #0]
 8004316:	4421      	add	r1, r4
 8004318:	1854      	adds	r4, r2, r1
 800431a:	42a3      	cmp	r3, r4
 800431c:	6011      	str	r1, [r2, #0]
 800431e:	d1e0      	bne.n	80042e2 <_free_r+0x26>
 8004320:	681c      	ldr	r4, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	6053      	str	r3, [r2, #4]
 8004326:	440c      	add	r4, r1
 8004328:	6014      	str	r4, [r2, #0]
 800432a:	e7da      	b.n	80042e2 <_free_r+0x26>
 800432c:	d902      	bls.n	8004334 <_free_r+0x78>
 800432e:	230c      	movs	r3, #12
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	e7d6      	b.n	80042e2 <_free_r+0x26>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf04      	itt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	bf04      	itt	eq
 8004344:	1949      	addeq	r1, r1, r5
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	6054      	str	r4, [r2, #4]
 800434a:	e7ca      	b.n	80042e2 <_free_r+0x26>
 800434c:	b003      	add	sp, #12
 800434e:	bd30      	pop	{r4, r5, pc}
 8004350:	20000224 	.word	0x20000224

08004354 <sbrk_aligned>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <sbrk_aligned+0x3c>)
 8004358:	460c      	mov	r4, r1
 800435a:	6831      	ldr	r1, [r6, #0]
 800435c:	4605      	mov	r5, r0
 800435e:	b911      	cbnz	r1, 8004366 <sbrk_aligned+0x12>
 8004360:	f000 fe2e 	bl	8004fc0 <_sbrk_r>
 8004364:	6030      	str	r0, [r6, #0]
 8004366:	4621      	mov	r1, r4
 8004368:	4628      	mov	r0, r5
 800436a:	f000 fe29 	bl	8004fc0 <_sbrk_r>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	d00a      	beq.n	8004388 <sbrk_aligned+0x34>
 8004372:	1cc4      	adds	r4, r0, #3
 8004374:	f024 0403 	bic.w	r4, r4, #3
 8004378:	42a0      	cmp	r0, r4
 800437a:	d007      	beq.n	800438c <sbrk_aligned+0x38>
 800437c:	1a21      	subs	r1, r4, r0
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fe1e 	bl	8004fc0 <_sbrk_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d101      	bne.n	800438c <sbrk_aligned+0x38>
 8004388:	f04f 34ff 	mov.w	r4, #4294967295
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	20000228 	.word	0x20000228

08004394 <_malloc_r>:
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	1ccd      	adds	r5, r1, #3
 800439a:	f025 0503 	bic.w	r5, r5, #3
 800439e:	3508      	adds	r5, #8
 80043a0:	2d0c      	cmp	r5, #12
 80043a2:	bf38      	it	cc
 80043a4:	250c      	movcc	r5, #12
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	4607      	mov	r7, r0
 80043aa:	db01      	blt.n	80043b0 <_malloc_r+0x1c>
 80043ac:	42a9      	cmp	r1, r5
 80043ae:	d905      	bls.n	80043bc <_malloc_r+0x28>
 80043b0:	230c      	movs	r3, #12
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	2600      	movs	r6, #0
 80043b6:	4630      	mov	r0, r6
 80043b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004490 <_malloc_r+0xfc>
 80043c0:	f000 f868 	bl	8004494 <__malloc_lock>
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	461c      	mov	r4, r3
 80043ca:	bb5c      	cbnz	r4, 8004424 <_malloc_r+0x90>
 80043cc:	4629      	mov	r1, r5
 80043ce:	4638      	mov	r0, r7
 80043d0:	f7ff ffc0 	bl	8004354 <sbrk_aligned>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	4604      	mov	r4, r0
 80043d8:	d155      	bne.n	8004486 <_malloc_r+0xf2>
 80043da:	f8d8 4000 	ldr.w	r4, [r8]
 80043de:	4626      	mov	r6, r4
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d145      	bne.n	8004470 <_malloc_r+0xdc>
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d048      	beq.n	800447a <_malloc_r+0xe6>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	4631      	mov	r1, r6
 80043ec:	4638      	mov	r0, r7
 80043ee:	eb04 0903 	add.w	r9, r4, r3
 80043f2:	f000 fde5 	bl	8004fc0 <_sbrk_r>
 80043f6:	4581      	cmp	r9, r0
 80043f8:	d13f      	bne.n	800447a <_malloc_r+0xe6>
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	1a6d      	subs	r5, r5, r1
 80043fe:	4629      	mov	r1, r5
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ffa7 	bl	8004354 <sbrk_aligned>
 8004406:	3001      	adds	r0, #1
 8004408:	d037      	beq.n	800447a <_malloc_r+0xe6>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	442b      	add	r3, r5
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	f8d8 3000 	ldr.w	r3, [r8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d038      	beq.n	800448a <_malloc_r+0xf6>
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	42a2      	cmp	r2, r4
 800441c:	d12b      	bne.n	8004476 <_malloc_r+0xe2>
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e00f      	b.n	8004444 <_malloc_r+0xb0>
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	1b52      	subs	r2, r2, r5
 8004428:	d41f      	bmi.n	800446a <_malloc_r+0xd6>
 800442a:	2a0b      	cmp	r2, #11
 800442c:	d917      	bls.n	800445e <_malloc_r+0xca>
 800442e:	1961      	adds	r1, r4, r5
 8004430:	42a3      	cmp	r3, r4
 8004432:	6025      	str	r5, [r4, #0]
 8004434:	bf18      	it	ne
 8004436:	6059      	strne	r1, [r3, #4]
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	bf08      	it	eq
 800443c:	f8c8 1000 	streq.w	r1, [r8]
 8004440:	5162      	str	r2, [r4, r5]
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	4638      	mov	r0, r7
 8004446:	f104 060b 	add.w	r6, r4, #11
 800444a:	f000 f829 	bl	80044a0 <__malloc_unlock>
 800444e:	f026 0607 	bic.w	r6, r6, #7
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	1af2      	subs	r2, r6, r3
 8004456:	d0ae      	beq.n	80043b6 <_malloc_r+0x22>
 8004458:	1b9b      	subs	r3, r3, r6
 800445a:	50a3      	str	r3, [r4, r2]
 800445c:	e7ab      	b.n	80043b6 <_malloc_r+0x22>
 800445e:	42a3      	cmp	r3, r4
 8004460:	6862      	ldr	r2, [r4, #4]
 8004462:	d1dd      	bne.n	8004420 <_malloc_r+0x8c>
 8004464:	f8c8 2000 	str.w	r2, [r8]
 8004468:	e7ec      	b.n	8004444 <_malloc_r+0xb0>
 800446a:	4623      	mov	r3, r4
 800446c:	6864      	ldr	r4, [r4, #4]
 800446e:	e7ac      	b.n	80043ca <_malloc_r+0x36>
 8004470:	4634      	mov	r4, r6
 8004472:	6876      	ldr	r6, [r6, #4]
 8004474:	e7b4      	b.n	80043e0 <_malloc_r+0x4c>
 8004476:	4613      	mov	r3, r2
 8004478:	e7cc      	b.n	8004414 <_malloc_r+0x80>
 800447a:	230c      	movs	r3, #12
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4638      	mov	r0, r7
 8004480:	f000 f80e 	bl	80044a0 <__malloc_unlock>
 8004484:	e797      	b.n	80043b6 <_malloc_r+0x22>
 8004486:	6025      	str	r5, [r4, #0]
 8004488:	e7dc      	b.n	8004444 <_malloc_r+0xb0>
 800448a:	605b      	str	r3, [r3, #4]
 800448c:	deff      	udf	#255	; 0xff
 800448e:	bf00      	nop
 8004490:	20000224 	.word	0x20000224

08004494 <__malloc_lock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_lock+0x8>)
 8004496:	f7ff bf0f 	b.w	80042b8 <__retarget_lock_acquire_recursive>
 800449a:	bf00      	nop
 800449c:	20000220 	.word	0x20000220

080044a0 <__malloc_unlock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__malloc_unlock+0x8>)
 80044a2:	f7ff bf0a 	b.w	80042ba <__retarget_lock_release_recursive>
 80044a6:	bf00      	nop
 80044a8:	20000220 	.word	0x20000220

080044ac <__ssputs_r>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	688e      	ldr	r6, [r1, #8]
 80044b2:	461f      	mov	r7, r3
 80044b4:	42be      	cmp	r6, r7
 80044b6:	680b      	ldr	r3, [r1, #0]
 80044b8:	4682      	mov	sl, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	d82c      	bhi.n	800451a <__ssputs_r+0x6e>
 80044c0:	898a      	ldrh	r2, [r1, #12]
 80044c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044c6:	d026      	beq.n	8004516 <__ssputs_r+0x6a>
 80044c8:	6965      	ldr	r5, [r4, #20]
 80044ca:	6909      	ldr	r1, [r1, #16]
 80044cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d0:	eba3 0901 	sub.w	r9, r3, r1
 80044d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044d8:	1c7b      	adds	r3, r7, #1
 80044da:	444b      	add	r3, r9
 80044dc:	106d      	asrs	r5, r5, #1
 80044de:	429d      	cmp	r5, r3
 80044e0:	bf38      	it	cc
 80044e2:	461d      	movcc	r5, r3
 80044e4:	0553      	lsls	r3, r2, #21
 80044e6:	d527      	bpl.n	8004538 <__ssputs_r+0x8c>
 80044e8:	4629      	mov	r1, r5
 80044ea:	f7ff ff53 	bl	8004394 <_malloc_r>
 80044ee:	4606      	mov	r6, r0
 80044f0:	b360      	cbz	r0, 800454c <__ssputs_r+0xa0>
 80044f2:	6921      	ldr	r1, [r4, #16]
 80044f4:	464a      	mov	r2, r9
 80044f6:	f000 fd73 	bl	8004fe0 <memcpy>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	6126      	str	r6, [r4, #16]
 8004508:	6165      	str	r5, [r4, #20]
 800450a:	444e      	add	r6, r9
 800450c:	eba5 0509 	sub.w	r5, r5, r9
 8004510:	6026      	str	r6, [r4, #0]
 8004512:	60a5      	str	r5, [r4, #8]
 8004514:	463e      	mov	r6, r7
 8004516:	42be      	cmp	r6, r7
 8004518:	d900      	bls.n	800451c <__ssputs_r+0x70>
 800451a:	463e      	mov	r6, r7
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	4632      	mov	r2, r6
 8004520:	4641      	mov	r1, r8
 8004522:	f000 fd33 	bl	8004f8c <memmove>
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	1b9b      	subs	r3, r3, r6
 800452a:	60a3      	str	r3, [r4, #8]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	4433      	add	r3, r6
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	2000      	movs	r0, #0
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	462a      	mov	r2, r5
 800453a:	f000 fd5f 	bl	8004ffc <_realloc_r>
 800453e:	4606      	mov	r6, r0
 8004540:	2800      	cmp	r0, #0
 8004542:	d1e0      	bne.n	8004506 <__ssputs_r+0x5a>
 8004544:	6921      	ldr	r1, [r4, #16]
 8004546:	4650      	mov	r0, sl
 8004548:	f7ff feb8 	bl	80042bc <_free_r>
 800454c:	230c      	movs	r3, #12
 800454e:	f8ca 3000 	str.w	r3, [sl]
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	f04f 30ff 	mov.w	r0, #4294967295
 800455e:	e7e9      	b.n	8004534 <__ssputs_r+0x88>

08004560 <_svfiprintf_r>:
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	4698      	mov	r8, r3
 8004566:	898b      	ldrh	r3, [r1, #12]
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	b09d      	sub	sp, #116	; 0x74
 800456c:	4607      	mov	r7, r0
 800456e:	460d      	mov	r5, r1
 8004570:	4614      	mov	r4, r2
 8004572:	d50e      	bpl.n	8004592 <_svfiprintf_r+0x32>
 8004574:	690b      	ldr	r3, [r1, #16]
 8004576:	b963      	cbnz	r3, 8004592 <_svfiprintf_r+0x32>
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	f7ff ff0b 	bl	8004394 <_malloc_r>
 800457e:	6028      	str	r0, [r5, #0]
 8004580:	6128      	str	r0, [r5, #16]
 8004582:	b920      	cbnz	r0, 800458e <_svfiprintf_r+0x2e>
 8004584:	230c      	movs	r3, #12
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e0d0      	b.n	8004730 <_svfiprintf_r+0x1d0>
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	616b      	str	r3, [r5, #20]
 8004592:	2300      	movs	r3, #0
 8004594:	9309      	str	r3, [sp, #36]	; 0x24
 8004596:	2320      	movs	r3, #32
 8004598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800459c:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a0:	2330      	movs	r3, #48	; 0x30
 80045a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004748 <_svfiprintf_r+0x1e8>
 80045a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045aa:	f04f 0901 	mov.w	r9, #1
 80045ae:	4623      	mov	r3, r4
 80045b0:	469a      	mov	sl, r3
 80045b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b6:	b10a      	cbz	r2, 80045bc <_svfiprintf_r+0x5c>
 80045b8:	2a25      	cmp	r2, #37	; 0x25
 80045ba:	d1f9      	bne.n	80045b0 <_svfiprintf_r+0x50>
 80045bc:	ebba 0b04 	subs.w	fp, sl, r4
 80045c0:	d00b      	beq.n	80045da <_svfiprintf_r+0x7a>
 80045c2:	465b      	mov	r3, fp
 80045c4:	4622      	mov	r2, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	f7ff ff6f 	bl	80044ac <__ssputs_r>
 80045ce:	3001      	adds	r0, #1
 80045d0:	f000 80a9 	beq.w	8004726 <_svfiprintf_r+0x1c6>
 80045d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d6:	445a      	add	r2, fp
 80045d8:	9209      	str	r2, [sp, #36]	; 0x24
 80045da:	f89a 3000 	ldrb.w	r3, [sl]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a1 	beq.w	8004726 <_svfiprintf_r+0x1c6>
 80045e4:	2300      	movs	r3, #0
 80045e6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ee:	f10a 0a01 	add.w	sl, sl, #1
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	9307      	str	r3, [sp, #28]
 80045f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045fa:	931a      	str	r3, [sp, #104]	; 0x68
 80045fc:	4654      	mov	r4, sl
 80045fe:	2205      	movs	r2, #5
 8004600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004604:	4850      	ldr	r0, [pc, #320]	; (8004748 <_svfiprintf_r+0x1e8>)
 8004606:	f7fb fde3 	bl	80001d0 <memchr>
 800460a:	9a04      	ldr	r2, [sp, #16]
 800460c:	b9d8      	cbnz	r0, 8004646 <_svfiprintf_r+0xe6>
 800460e:	06d0      	lsls	r0, r2, #27
 8004610:	bf44      	itt	mi
 8004612:	2320      	movmi	r3, #32
 8004614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004618:	0711      	lsls	r1, r2, #28
 800461a:	bf44      	itt	mi
 800461c:	232b      	movmi	r3, #43	; 0x2b
 800461e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004622:	f89a 3000 	ldrb.w	r3, [sl]
 8004626:	2b2a      	cmp	r3, #42	; 0x2a
 8004628:	d015      	beq.n	8004656 <_svfiprintf_r+0xf6>
 800462a:	9a07      	ldr	r2, [sp, #28]
 800462c:	4654      	mov	r4, sl
 800462e:	2000      	movs	r0, #0
 8004630:	f04f 0c0a 	mov.w	ip, #10
 8004634:	4621      	mov	r1, r4
 8004636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800463a:	3b30      	subs	r3, #48	; 0x30
 800463c:	2b09      	cmp	r3, #9
 800463e:	d94d      	bls.n	80046dc <_svfiprintf_r+0x17c>
 8004640:	b1b0      	cbz	r0, 8004670 <_svfiprintf_r+0x110>
 8004642:	9207      	str	r2, [sp, #28]
 8004644:	e014      	b.n	8004670 <_svfiprintf_r+0x110>
 8004646:	eba0 0308 	sub.w	r3, r0, r8
 800464a:	fa09 f303 	lsl.w	r3, r9, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	46a2      	mov	sl, r4
 8004654:	e7d2      	b.n	80045fc <_svfiprintf_r+0x9c>
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	1d19      	adds	r1, r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	9103      	str	r1, [sp, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	bfbb      	ittet	lt
 8004662:	425b      	neglt	r3, r3
 8004664:	f042 0202 	orrlt.w	r2, r2, #2
 8004668:	9307      	strge	r3, [sp, #28]
 800466a:	9307      	strlt	r3, [sp, #28]
 800466c:	bfb8      	it	lt
 800466e:	9204      	strlt	r2, [sp, #16]
 8004670:	7823      	ldrb	r3, [r4, #0]
 8004672:	2b2e      	cmp	r3, #46	; 0x2e
 8004674:	d10c      	bne.n	8004690 <_svfiprintf_r+0x130>
 8004676:	7863      	ldrb	r3, [r4, #1]
 8004678:	2b2a      	cmp	r3, #42	; 0x2a
 800467a:	d134      	bne.n	80046e6 <_svfiprintf_r+0x186>
 800467c:	9b03      	ldr	r3, [sp, #12]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	9203      	str	r2, [sp, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfb8      	it	lt
 8004688:	f04f 33ff 	movlt.w	r3, #4294967295
 800468c:	3402      	adds	r4, #2
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004758 <_svfiprintf_r+0x1f8>
 8004694:	7821      	ldrb	r1, [r4, #0]
 8004696:	2203      	movs	r2, #3
 8004698:	4650      	mov	r0, sl
 800469a:	f7fb fd99 	bl	80001d0 <memchr>
 800469e:	b138      	cbz	r0, 80046b0 <_svfiprintf_r+0x150>
 80046a0:	9b04      	ldr	r3, [sp, #16]
 80046a2:	eba0 000a 	sub.w	r0, r0, sl
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	4082      	lsls	r2, r0
 80046aa:	4313      	orrs	r3, r2
 80046ac:	3401      	adds	r4, #1
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b4:	4825      	ldr	r0, [pc, #148]	; (800474c <_svfiprintf_r+0x1ec>)
 80046b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ba:	2206      	movs	r2, #6
 80046bc:	f7fb fd88 	bl	80001d0 <memchr>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d038      	beq.n	8004736 <_svfiprintf_r+0x1d6>
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <_svfiprintf_r+0x1f0>)
 80046c6:	bb1b      	cbnz	r3, 8004710 <_svfiprintf_r+0x1b0>
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	3307      	adds	r3, #7
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	3308      	adds	r3, #8
 80046d2:	9303      	str	r3, [sp, #12]
 80046d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d6:	4433      	add	r3, r6
 80046d8:	9309      	str	r3, [sp, #36]	; 0x24
 80046da:	e768      	b.n	80045ae <_svfiprintf_r+0x4e>
 80046dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e0:	460c      	mov	r4, r1
 80046e2:	2001      	movs	r0, #1
 80046e4:	e7a6      	b.n	8004634 <_svfiprintf_r+0xd4>
 80046e6:	2300      	movs	r3, #0
 80046e8:	3401      	adds	r4, #1
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f04f 0c0a 	mov.w	ip, #10
 80046f2:	4620      	mov	r0, r4
 80046f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f8:	3a30      	subs	r2, #48	; 0x30
 80046fa:	2a09      	cmp	r2, #9
 80046fc:	d903      	bls.n	8004706 <_svfiprintf_r+0x1a6>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0c6      	beq.n	8004690 <_svfiprintf_r+0x130>
 8004702:	9105      	str	r1, [sp, #20]
 8004704:	e7c4      	b.n	8004690 <_svfiprintf_r+0x130>
 8004706:	fb0c 2101 	mla	r1, ip, r1, r2
 800470a:	4604      	mov	r4, r0
 800470c:	2301      	movs	r3, #1
 800470e:	e7f0      	b.n	80046f2 <_svfiprintf_r+0x192>
 8004710:	ab03      	add	r3, sp, #12
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	462a      	mov	r2, r5
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <_svfiprintf_r+0x1f4>)
 8004718:	a904      	add	r1, sp, #16
 800471a:	4638      	mov	r0, r7
 800471c:	f3af 8000 	nop.w
 8004720:	1c42      	adds	r2, r0, #1
 8004722:	4606      	mov	r6, r0
 8004724:	d1d6      	bne.n	80046d4 <_svfiprintf_r+0x174>
 8004726:	89ab      	ldrh	r3, [r5, #12]
 8004728:	065b      	lsls	r3, r3, #25
 800472a:	f53f af2d 	bmi.w	8004588 <_svfiprintf_r+0x28>
 800472e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004730:	b01d      	add	sp, #116	; 0x74
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	ab03      	add	r3, sp, #12
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	462a      	mov	r2, r5
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_svfiprintf_r+0x1f4>)
 800473e:	a904      	add	r1, sp, #16
 8004740:	4638      	mov	r0, r7
 8004742:	f000 f9bd 	bl	8004ac0 <_printf_i>
 8004746:	e7eb      	b.n	8004720 <_svfiprintf_r+0x1c0>
 8004748:	080051d4 	.word	0x080051d4
 800474c:	080051de 	.word	0x080051de
 8004750:	00000000 	.word	0x00000000
 8004754:	080044ad 	.word	0x080044ad
 8004758:	080051da 	.word	0x080051da

0800475c <__sfputc_r>:
 800475c:	6893      	ldr	r3, [r2, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	b410      	push	{r4}
 8004764:	6093      	str	r3, [r2, #8]
 8004766:	da08      	bge.n	800477a <__sfputc_r+0x1e>
 8004768:	6994      	ldr	r4, [r2, #24]
 800476a:	42a3      	cmp	r3, r4
 800476c:	db01      	blt.n	8004772 <__sfputc_r+0x16>
 800476e:	290a      	cmp	r1, #10
 8004770:	d103      	bne.n	800477a <__sfputc_r+0x1e>
 8004772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004776:	f000 bb73 	b.w	8004e60 <__swbuf_r>
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	1c58      	adds	r0, r3, #1
 800477e:	6010      	str	r0, [r2, #0]
 8004780:	7019      	strb	r1, [r3, #0]
 8004782:	4608      	mov	r0, r1
 8004784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004788:	4770      	bx	lr

0800478a <__sfputs_r>:
 800478a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	4614      	mov	r4, r2
 8004792:	18d5      	adds	r5, r2, r3
 8004794:	42ac      	cmp	r4, r5
 8004796:	d101      	bne.n	800479c <__sfputs_r+0x12>
 8004798:	2000      	movs	r0, #0
 800479a:	e007      	b.n	80047ac <__sfputs_r+0x22>
 800479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a0:	463a      	mov	r2, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff ffda 	bl	800475c <__sfputc_r>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d1f3      	bne.n	8004794 <__sfputs_r+0xa>
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047b0 <_vfiprintf_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	460d      	mov	r5, r1
 80047b6:	b09d      	sub	sp, #116	; 0x74
 80047b8:	4614      	mov	r4, r2
 80047ba:	4698      	mov	r8, r3
 80047bc:	4606      	mov	r6, r0
 80047be:	b118      	cbz	r0, 80047c8 <_vfiprintf_r+0x18>
 80047c0:	6a03      	ldr	r3, [r0, #32]
 80047c2:	b90b      	cbnz	r3, 80047c8 <_vfiprintf_r+0x18>
 80047c4:	f7ff fc54 	bl	8004070 <__sinit>
 80047c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047ca:	07d9      	lsls	r1, r3, #31
 80047cc:	d405      	bmi.n	80047da <_vfiprintf_r+0x2a>
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	059a      	lsls	r2, r3, #22
 80047d2:	d402      	bmi.n	80047da <_vfiprintf_r+0x2a>
 80047d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047d6:	f7ff fd6f 	bl	80042b8 <__retarget_lock_acquire_recursive>
 80047da:	89ab      	ldrh	r3, [r5, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	d501      	bpl.n	80047e4 <_vfiprintf_r+0x34>
 80047e0:	692b      	ldr	r3, [r5, #16]
 80047e2:	b99b      	cbnz	r3, 800480c <_vfiprintf_r+0x5c>
 80047e4:	4629      	mov	r1, r5
 80047e6:	4630      	mov	r0, r6
 80047e8:	f000 fb78 	bl	8004edc <__swsetup_r>
 80047ec:	b170      	cbz	r0, 800480c <_vfiprintf_r+0x5c>
 80047ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f0:	07dc      	lsls	r4, r3, #31
 80047f2:	d504      	bpl.n	80047fe <_vfiprintf_r+0x4e>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	b01d      	add	sp, #116	; 0x74
 80047fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	0598      	lsls	r0, r3, #22
 8004802:	d4f7      	bmi.n	80047f4 <_vfiprintf_r+0x44>
 8004804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004806:	f7ff fd58 	bl	80042ba <__retarget_lock_release_recursive>
 800480a:	e7f3      	b.n	80047f4 <_vfiprintf_r+0x44>
 800480c:	2300      	movs	r3, #0
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	2320      	movs	r3, #32
 8004812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004816:	f8cd 800c 	str.w	r8, [sp, #12]
 800481a:	2330      	movs	r3, #48	; 0x30
 800481c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80049d0 <_vfiprintf_r+0x220>
 8004820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004824:	f04f 0901 	mov.w	r9, #1
 8004828:	4623      	mov	r3, r4
 800482a:	469a      	mov	sl, r3
 800482c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004830:	b10a      	cbz	r2, 8004836 <_vfiprintf_r+0x86>
 8004832:	2a25      	cmp	r2, #37	; 0x25
 8004834:	d1f9      	bne.n	800482a <_vfiprintf_r+0x7a>
 8004836:	ebba 0b04 	subs.w	fp, sl, r4
 800483a:	d00b      	beq.n	8004854 <_vfiprintf_r+0xa4>
 800483c:	465b      	mov	r3, fp
 800483e:	4622      	mov	r2, r4
 8004840:	4629      	mov	r1, r5
 8004842:	4630      	mov	r0, r6
 8004844:	f7ff ffa1 	bl	800478a <__sfputs_r>
 8004848:	3001      	adds	r0, #1
 800484a:	f000 80a9 	beq.w	80049a0 <_vfiprintf_r+0x1f0>
 800484e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004850:	445a      	add	r2, fp
 8004852:	9209      	str	r2, [sp, #36]	; 0x24
 8004854:	f89a 3000 	ldrb.w	r3, [sl]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a1 	beq.w	80049a0 <_vfiprintf_r+0x1f0>
 800485e:	2300      	movs	r3, #0
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004868:	f10a 0a01 	add.w	sl, sl, #1
 800486c:	9304      	str	r3, [sp, #16]
 800486e:	9307      	str	r3, [sp, #28]
 8004870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004874:	931a      	str	r3, [sp, #104]	; 0x68
 8004876:	4654      	mov	r4, sl
 8004878:	2205      	movs	r2, #5
 800487a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487e:	4854      	ldr	r0, [pc, #336]	; (80049d0 <_vfiprintf_r+0x220>)
 8004880:	f7fb fca6 	bl	80001d0 <memchr>
 8004884:	9a04      	ldr	r2, [sp, #16]
 8004886:	b9d8      	cbnz	r0, 80048c0 <_vfiprintf_r+0x110>
 8004888:	06d1      	lsls	r1, r2, #27
 800488a:	bf44      	itt	mi
 800488c:	2320      	movmi	r3, #32
 800488e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004892:	0713      	lsls	r3, r2, #28
 8004894:	bf44      	itt	mi
 8004896:	232b      	movmi	r3, #43	; 0x2b
 8004898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489c:	f89a 3000 	ldrb.w	r3, [sl]
 80048a0:	2b2a      	cmp	r3, #42	; 0x2a
 80048a2:	d015      	beq.n	80048d0 <_vfiprintf_r+0x120>
 80048a4:	9a07      	ldr	r2, [sp, #28]
 80048a6:	4654      	mov	r4, sl
 80048a8:	2000      	movs	r0, #0
 80048aa:	f04f 0c0a 	mov.w	ip, #10
 80048ae:	4621      	mov	r1, r4
 80048b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b4:	3b30      	subs	r3, #48	; 0x30
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	d94d      	bls.n	8004956 <_vfiprintf_r+0x1a6>
 80048ba:	b1b0      	cbz	r0, 80048ea <_vfiprintf_r+0x13a>
 80048bc:	9207      	str	r2, [sp, #28]
 80048be:	e014      	b.n	80048ea <_vfiprintf_r+0x13a>
 80048c0:	eba0 0308 	sub.w	r3, r0, r8
 80048c4:	fa09 f303 	lsl.w	r3, r9, r3
 80048c8:	4313      	orrs	r3, r2
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	46a2      	mov	sl, r4
 80048ce:	e7d2      	b.n	8004876 <_vfiprintf_r+0xc6>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	1d19      	adds	r1, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	9103      	str	r1, [sp, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfbb      	ittet	lt
 80048dc:	425b      	neglt	r3, r3
 80048de:	f042 0202 	orrlt.w	r2, r2, #2
 80048e2:	9307      	strge	r3, [sp, #28]
 80048e4:	9307      	strlt	r3, [sp, #28]
 80048e6:	bfb8      	it	lt
 80048e8:	9204      	strlt	r2, [sp, #16]
 80048ea:	7823      	ldrb	r3, [r4, #0]
 80048ec:	2b2e      	cmp	r3, #46	; 0x2e
 80048ee:	d10c      	bne.n	800490a <_vfiprintf_r+0x15a>
 80048f0:	7863      	ldrb	r3, [r4, #1]
 80048f2:	2b2a      	cmp	r3, #42	; 0x2a
 80048f4:	d134      	bne.n	8004960 <_vfiprintf_r+0x1b0>
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	1d1a      	adds	r2, r3, #4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	9203      	str	r2, [sp, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfb8      	it	lt
 8004902:	f04f 33ff 	movlt.w	r3, #4294967295
 8004906:	3402      	adds	r4, #2
 8004908:	9305      	str	r3, [sp, #20]
 800490a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80049e0 <_vfiprintf_r+0x230>
 800490e:	7821      	ldrb	r1, [r4, #0]
 8004910:	2203      	movs	r2, #3
 8004912:	4650      	mov	r0, sl
 8004914:	f7fb fc5c 	bl	80001d0 <memchr>
 8004918:	b138      	cbz	r0, 800492a <_vfiprintf_r+0x17a>
 800491a:	9b04      	ldr	r3, [sp, #16]
 800491c:	eba0 000a 	sub.w	r0, r0, sl
 8004920:	2240      	movs	r2, #64	; 0x40
 8004922:	4082      	lsls	r2, r0
 8004924:	4313      	orrs	r3, r2
 8004926:	3401      	adds	r4, #1
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4829      	ldr	r0, [pc, #164]	; (80049d4 <_vfiprintf_r+0x224>)
 8004930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004934:	2206      	movs	r2, #6
 8004936:	f7fb fc4b 	bl	80001d0 <memchr>
 800493a:	2800      	cmp	r0, #0
 800493c:	d03f      	beq.n	80049be <_vfiprintf_r+0x20e>
 800493e:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <_vfiprintf_r+0x228>)
 8004940:	bb1b      	cbnz	r3, 800498a <_vfiprintf_r+0x1da>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	3307      	adds	r3, #7
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	3308      	adds	r3, #8
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	443b      	add	r3, r7
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	e768      	b.n	8004828 <_vfiprintf_r+0x78>
 8004956:	fb0c 3202 	mla	r2, ip, r2, r3
 800495a:	460c      	mov	r4, r1
 800495c:	2001      	movs	r0, #1
 800495e:	e7a6      	b.n	80048ae <_vfiprintf_r+0xfe>
 8004960:	2300      	movs	r3, #0
 8004962:	3401      	adds	r4, #1
 8004964:	9305      	str	r3, [sp, #20]
 8004966:	4619      	mov	r1, r3
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4620      	mov	r0, r4
 800496e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004972:	3a30      	subs	r2, #48	; 0x30
 8004974:	2a09      	cmp	r2, #9
 8004976:	d903      	bls.n	8004980 <_vfiprintf_r+0x1d0>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0c6      	beq.n	800490a <_vfiprintf_r+0x15a>
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	e7c4      	b.n	800490a <_vfiprintf_r+0x15a>
 8004980:	fb0c 2101 	mla	r1, ip, r1, r2
 8004984:	4604      	mov	r4, r0
 8004986:	2301      	movs	r3, #1
 8004988:	e7f0      	b.n	800496c <_vfiprintf_r+0x1bc>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	462a      	mov	r2, r5
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <_vfiprintf_r+0x22c>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	4630      	mov	r0, r6
 8004996:	f3af 8000 	nop.w
 800499a:	4607      	mov	r7, r0
 800499c:	1c78      	adds	r0, r7, #1
 800499e:	d1d6      	bne.n	800494e <_vfiprintf_r+0x19e>
 80049a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a2:	07d9      	lsls	r1, r3, #31
 80049a4:	d405      	bmi.n	80049b2 <_vfiprintf_r+0x202>
 80049a6:	89ab      	ldrh	r3, [r5, #12]
 80049a8:	059a      	lsls	r2, r3, #22
 80049aa:	d402      	bmi.n	80049b2 <_vfiprintf_r+0x202>
 80049ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ae:	f7ff fc84 	bl	80042ba <__retarget_lock_release_recursive>
 80049b2:	89ab      	ldrh	r3, [r5, #12]
 80049b4:	065b      	lsls	r3, r3, #25
 80049b6:	f53f af1d 	bmi.w	80047f4 <_vfiprintf_r+0x44>
 80049ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049bc:	e71c      	b.n	80047f8 <_vfiprintf_r+0x48>
 80049be:	ab03      	add	r3, sp, #12
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	462a      	mov	r2, r5
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <_vfiprintf_r+0x22c>)
 80049c6:	a904      	add	r1, sp, #16
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f879 	bl	8004ac0 <_printf_i>
 80049ce:	e7e4      	b.n	800499a <_vfiprintf_r+0x1ea>
 80049d0:	080051d4 	.word	0x080051d4
 80049d4:	080051de 	.word	0x080051de
 80049d8:	00000000 	.word	0x00000000
 80049dc:	0800478b 	.word	0x0800478b
 80049e0:	080051da 	.word	0x080051da

080049e4 <_printf_common>:
 80049e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	4616      	mov	r6, r2
 80049ea:	4699      	mov	r9, r3
 80049ec:	688a      	ldr	r2, [r1, #8]
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bfb8      	it	lt
 80049f8:	4613      	movlt	r3, r2
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a00:	4607      	mov	r7, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b10a      	cbz	r2, 8004a0a <_printf_common+0x26>
 8004a06:	3301      	adds	r3, #1
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	0699      	lsls	r1, r3, #26
 8004a0e:	bf42      	ittt	mi
 8004a10:	6833      	ldrmi	r3, [r6, #0]
 8004a12:	3302      	addmi	r3, #2
 8004a14:	6033      	strmi	r3, [r6, #0]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d106      	bne.n	8004a2c <_printf_common+0x48>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	6832      	ldr	r2, [r6, #0]
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	dc26      	bgt.n	8004a7a <_printf_common+0x96>
 8004a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a30:	1e13      	subs	r3, r2, #0
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	bf18      	it	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	0692      	lsls	r2, r2, #26
 8004a3a:	d42b      	bmi.n	8004a94 <_printf_common+0xb0>
 8004a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d01e      	beq.n	8004a88 <_printf_common+0xa4>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	bf02      	ittt	eq
 8004a56:	68e5      	ldreq	r5, [r4, #12]
 8004a58:	6833      	ldreq	r3, [r6, #0]
 8004a5a:	1aed      	subeq	r5, r5, r3
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	bf0c      	ite	eq
 8004a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a64:	2500      	movne	r5, #0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfc4      	itt	gt
 8004a6a:	1a9b      	subgt	r3, r3, r2
 8004a6c:	18ed      	addgt	r5, r5, r3
 8004a6e:	2600      	movs	r6, #0
 8004a70:	341a      	adds	r4, #26
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d11a      	bne.n	8004aac <_printf_common+0xc8>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e008      	b.n	8004a8c <_printf_common+0xa8>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4638      	mov	r0, r7
 8004a82:	47c0      	blx	r8
 8004a84:	3001      	adds	r0, #1
 8004a86:	d103      	bne.n	8004a90 <_printf_common+0xac>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	3501      	adds	r5, #1
 8004a92:	e7c6      	b.n	8004a22 <_printf_common+0x3e>
 8004a94:	18e1      	adds	r1, r4, r3
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a9e:	4422      	add	r2, r4
 8004aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	e7c7      	b.n	8004a3c <_printf_common+0x58>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0e6      	beq.n	8004a88 <_printf_common+0xa4>
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7d9      	b.n	8004a72 <_printf_common+0x8e>
	...

08004ac0 <_printf_i>:
 8004ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	7e0f      	ldrb	r7, [r1, #24]
 8004ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ac8:	2f78      	cmp	r7, #120	; 0x78
 8004aca:	4691      	mov	r9, r2
 8004acc:	4680      	mov	r8, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	469a      	mov	sl, r3
 8004ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ad6:	d807      	bhi.n	8004ae8 <_printf_i+0x28>
 8004ad8:	2f62      	cmp	r7, #98	; 0x62
 8004ada:	d80a      	bhi.n	8004af2 <_printf_i+0x32>
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	f000 80d4 	beq.w	8004c8a <_printf_i+0x1ca>
 8004ae2:	2f58      	cmp	r7, #88	; 0x58
 8004ae4:	f000 80c0 	beq.w	8004c68 <_printf_i+0x1a8>
 8004ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af0:	e03a      	b.n	8004b68 <_printf_i+0xa8>
 8004af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004af6:	2b15      	cmp	r3, #21
 8004af8:	d8f6      	bhi.n	8004ae8 <_printf_i+0x28>
 8004afa:	a101      	add	r1, pc, #4	; (adr r1, 8004b00 <_printf_i+0x40>)
 8004afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b00:	08004b59 	.word	0x08004b59
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004ae9 	.word	0x08004ae9
 8004b0c:	08004ae9 	.word	0x08004ae9
 8004b10:	08004ae9 	.word	0x08004ae9
 8004b14:	08004ae9 	.word	0x08004ae9
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004ae9 	.word	0x08004ae9
 8004b20:	08004ae9 	.word	0x08004ae9
 8004b24:	08004ae9 	.word	0x08004ae9
 8004b28:	08004ae9 	.word	0x08004ae9
 8004b2c:	08004c71 	.word	0x08004c71
 8004b30:	08004b99 	.word	0x08004b99
 8004b34:	08004c2b 	.word	0x08004c2b
 8004b38:	08004ae9 	.word	0x08004ae9
 8004b3c:	08004ae9 	.word	0x08004ae9
 8004b40:	08004c93 	.word	0x08004c93
 8004b44:	08004ae9 	.word	0x08004ae9
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004ae9 	.word	0x08004ae9
 8004b50:	08004ae9 	.word	0x08004ae9
 8004b54:	08004c33 	.word	0x08004c33
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	602a      	str	r2, [r5, #0]
 8004b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e09f      	b.n	8004cac <_printf_i+0x1ec>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	0607      	lsls	r7, r0, #24
 8004b72:	f103 0104 	add.w	r1, r3, #4
 8004b76:	6029      	str	r1, [r5, #0]
 8004b78:	d501      	bpl.n	8004b7e <_printf_i+0xbe>
 8004b7a:	681e      	ldr	r6, [r3, #0]
 8004b7c:	e003      	b.n	8004b86 <_printf_i+0xc6>
 8004b7e:	0646      	lsls	r6, r0, #25
 8004b80:	d5fb      	bpl.n	8004b7a <_printf_i+0xba>
 8004b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	da03      	bge.n	8004b92 <_printf_i+0xd2>
 8004b8a:	232d      	movs	r3, #45	; 0x2d
 8004b8c:	4276      	negs	r6, r6
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b92:	485a      	ldr	r0, [pc, #360]	; (8004cfc <_printf_i+0x23c>)
 8004b94:	230a      	movs	r3, #10
 8004b96:	e012      	b.n	8004bbe <_printf_i+0xfe>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	1d19      	adds	r1, r3, #4
 8004b9e:	6029      	str	r1, [r5, #0]
 8004ba0:	0605      	lsls	r5, r0, #24
 8004ba2:	d501      	bpl.n	8004ba8 <_printf_i+0xe8>
 8004ba4:	681e      	ldr	r6, [r3, #0]
 8004ba6:	e002      	b.n	8004bae <_printf_i+0xee>
 8004ba8:	0641      	lsls	r1, r0, #25
 8004baa:	d5fb      	bpl.n	8004ba4 <_printf_i+0xe4>
 8004bac:	881e      	ldrh	r6, [r3, #0]
 8004bae:	4853      	ldr	r0, [pc, #332]	; (8004cfc <_printf_i+0x23c>)
 8004bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2308      	moveq	r3, #8
 8004bb6:	230a      	movne	r3, #10
 8004bb8:	2100      	movs	r1, #0
 8004bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bbe:	6865      	ldr	r5, [r4, #4]
 8004bc0:	60a5      	str	r5, [r4, #8]
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	bfa2      	ittt	ge
 8004bc6:	6821      	ldrge	r1, [r4, #0]
 8004bc8:	f021 0104 	bicge.w	r1, r1, #4
 8004bcc:	6021      	strge	r1, [r4, #0]
 8004bce:	b90e      	cbnz	r6, 8004bd4 <_printf_i+0x114>
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	d04b      	beq.n	8004c6c <_printf_i+0x1ac>
 8004bd4:	4615      	mov	r5, r2
 8004bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bda:	fb03 6711 	mls	r7, r3, r1, r6
 8004bde:	5dc7      	ldrb	r7, [r0, r7]
 8004be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004be4:	4637      	mov	r7, r6
 8004be6:	42bb      	cmp	r3, r7
 8004be8:	460e      	mov	r6, r1
 8004bea:	d9f4      	bls.n	8004bd6 <_printf_i+0x116>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d10b      	bne.n	8004c08 <_printf_i+0x148>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07de      	lsls	r6, r3, #31
 8004bf4:	d508      	bpl.n	8004c08 <_printf_i+0x148>
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	6861      	ldr	r1, [r4, #4]
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	bfde      	ittt	le
 8004bfe:	2330      	movle	r3, #48	; 0x30
 8004c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c08:	1b52      	subs	r2, r2, r5
 8004c0a:	6122      	str	r2, [r4, #16]
 8004c0c:	f8cd a000 	str.w	sl, [sp]
 8004c10:	464b      	mov	r3, r9
 8004c12:	aa03      	add	r2, sp, #12
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff fee4 	bl	80049e4 <_printf_common>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d14a      	bne.n	8004cb6 <_printf_i+0x1f6>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b004      	add	sp, #16
 8004c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f043 0320 	orr.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	4833      	ldr	r0, [pc, #204]	; (8004d00 <_printf_i+0x240>)
 8004c34:	2778      	movs	r7, #120	; 0x78
 8004c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6829      	ldr	r1, [r5, #0]
 8004c3e:	061f      	lsls	r7, r3, #24
 8004c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c44:	d402      	bmi.n	8004c4c <_printf_i+0x18c>
 8004c46:	065f      	lsls	r7, r3, #25
 8004c48:	bf48      	it	mi
 8004c4a:	b2b6      	uxthmi	r6, r6
 8004c4c:	07df      	lsls	r7, r3, #31
 8004c4e:	bf48      	it	mi
 8004c50:	f043 0320 	orrmi.w	r3, r3, #32
 8004c54:	6029      	str	r1, [r5, #0]
 8004c56:	bf48      	it	mi
 8004c58:	6023      	strmi	r3, [r4, #0]
 8004c5a:	b91e      	cbnz	r6, 8004c64 <_printf_i+0x1a4>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	f023 0320 	bic.w	r3, r3, #32
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	2310      	movs	r3, #16
 8004c66:	e7a7      	b.n	8004bb8 <_printf_i+0xf8>
 8004c68:	4824      	ldr	r0, [pc, #144]	; (8004cfc <_printf_i+0x23c>)
 8004c6a:	e7e4      	b.n	8004c36 <_printf_i+0x176>
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	e7bd      	b.n	8004bec <_printf_i+0x12c>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	6826      	ldr	r6, [r4, #0]
 8004c74:	6961      	ldr	r1, [r4, #20]
 8004c76:	1d18      	adds	r0, r3, #4
 8004c78:	6028      	str	r0, [r5, #0]
 8004c7a:	0635      	lsls	r5, r6, #24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	d501      	bpl.n	8004c84 <_printf_i+0x1c4>
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <_printf_i+0x1ca>
 8004c84:	0670      	lsls	r0, r6, #25
 8004c86:	d5fb      	bpl.n	8004c80 <_printf_i+0x1c0>
 8004c88:	8019      	strh	r1, [r3, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	4615      	mov	r5, r2
 8004c90:	e7bc      	b.n	8004c0c <_printf_i+0x14c>
 8004c92:	682b      	ldr	r3, [r5, #0]
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	602a      	str	r2, [r5, #0]
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	6862      	ldr	r2, [r4, #4]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f7fb fa96 	bl	80001d0 <memchr>
 8004ca4:	b108      	cbz	r0, 8004caa <_printf_i+0x1ea>
 8004ca6:	1b40      	subs	r0, r0, r5
 8004ca8:	6060      	str	r0, [r4, #4]
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb4:	e7aa      	b.n	8004c0c <_printf_i+0x14c>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	47d0      	blx	sl
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0ad      	beq.n	8004c20 <_printf_i+0x160>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	d413      	bmi.n	8004cf2 <_printf_i+0x232>
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	4298      	cmp	r0, r3
 8004cd0:	bfb8      	it	lt
 8004cd2:	4618      	movlt	r0, r3
 8004cd4:	e7a6      	b.n	8004c24 <_printf_i+0x164>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d09d      	beq.n	8004c20 <_printf_i+0x160>
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	9903      	ldr	r1, [sp, #12]
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dcf2      	bgt.n	8004cd6 <_printf_i+0x216>
 8004cf0:	e7eb      	b.n	8004cca <_printf_i+0x20a>
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	f104 0619 	add.w	r6, r4, #25
 8004cf8:	e7f5      	b.n	8004ce6 <_printf_i+0x226>
 8004cfa:	bf00      	nop
 8004cfc:	080051e5 	.word	0x080051e5
 8004d00:	080051f6 	.word	0x080051f6

08004d04 <__sflush_r>:
 8004d04:	898a      	ldrh	r2, [r1, #12]
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	0710      	lsls	r0, r2, #28
 8004d0e:	460c      	mov	r4, r1
 8004d10:	d458      	bmi.n	8004dc4 <__sflush_r+0xc0>
 8004d12:	684b      	ldr	r3, [r1, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dc05      	bgt.n	8004d24 <__sflush_r+0x20>
 8004d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dc02      	bgt.n	8004d24 <__sflush_r+0x20>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d26:	2e00      	cmp	r6, #0
 8004d28:	d0f9      	beq.n	8004d1e <__sflush_r+0x1a>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d30:	682f      	ldr	r7, [r5, #0]
 8004d32:	6a21      	ldr	r1, [r4, #32]
 8004d34:	602b      	str	r3, [r5, #0]
 8004d36:	d032      	beq.n	8004d9e <__sflush_r+0x9a>
 8004d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	075a      	lsls	r2, r3, #29
 8004d3e:	d505      	bpl.n	8004d4c <__sflush_r+0x48>
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	1ac0      	subs	r0, r0, r3
 8004d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d46:	b10b      	cbz	r3, 8004d4c <__sflush_r+0x48>
 8004d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d4a:	1ac0      	subs	r0, r0, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d52:	6a21      	ldr	r1, [r4, #32]
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	d106      	bne.n	8004d6c <__sflush_r+0x68>
 8004d5e:	6829      	ldr	r1, [r5, #0]
 8004d60:	291d      	cmp	r1, #29
 8004d62:	d82b      	bhi.n	8004dbc <__sflush_r+0xb8>
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <__sflush_r+0x108>)
 8004d66:	410a      	asrs	r2, r1
 8004d68:	07d6      	lsls	r6, r2, #31
 8004d6a:	d427      	bmi.n	8004dbc <__sflush_r+0xb8>
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	6062      	str	r2, [r4, #4]
 8004d70:	04d9      	lsls	r1, r3, #19
 8004d72:	6922      	ldr	r2, [r4, #16]
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	d504      	bpl.n	8004d82 <__sflush_r+0x7e>
 8004d78:	1c42      	adds	r2, r0, #1
 8004d7a:	d101      	bne.n	8004d80 <__sflush_r+0x7c>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b903      	cbnz	r3, 8004d82 <__sflush_r+0x7e>
 8004d80:	6560      	str	r0, [r4, #84]	; 0x54
 8004d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d84:	602f      	str	r7, [r5, #0]
 8004d86:	2900      	cmp	r1, #0
 8004d88:	d0c9      	beq.n	8004d1e <__sflush_r+0x1a>
 8004d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	d002      	beq.n	8004d98 <__sflush_r+0x94>
 8004d92:	4628      	mov	r0, r5
 8004d94:	f7ff fa92 	bl	80042bc <_free_r>
 8004d98:	2000      	movs	r0, #0
 8004d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8004d9c:	e7c0      	b.n	8004d20 <__sflush_r+0x1c>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b0      	blx	r6
 8004da4:	1c41      	adds	r1, r0, #1
 8004da6:	d1c8      	bne.n	8004d3a <__sflush_r+0x36>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0c5      	beq.n	8004d3a <__sflush_r+0x36>
 8004dae:	2b1d      	cmp	r3, #29
 8004db0:	d001      	beq.n	8004db6 <__sflush_r+0xb2>
 8004db2:	2b16      	cmp	r3, #22
 8004db4:	d101      	bne.n	8004dba <__sflush_r+0xb6>
 8004db6:	602f      	str	r7, [r5, #0]
 8004db8:	e7b1      	b.n	8004d1e <__sflush_r+0x1a>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	e7ad      	b.n	8004d20 <__sflush_r+0x1c>
 8004dc4:	690f      	ldr	r7, [r1, #16]
 8004dc6:	2f00      	cmp	r7, #0
 8004dc8:	d0a9      	beq.n	8004d1e <__sflush_r+0x1a>
 8004dca:	0793      	lsls	r3, r2, #30
 8004dcc:	680e      	ldr	r6, [r1, #0]
 8004dce:	bf08      	it	eq
 8004dd0:	694b      	ldreq	r3, [r1, #20]
 8004dd2:	600f      	str	r7, [r1, #0]
 8004dd4:	bf18      	it	ne
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	eba6 0807 	sub.w	r8, r6, r7
 8004ddc:	608b      	str	r3, [r1, #8]
 8004dde:	f1b8 0f00 	cmp.w	r8, #0
 8004de2:	dd9c      	ble.n	8004d1e <__sflush_r+0x1a>
 8004de4:	6a21      	ldr	r1, [r4, #32]
 8004de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004de8:	4643      	mov	r3, r8
 8004dea:	463a      	mov	r2, r7
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b0      	blx	r6
 8004df0:	2800      	cmp	r0, #0
 8004df2:	dc06      	bgt.n	8004e02 <__sflush_r+0xfe>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	e78e      	b.n	8004d20 <__sflush_r+0x1c>
 8004e02:	4407      	add	r7, r0
 8004e04:	eba8 0800 	sub.w	r8, r8, r0
 8004e08:	e7e9      	b.n	8004dde <__sflush_r+0xda>
 8004e0a:	bf00      	nop
 8004e0c:	dfbffffe 	.word	0xdfbffffe

08004e10 <_fflush_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	690b      	ldr	r3, [r1, #16]
 8004e14:	4605      	mov	r5, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	b913      	cbnz	r3, 8004e20 <_fflush_r+0x10>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	b118      	cbz	r0, 8004e2a <_fflush_r+0x1a>
 8004e22:	6a03      	ldr	r3, [r0, #32]
 8004e24:	b90b      	cbnz	r3, 8004e2a <_fflush_r+0x1a>
 8004e26:	f7ff f923 	bl	8004070 <__sinit>
 8004e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f3      	beq.n	8004e1a <_fflush_r+0xa>
 8004e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e34:	07d0      	lsls	r0, r2, #31
 8004e36:	d404      	bmi.n	8004e42 <_fflush_r+0x32>
 8004e38:	0599      	lsls	r1, r3, #22
 8004e3a:	d402      	bmi.n	8004e42 <_fflush_r+0x32>
 8004e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3e:	f7ff fa3b 	bl	80042b8 <__retarget_lock_acquire_recursive>
 8004e42:	4628      	mov	r0, r5
 8004e44:	4621      	mov	r1, r4
 8004e46:	f7ff ff5d 	bl	8004d04 <__sflush_r>
 8004e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e4c:	07da      	lsls	r2, r3, #31
 8004e4e:	4605      	mov	r5, r0
 8004e50:	d4e4      	bmi.n	8004e1c <_fflush_r+0xc>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	059b      	lsls	r3, r3, #22
 8004e56:	d4e1      	bmi.n	8004e1c <_fflush_r+0xc>
 8004e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5a:	f7ff fa2e 	bl	80042ba <__retarget_lock_release_recursive>
 8004e5e:	e7dd      	b.n	8004e1c <_fflush_r+0xc>

08004e60 <__swbuf_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	460e      	mov	r6, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	4605      	mov	r5, r0
 8004e68:	b118      	cbz	r0, 8004e72 <__swbuf_r+0x12>
 8004e6a:	6a03      	ldr	r3, [r0, #32]
 8004e6c:	b90b      	cbnz	r3, 8004e72 <__swbuf_r+0x12>
 8004e6e:	f7ff f8ff 	bl	8004070 <__sinit>
 8004e72:	69a3      	ldr	r3, [r4, #24]
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	071a      	lsls	r2, r3, #28
 8004e7a:	d525      	bpl.n	8004ec8 <__swbuf_r+0x68>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	b31b      	cbz	r3, 8004ec8 <__swbuf_r+0x68>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	6922      	ldr	r2, [r4, #16]
 8004e84:	1a98      	subs	r0, r3, r2
 8004e86:	6963      	ldr	r3, [r4, #20]
 8004e88:	b2f6      	uxtb	r6, r6
 8004e8a:	4283      	cmp	r3, r0
 8004e8c:	4637      	mov	r7, r6
 8004e8e:	dc04      	bgt.n	8004e9a <__swbuf_r+0x3a>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f7ff ffbc 	bl	8004e10 <_fflush_r>
 8004e98:	b9e0      	cbnz	r0, 8004ed4 <__swbuf_r+0x74>
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	60a3      	str	r3, [r4, #8]
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	6022      	str	r2, [r4, #0]
 8004ea6:	701e      	strb	r6, [r3, #0]
 8004ea8:	6962      	ldr	r2, [r4, #20]
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d004      	beq.n	8004eba <__swbuf_r+0x5a>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	07db      	lsls	r3, r3, #31
 8004eb4:	d506      	bpl.n	8004ec4 <__swbuf_r+0x64>
 8004eb6:	2e0a      	cmp	r6, #10
 8004eb8:	d104      	bne.n	8004ec4 <__swbuf_r+0x64>
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f7ff ffa7 	bl	8004e10 <_fflush_r>
 8004ec2:	b938      	cbnz	r0, 8004ed4 <__swbuf_r+0x74>
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f806 	bl	8004edc <__swsetup_r>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d0d5      	beq.n	8004e80 <__swbuf_r+0x20>
 8004ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed8:	e7f4      	b.n	8004ec4 <__swbuf_r+0x64>
	...

08004edc <__swsetup_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <__swsetup_r+0xac>)
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	b118      	cbz	r0, 8004ef0 <__swsetup_r+0x14>
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <__swsetup_r+0x14>
 8004eec:	f7ff f8c0 	bl	8004070 <__sinit>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ef6:	0718      	lsls	r0, r3, #28
 8004ef8:	d422      	bmi.n	8004f40 <__swsetup_r+0x64>
 8004efa:	06d9      	lsls	r1, r3, #27
 8004efc:	d407      	bmi.n	8004f0e <__swsetup_r+0x32>
 8004efe:	2309      	movs	r3, #9
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e034      	b.n	8004f78 <__swsetup_r+0x9c>
 8004f0e:	0758      	lsls	r0, r3, #29
 8004f10:	d512      	bpl.n	8004f38 <__swsetup_r+0x5c>
 8004f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f14:	b141      	cbz	r1, 8004f28 <__swsetup_r+0x4c>
 8004f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	d002      	beq.n	8004f24 <__swsetup_r+0x48>
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7ff f9cc 	bl	80042bc <_free_r>
 8004f24:	2300      	movs	r3, #0
 8004f26:	6363      	str	r3, [r4, #52]	; 0x34
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	2300      	movs	r3, #0
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f043 0308 	orr.w	r3, r3, #8
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	b94b      	cbnz	r3, 8004f58 <__swsetup_r+0x7c>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4e:	d003      	beq.n	8004f58 <__swsetup_r+0x7c>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f8a7 	bl	80050a6 <__smakebuf_r>
 8004f58:	89a0      	ldrh	r0, [r4, #12]
 8004f5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f5e:	f010 0301 	ands.w	r3, r0, #1
 8004f62:	d00a      	beq.n	8004f7a <__swsetup_r+0x9e>
 8004f64:	2300      	movs	r3, #0
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	6963      	ldr	r3, [r4, #20]
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	61a3      	str	r3, [r4, #24]
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	b943      	cbnz	r3, 8004f84 <__swsetup_r+0xa8>
 8004f72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f76:	d1c4      	bne.n	8004f02 <__swsetup_r+0x26>
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	0781      	lsls	r1, r0, #30
 8004f7c:	bf58      	it	pl
 8004f7e:	6963      	ldrpl	r3, [r4, #20]
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	e7f4      	b.n	8004f6e <__swsetup_r+0x92>
 8004f84:	2000      	movs	r0, #0
 8004f86:	e7f7      	b.n	8004f78 <__swsetup_r+0x9c>
 8004f88:	20000064 	.word	0x20000064

08004f8c <memmove>:
 8004f8c:	4288      	cmp	r0, r1
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	eb01 0402 	add.w	r4, r1, r2
 8004f94:	d902      	bls.n	8004f9c <memmove+0x10>
 8004f96:	4284      	cmp	r4, r0
 8004f98:	4623      	mov	r3, r4
 8004f9a:	d807      	bhi.n	8004fac <memmove+0x20>
 8004f9c:	1e43      	subs	r3, r0, #1
 8004f9e:	42a1      	cmp	r1, r4
 8004fa0:	d008      	beq.n	8004fb4 <memmove+0x28>
 8004fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004faa:	e7f8      	b.n	8004f9e <memmove+0x12>
 8004fac:	4402      	add	r2, r0
 8004fae:	4601      	mov	r1, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d100      	bne.n	8004fb6 <memmove+0x2a>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fbe:	e7f7      	b.n	8004fb0 <memmove+0x24>

08004fc0 <_sbrk_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d06      	ldr	r5, [pc, #24]	; (8004fdc <_sbrk_r+0x1c>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	f7fb fd54 	bl	8000a78 <_sbrk>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_sbrk_r+0x1a>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_sbrk_r+0x1a>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	2000021c 	.word	0x2000021c

08004fe0 <memcpy>:
 8004fe0:	440a      	add	r2, r1
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe8:	d100      	bne.n	8004fec <memcpy+0xc>
 8004fea:	4770      	bx	lr
 8004fec:	b510      	push	{r4, lr}
 8004fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d1f9      	bne.n	8004fee <memcpy+0xe>
 8004ffa:	bd10      	pop	{r4, pc}

08004ffc <_realloc_r>:
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	4680      	mov	r8, r0
 8005002:	4614      	mov	r4, r2
 8005004:	460e      	mov	r6, r1
 8005006:	b921      	cbnz	r1, 8005012 <_realloc_r+0x16>
 8005008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500c:	4611      	mov	r1, r2
 800500e:	f7ff b9c1 	b.w	8004394 <_malloc_r>
 8005012:	b92a      	cbnz	r2, 8005020 <_realloc_r+0x24>
 8005014:	f7ff f952 	bl	80042bc <_free_r>
 8005018:	4625      	mov	r5, r4
 800501a:	4628      	mov	r0, r5
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005020:	f000 f8a0 	bl	8005164 <_malloc_usable_size_r>
 8005024:	4284      	cmp	r4, r0
 8005026:	4607      	mov	r7, r0
 8005028:	d802      	bhi.n	8005030 <_realloc_r+0x34>
 800502a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800502e:	d812      	bhi.n	8005056 <_realloc_r+0x5a>
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f7ff f9ae 	bl	8004394 <_malloc_r>
 8005038:	4605      	mov	r5, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d0ed      	beq.n	800501a <_realloc_r+0x1e>
 800503e:	42bc      	cmp	r4, r7
 8005040:	4622      	mov	r2, r4
 8005042:	4631      	mov	r1, r6
 8005044:	bf28      	it	cs
 8005046:	463a      	movcs	r2, r7
 8005048:	f7ff ffca 	bl	8004fe0 <memcpy>
 800504c:	4631      	mov	r1, r6
 800504e:	4640      	mov	r0, r8
 8005050:	f7ff f934 	bl	80042bc <_free_r>
 8005054:	e7e1      	b.n	800501a <_realloc_r+0x1e>
 8005056:	4635      	mov	r5, r6
 8005058:	e7df      	b.n	800501a <_realloc_r+0x1e>

0800505a <__swhatbuf_r>:
 800505a:	b570      	push	{r4, r5, r6, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	2900      	cmp	r1, #0
 8005064:	b096      	sub	sp, #88	; 0x58
 8005066:	4615      	mov	r5, r2
 8005068:	461e      	mov	r6, r3
 800506a:	da0d      	bge.n	8005088 <__swhatbuf_r+0x2e>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	bf0c      	ite	eq
 8005078:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800507c:	2340      	movne	r3, #64	; 0x40
 800507e:	2000      	movs	r0, #0
 8005080:	6031      	str	r1, [r6, #0]
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	b016      	add	sp, #88	; 0x58
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	466a      	mov	r2, sp
 800508a:	f000 f849 	bl	8005120 <_fstat_r>
 800508e:	2800      	cmp	r0, #0
 8005090:	dbec      	blt.n	800506c <__swhatbuf_r+0x12>
 8005092:	9901      	ldr	r1, [sp, #4]
 8005094:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005098:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800509c:	4259      	negs	r1, r3
 800509e:	4159      	adcs	r1, r3
 80050a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a4:	e7eb      	b.n	800507e <__swhatbuf_r+0x24>

080050a6 <__smakebuf_r>:
 80050a6:	898b      	ldrh	r3, [r1, #12]
 80050a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050aa:	079d      	lsls	r5, r3, #30
 80050ac:	4606      	mov	r6, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	d507      	bpl.n	80050c2 <__smakebuf_r+0x1c>
 80050b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	2301      	movs	r3, #1
 80050bc:	6163      	str	r3, [r4, #20]
 80050be:	b002      	add	sp, #8
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	ab01      	add	r3, sp, #4
 80050c4:	466a      	mov	r2, sp
 80050c6:	f7ff ffc8 	bl	800505a <__swhatbuf_r>
 80050ca:	9900      	ldr	r1, [sp, #0]
 80050cc:	4605      	mov	r5, r0
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff f960 	bl	8004394 <_malloc_r>
 80050d4:	b948      	cbnz	r0, 80050ea <__smakebuf_r+0x44>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	059a      	lsls	r2, r3, #22
 80050dc:	d4ef      	bmi.n	80050be <__smakebuf_r+0x18>
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	e7e3      	b.n	80050b2 <__smakebuf_r+0xc>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	6020      	str	r0, [r4, #0]
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	9b00      	ldr	r3, [sp, #0]
 80050f6:	6163      	str	r3, [r4, #20]
 80050f8:	9b01      	ldr	r3, [sp, #4]
 80050fa:	6120      	str	r0, [r4, #16]
 80050fc:	b15b      	cbz	r3, 8005116 <__smakebuf_r+0x70>
 80050fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f81e 	bl	8005144 <_isatty_r>
 8005108:	b128      	cbz	r0, 8005116 <__smakebuf_r+0x70>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	431d      	orrs	r5, r3
 800511a:	81a5      	strh	r5, [r4, #12]
 800511c:	e7cf      	b.n	80050be <__smakebuf_r+0x18>
	...

08005120 <_fstat_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d07      	ldr	r5, [pc, #28]	; (8005140 <_fstat_r+0x20>)
 8005124:	2300      	movs	r3, #0
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f7fb fc7a 	bl	8000a26 <_fstat>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d102      	bne.n	800513c <_fstat_r+0x1c>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	b103      	cbz	r3, 800513c <_fstat_r+0x1c>
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	bd38      	pop	{r3, r4, r5, pc}
 800513e:	bf00      	nop
 8005140:	2000021c 	.word	0x2000021c

08005144 <_isatty_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_isatty_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fb fc79 	bl	8000a46 <_isatty>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_isatty_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_isatty_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	2000021c 	.word	0x2000021c

08005164 <_malloc_usable_size_r>:
 8005164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005168:	1f18      	subs	r0, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	bfbc      	itt	lt
 800516e:	580b      	ldrlt	r3, [r1, r0]
 8005170:	18c0      	addlt	r0, r0, r3
 8005172:	4770      	bx	lr

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
