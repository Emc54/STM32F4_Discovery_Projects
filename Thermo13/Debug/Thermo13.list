
Thermo13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08007758  08007758  00017758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b24  08007b24  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b2c  08007b2c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000001c4  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000082df  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000194b  00000000  00000000  00028526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000840  00000000  00000000  00029e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000642  00000000  00000000  0002a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020fe0  00000000  00000000  0002acfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000adbc  00000000  00000000  0004bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c45c0  00000000  00000000  00056a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032ec  00000000  00000000  0011b058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0011e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007740 	.word	0x08007740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007740 	.word	0x08007740

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <calc_temp>:
// 1) Convert to characters in ASCII
// Print to the Debug Port
// 2) Convert to a way to display to an LCD Screen.

float calc_temp(uint8_t *rxBuffer)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

uint16_t temp_reading = (((uint16_t) rxBuffer[0] << 8) | rxBuffer[1]);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	817b      	strh	r3, [r7, #10]
int temp;

//Check for signed bit
if(rxBuffer[0]&0x80)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da05      	bge.n	8000ed8 <calc_temp+0x34>
{
 temp =  ((int16_t)temp_reading >> 4);
 8000ecc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ed0:	111b      	asrs	r3, r3, #4
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e003      	b.n	8000ee0 <calc_temp+0x3c>
}
else
{
  temp = (temp_reading>>4);
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	60fb      	str	r3, [r7, #12]
}
return (float)temp*SCALE_FACTOR;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000f0c <calc_temp+0x68>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f10 <calc_temp+0x6c>
 8000ef6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000efa:	eef0 7a66 	vmov.f32	s15, s13
}
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	441c4000 	.word	0x441c4000
 8000f10:	461c4000 	.word	0x461c4000

08000f14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f3c:	e000      	b.n	8000f40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)

{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e009      	b.n	8000f88 <_write+0x26>

    { ITM_SendChar(*ptr++); }
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffc9 	bl	8000f14 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf1      	blt.n	8000f74 <_write+0x12>

     return len;
 8000f90:	687b      	ldr	r3, [r7, #4]

}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09e      	sub	sp, #120	; 0x78
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f000 fadd 	bl	8001560 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f841 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 f8d7 	bl	800115c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fae:	f000 f8a7 	bl	8001100 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8000fb2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2190      	movs	r1, #144	; 0x90
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <main+0x80>)
 8000fc2:	f000 ff85 	bl	8001ed0 <HAL_I2C_Master_Receive>
	  sprintf(log, "I2C Slave Data: 0x%x, 0x%x,\r\n", buf[0], buf[1]);
 8000fc6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000fd0:	1d38      	adds	r0, r7, #4
 8000fd2:	4913      	ldr	r1, [pc, #76]	; (8001020 <main+0x84>)
 8000fd4:	f004 fa58 	bl	8005488 <siprintf>
	  printf(log);
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 f9e6 	bl	80053ac <iprintf>
	  log[0] = '\0';
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	713b      	strb	r3, [r7, #4]
	  temperature = calc_temp(buf);
 8000fe4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5b 	bl	8000ea4 <calc_temp>
 8000fee:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	  printf("Converted Data\r\n");
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <main+0x88>)
 8000ff4:	f004 fa40 	bl	8005478 <puts>
	  sprintf(log, " %.1f deg C\r\n",temperature);
 8000ff8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000ffa:	f7ff faa5 	bl	8000548 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	1d38      	adds	r0, r7, #4
 8001004:	4908      	ldr	r1, [pc, #32]	; (8001028 <main+0x8c>)
 8001006:	f004 fa3f 	bl	8005488 <siprintf>
	  printf(log);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f9cd 	bl	80053ac <iprintf>
	  HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f000 fb15 	bl	8001644 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, THERMO_SLAVE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 800101a:	e7ca      	b.n	8000fb2 <main+0x16>
 800101c:	200001f0 	.word	0x200001f0
 8001020:	08007758 	.word	0x08007758
 8001024:	08007778 	.word	0x08007778
 8001028:	08007788 	.word	0x08007788

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fb1c 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <SystemClock_Config+0xcc>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <SystemClock_Config+0xcc>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <SystemClock_Config+0xcc>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <SystemClock_Config+0xd0>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800109c:	2308      	movs	r3, #8
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ffe0 	bl	8004078 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010be:	f000 f8a5 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2105      	movs	r1, #5
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fa41 	bl	8004568 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010ec:	f000 f88e 	bl	800120c <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3750      	adds	r7, #80	; 0x50
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C1_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C1_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C1_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C1_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x50>)
 800113e:	f000 fd83 	bl	8001c48 <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f860 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001f0 	.word	0x200001f0
 8001154:	40005400 	.word	0x40005400
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xa8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <MX_GPIO_Init+0xa8>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_GPIO_Init+0xa8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xa8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <MX_GPIO_Init+0xa8>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_GPIO_Init+0xa8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011e2:	2304      	movs	r3, #4
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xac>)
 80011f6:	f000 fb8b 	bl	8001910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001256:	2007      	movs	r0, #7
 8001258:	f000 fae8 	bl	800182c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_I2C_MspInit+0xa4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13c      	bne.n	8001304 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = Thermo13_SDA_Pin|Thermo13_SCL_Pin;
 80012a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b8:	2304      	movs	r3, #4
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	; (8001314 <HAL_I2C_MspInit+0xac>)
 80012c4:	f000 fb24 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	201f      	movs	r0, #31
 80012ea:	f000 faaa 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012ee:	201f      	movs	r0, #31
 80012f0:	f000 fac3 	bl	800187a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2020      	movs	r0, #32
 80012fa:	f000 faa2 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012fe:	2020      	movs	r0, #32
 8001300:	f000 fabb 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f94e 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <I2C1_EV_IRQHandler+0x10>)
 8001372:	f000 ffd3 	bl	800231c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001f0 	.word	0x200001f0

08001380 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <I2C1_ER_IRQHandler+0x10>)
 8001386:	f001 f91c 	bl	80025c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001f0 	.word	0x200001f0

08001394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_kill>:

int _kill(int pid, int sig)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ae:	f004 f9b5 	bl	800571c <__errno>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2216      	movs	r2, #22
 80013b6:	601a      	str	r2, [r3, #0]
  return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_exit>:

void _exit (int status)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe7 	bl	80013a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d6:	e7fe      	b.n	80013d6 <_exit+0x12>

080013d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
  }

  return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	605a      	str	r2, [r3, #4]
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_isatty>:

int _isatty(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f004 f936 	bl	800571c <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20020000 	.word	0x20020000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	20000244 	.word	0x20000244
 80014e4:	20000398 	.word	0x20000398

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f004 f8f5 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff fd2d 	bl	8000f9c <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001550:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8001554:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001558:	20000398 	.word	0x20000398

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94f 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe40 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f967 	bl	8001896 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f92f 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	20000248 	.word	0x20000248

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000248 	.word	0x20000248

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <__NVIC_SetPriorityGrouping>:
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00c      	b.n	80018e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2205      	movs	r2, #5
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e16b      	b.n	8001c04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 815a 	bne.w	8001bfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80b4 	beq.w	8001bfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <HAL_GPIO_Init+0x30c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a5f      	ldr	r2, [pc, #380]	; (8001c1c <HAL_GPIO_Init+0x30c>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_GPIO_Init+0x30c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <HAL_GPIO_Init+0x310>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_GPIO_Init+0x314>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d02b      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_GPIO_Init+0x318>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d025      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <HAL_GPIO_Init+0x31c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01f      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0x216>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00d      	beq.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x32c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <HAL_GPIO_Init+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x330>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_GPIO_Init+0x20a>
 8001b16:	2307      	movs	r3, #7
 8001b18:	e00e      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x228>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x310>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae90 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021c00 	.word	0x40021c00
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e12b      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fafa 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cac:	f002 fe54 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d807      	bhi.n	8001ccc <HAL_I2C_Init+0x84>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	; (8001ec0 <HAL_I2C_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e006      	b.n	8001cda <HAL_I2C_Init+0x92>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	; (8001ec4 <HAL_I2C_Init+0x27c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e7      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a78      	ldr	r2, [pc, #480]	; (8001ec8 <HAL_I2C_Init+0x280>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d802      	bhi.n	8001d1c <HAL_I2C_Init+0xd4>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_I2C_Init+0xe8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_I2C_Init+0x284>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	495c      	ldr	r1, [pc, #368]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d819      	bhi.n	8001d84 <HAL_I2C_Init+0x13c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_I2C_Init+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e59      	subs	r1, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	e051      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e04f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_I2C_Init+0x168>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e012      	b.n	8001dd6 <HAL_I2C_Init+0x18e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x196>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e022      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <HAL_I2C_Init+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e58      	subs	r0, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6809      	ldr	r1, [r1, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6911      	ldr	r1, [r2, #16]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	000186a0 	.word	0x000186a0
 8001ec0:	001e847f 	.word	0x001e847f
 8001ec4:	003d08ff 	.word	0x003d08ff
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fba2 	bl	800162c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	f040 820b 	bne.w	800230e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2319      	movs	r3, #25
 8001efe:	2201      	movs	r2, #1
 8001f00:	497c      	ldr	r1, [pc, #496]	; (80020f4 <HAL_I2C_Master_Receive+0x224>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f001 ff3e 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e1fe      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2C_Master_Receive+0x50>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e1f7      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d007      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2222      	movs	r2, #34	; 0x22
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2210      	movs	r2, #16
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_I2C_Master_Receive+0x228>)
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f001 fd82 	bl	8003a98 <I2C_MasterRequestRead>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1b8      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e18c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11b      	bne.n	800200e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e16c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b02      	cmp	r3, #2
 8002014:	d11b      	bne.n	800204e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	e14c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800205c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002074:	e138      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b03      	cmp	r3, #3
 800207c:	f200 80f1 	bhi.w	8002262 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d123      	bne.n	80020d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f001 ff81 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e139      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ce:	e10b      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d14e      	bne.n	8002176 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	2200      	movs	r2, #0
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <HAL_I2C_Master_Receive+0x22c>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f001 fe4e 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e10e      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
 80020f2:	bf00      	nop
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000
 80020fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002174:	e0b8      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2200      	movs	r2, #0
 800217e:	4966      	ldr	r1, [pc, #408]	; (8002318 <HAL_I2C_Master_Receive+0x448>)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f001 fdff 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0bf      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2200      	movs	r2, #0
 80021da:	494f      	ldr	r1, [pc, #316]	; (8002318 <HAL_I2C_Master_Receive+0x448>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f001 fdd1 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e091      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002260:	e042      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 fe94 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e04c      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d118      	bne.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f aec2 	bne.w	8002076 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	4618      	mov	r0, r3
 8002312:	3728      	adds	r7, #40	; 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	00010004 	.word	0x00010004

0800231c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d003      	beq.n	8002354 <HAL_I2C_EV_IRQHandler+0x38>
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	f040 80b1 	bne.w	80024b6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_I2C_EV_IRQHandler+0x6e>
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002374:	d003      	beq.n	800237e <HAL_I2C_EV_IRQHandler+0x62>
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800237c:	d101      	bne.n	8002382 <HAL_I2C_EV_IRQHandler+0x66>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_I2C_EV_IRQHandler+0x68>
 8002382:	2300      	movs	r3, #0
 8002384:	2b01      	cmp	r3, #1
 8002386:	f000 8114 	beq.w	80025b2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x90>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f001 fe4e 	bl	8004040 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fd5e 	bl	8002e66 <I2C_Master_SB>
 80023aa:	e083      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_EV_IRQHandler+0xac>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fdd6 	bl	8002f72 <I2C_Master_ADD10>
 80023c6:	e075      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_I2C_EV_IRQHandler+0xc8>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fdf2 	bl	8002fc6 <I2C_Master_ADDR>
 80023e2:	e067      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d036      	beq.n	800245c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023fc:	f000 80db 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x10a>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x10a>
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9d6 	bl	80027d0 <I2C_MasterTransmit_TXE>
 8002424:	e046      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80c2 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80bc 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800243e:	7bbb      	ldrb	r3, [r7, #14]
 8002440:	2b21      	cmp	r3, #33	; 0x21
 8002442:	d103      	bne.n	800244c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa5f 	bl	8002908 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800244a:	e0b4      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	f040 80b1 	bne.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 facd 	bl	80029f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800245a:	e0ac      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246a:	f000 80a4 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_I2C_EV_IRQHandler+0x178>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_I2C_EV_IRQHandler+0x178>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fb45 	bl	8002b1c <I2C_MasterReceive_RXNE>
 8002492:	e00f      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 808b 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8085 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fbf0 	bl	8002c92 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b2:	e080      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80024b4:	e07f      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e007      	b.n	80024d8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d011      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x1ea>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 ffb0 	bl	8003464 <I2C_Slave_ADDR>
 8002504:	e05a      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_I2C_EV_IRQHandler+0x206>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ffea 	bl	80034f4 <I2C_Slave_STOPF>
 8002520:	e04c      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002522:	7bbb      	ldrb	r3, [r7, #14]
 8002524:	2b21      	cmp	r3, #33	; 0x21
 8002526:	d002      	beq.n	800252e <HAL_I2C_EV_IRQHandler+0x212>
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	2b29      	cmp	r3, #41	; 0x29
 800252c:	d120      	bne.n	8002570 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_I2C_EV_IRQHandler+0x238>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_I2C_EV_IRQHandler+0x238>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fecb 	bl	80032e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002552:	e032      	b.n	80025ba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02d      	beq.n	80025ba <HAL_I2C_EV_IRQHandler+0x29e>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d028      	beq.n	80025ba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fefa 	bl	8003362 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800256e:	e024      	b.n	80025ba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0x27a>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0x27a>
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 ff08 	bl	80033a4 <I2C_SlaveReceive_RXNE>
 8002594:	e012      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 ff38 	bl	8003420 <I2C_SlaveReceive_BTF>
 80025b0:	e004      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08a      	sub	sp, #40	; 0x28
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_I2C_ER_IRQHandler+0x4a>
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800260a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_ER_IRQHandler+0x70>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002630:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03e      	beq.n	80026ba <HAL_I2C_ER_IRQHandler+0xf8>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d039      	beq.n	80026ba <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002660:	7ebb      	ldrb	r3, [r7, #26]
 8002662:	2b20      	cmp	r3, #32
 8002664:	d112      	bne.n	800268c <HAL_I2C_ER_IRQHandler+0xca>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_I2C_ER_IRQHandler+0xca>
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b21      	cmp	r3, #33	; 0x21
 8002670:	d008      	beq.n	8002684 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b29      	cmp	r3, #41	; 0x29
 8002676:	d005      	beq.n	8002684 <HAL_I2C_ER_IRQHandler+0xc2>
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b28      	cmp	r3, #40	; 0x28
 800267c:	d106      	bne.n	800268c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b21      	cmp	r3, #33	; 0x21
 8002682:	d103      	bne.n	800268c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f865 	bl	8003754 <I2C_Slave_AF>
 800268a:	e016      	b.n	80026ba <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002694:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800269e:	7efb      	ldrb	r3, [r7, #27]
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d002      	beq.n	80026aa <HAL_I2C_ER_IRQHandler+0xe8>
 80026a4:	7efb      	ldrb	r3, [r7, #27]
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_I2C_ER_IRQHandler+0x11e>
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80026de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 f89e 	bl	8003834 <I2C_ITError>
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
 800275c:	4613      	mov	r3, r2
 800275e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d150      	bne.n	8002898 <I2C_MasterTransmit_TXE+0xc8>
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b21      	cmp	r3, #33	; 0x21
 80027fa:	d14d      	bne.n	8002898 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d01d      	beq.n	800283e <I2C_MasterTransmit_TXE+0x6e>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b20      	cmp	r3, #32
 8002806:	d01a      	beq.n	800283e <I2C_MasterTransmit_TXE+0x6e>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800280e:	d016      	beq.n	800283e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800281e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2211      	movs	r2, #17
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff62 	bl	8002700 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800283c:	e060      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800284c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d107      	bne.n	8002888 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff7d 	bl	8002780 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002886:	e03b      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff35 	bl	8002700 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002896:	e033      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b21      	cmp	r3, #33	; 0x21
 800289c:	d005      	beq.n	80028aa <I2C_MasterTransmit_TXE+0xda>
 800289e:	7bbb      	ldrb	r3, [r7, #14]
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d12d      	bne.n	8002900 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b22      	cmp	r3, #34	; 0x22
 80028a8:	d12a      	bne.n	8002900 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028c4:	e01c      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d103      	bne.n	80028da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f88e 	bl	80029f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80028d8:	e012      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028fe:	e7ff      	b.n	8002900 <I2C_MasterTransmit_TXE+0x130>
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b21      	cmp	r3, #33	; 0x21
 8002920:	d164      	bne.n	80029ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d012      	beq.n	8002952 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002950:	e04c      	b.n	80029ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d01d      	beq.n	8002994 <I2C_MasterTransmit_BTF+0x8c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b20      	cmp	r3, #32
 800295c:	d01a      	beq.n	8002994 <I2C_MasterTransmit_BTF+0x8c>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002964:	d016      	beq.n	8002994 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002974:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2211      	movs	r2, #17
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff feb7 	bl	8002700 <HAL_I2C_MasterTxCpltCallback>
}
 8002992:	e02b      	b.n	80029ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d107      	bne.n	80029de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fed2 	bl	8002780 <HAL_I2C_MemTxCpltCallback>
}
 80029dc:	e006      	b.n	80029ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fe8a 	bl	8002700 <HAL_I2C_MasterTxCpltCallback>
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10b      	bne.n	8002a2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002a2a:	e073      	b.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	121b      	asrs	r3, r3, #8
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a46:	e065      	b.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10b      	bne.n	8002a68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a66:	e055      	b.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d151      	bne.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b22      	cmp	r3, #34	; 0x22
 8002a74:	d10d      	bne.n	8002a92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a90:	e040      	b.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b21      	cmp	r3, #33	; 0x21
 8002aa0:	d112      	bne.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ac6:	e025      	b.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d120      	bne.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b21      	cmp	r3, #33	; 0x21
 8002ad6:	d11d      	bne.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fe36 	bl	8002780 <HAL_I2C_MemTxCpltCallback>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b22      	cmp	r3, #34	; 0x22
 8002b2e:	f040 80ac 	bne.w	8002c8a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d921      	bls.n	8002b84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	f040 808c 	bne.w	8002c8a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002b82:	e082      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d075      	beq.n	8002c78 <I2C_MasterReceive_RXNE+0x15c>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <I2C_MasterReceive_RXNE+0x7c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d16f      	bne.n	8002c78 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f001 f9c9 	bl	8003f30 <I2C_WaitOnSTOPRequestThroughIT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d142      	bne.n	8002c2a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10a      	bne.n	8002c14 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fdc1 	bl	8002794 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c12:	e03a      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2212      	movs	r2, #18
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fd76 	bl	8002714 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c28:	e02f      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fd99 	bl	80027a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c76:	e008      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	605a      	str	r2, [r3, #4]
}
 8002c88:	e7ff      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x16e>
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d11b      	bne.n	8002ce2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ce0:	e0bd      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d129      	bne.n	8002d40 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d00a      	beq.n	8002d18 <I2C_MasterReceive_BTF+0x86>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d007      	beq.n	8002d18 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d3e:	e08e      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d176      	bne.n	8002e38 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d002      	beq.n	8002d56 <I2C_MasterReceive_BTF+0xc4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e019      	b.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d002      	beq.n	8002d74 <I2C_MasterReceive_BTF+0xe2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d108      	bne.n	8002d86 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e00a      	b.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d007      	beq.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002df6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d10a      	bne.n	8002e22 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fcba 	bl	8002794 <HAL_I2C_MemRxCpltCallback>
}
 8002e20:	e01d      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2212      	movs	r2, #18
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fc6f 	bl	8002714 <HAL_I2C_MasterRxCpltCallback>
}
 8002e36:	e012      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d117      	bne.n	8002eaa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e92:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e94:	e067      	b.n	8002f66 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
}
 8002ea8:	e05d      	b.n	8002f66 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb2:	d133      	bne.n	8002f1c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b21      	cmp	r3, #33	; 0x21
 8002ebe:	d109      	bne.n	8002ed4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	e008      	b.n	8002ee6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <I2C_Master_SB+0x92>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <I2C_Master_SB+0x100>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02d      	beq.n	8002f66 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f18:	605a      	str	r2, [r3, #4]
}
 8002f1a:	e024      	b.n	8002f66 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	11db      	asrs	r3, r3, #7
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0306 	and.w	r3, r3, #6
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f063 030f 	orn	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
}
 8002f40:	e011      	b.n	8002f66 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	11db      	asrs	r3, r3, #7
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0306 	and.w	r3, r3, #6
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f063 030e 	orn	r3, r3, #14
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <I2C_Master_ADD10+0x26>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00c      	beq.n	8002fba <I2C_Master_ADD10+0x48>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb8:	605a      	str	r2, [r3, #4]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b091      	sub	sp, #68	; 0x44
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b22      	cmp	r3, #34	; 0x22
 8002fee:	f040 8169 	bne.w	80032c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <I2C_Master_ADDR+0x54>
 8002ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d10b      	bne.n	800301a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	e160      	b.n	80032dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11d      	bne.n	800305e <I2C_Master_ADDR+0x98>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800302a:	d118      	bne.n	800305e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
 800305c:	e13e      	b.n	80032dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d113      	bne.n	8003090 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e115      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 808a 	bne.w	80031b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a2:	d137      	bne.n	8003114 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c2:	d113      	bne.n	80030ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	e0e7      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e0d3      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	2b08      	cmp	r3, #8
 8003118:	d02e      	beq.n	8003178 <I2C_Master_ADDR+0x1b2>
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	2b20      	cmp	r3, #32
 800311e:	d02b      	beq.n	8003178 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	2b12      	cmp	r3, #18
 8003124:	d102      	bne.n	800312c <I2C_Master_ADDR+0x166>
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	2b01      	cmp	r3, #1
 800312a:	d125      	bne.n	8003178 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	2b04      	cmp	r3, #4
 8003130:	d00e      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	2b02      	cmp	r3, #2
 8003136:	d00b      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	2b10      	cmp	r3, #16
 800313c:	d008      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800315e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	e0a1      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e085      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d14d      	bne.n	8003256 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d016      	beq.n	80031ee <I2C_Master_ADDR+0x228>
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d013      	beq.n	80031ee <I2C_Master_ADDR+0x228>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d010      	beq.n	80031ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e007      	b.n	80031fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d117      	bne.n	800323e <I2C_Master_ADDR+0x278>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003214:	d00b      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b01      	cmp	r3, #1
 800321a:	d008      	beq.n	800322e <I2C_Master_ADDR+0x268>
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b08      	cmp	r3, #8
 8003220:	d005      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b10      	cmp	r3, #16
 8003226:	d002      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	2b20      	cmp	r3, #32
 800322c:	d107      	bne.n	800323e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800323c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	e032      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003274:	d117      	bne.n	80032a6 <I2C_Master_ADDR+0x2e0>
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800327c:	d00b      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	2b01      	cmp	r3, #1
 8003282:	d008      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	2b08      	cmp	r3, #8
 8003288:	d005      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b10      	cmp	r3, #16
 800328e:	d002      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	2b20      	cmp	r3, #32
 8003294:	d107      	bne.n	80032a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032c2:	e00b      	b.n	80032dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	e7ff      	b.n	80032dc <I2C_Master_ADDR+0x316>
 80032dc:	bf00      	nop
 80032de:	3744      	adds	r7, #68	; 0x44
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02b      	beq.n	800335a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d114      	bne.n	800335a <I2C_SlaveTransmit_TXE+0x72>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b29      	cmp	r3, #41	; 0x29
 8003334:	d111      	bne.n	800335a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2228      	movs	r2, #40	; 0x28
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff f9e7 	bl	8002728 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02c      	beq.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d114      	bne.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b2a      	cmp	r3, #42	; 0x2a
 80033f2:	d111      	bne.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2222      	movs	r2, #34	; 0x22
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2228      	movs	r2, #40	; 0x28
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff f992 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800347e:	2b28      	cmp	r3, #40	; 0x28
 8003480:	d125      	bne.n	80034ce <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	81bb      	strh	r3, [r7, #12]
 80034b0:	e002      	b.n	80034b8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034c0:	89ba      	ldrh	r2, [r7, #12]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff f942 	bl	8002750 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034cc:	e00e      	b.n	80034ec <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003512:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d172      	bne.n	8003638 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b22      	cmp	r3, #34	; 0x22
 8003556:	d002      	beq.n	800355e <I2C_Slave_STOPF+0x6a>
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b2a      	cmp	r3, #42	; 0x2a
 800355c:	d135      	bne.n	80035ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003590:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe f9ab 	bl	80018f2 <HAL_DMA_GetState>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d049      	beq.n	8003636 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a69      	ldr	r2, [pc, #420]	; (800374c <I2C_Slave_STOPF+0x258>)
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f97d 	bl	80018ae <HAL_DMA_Abort_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03d      	beq.n	8003636 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c4:	4610      	mov	r0, r2
 80035c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035c8:	e035      	b.n	8003636 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe f975 	bl	80018f2 <HAL_DMA_GetState>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d014      	beq.n	8003638 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	4a4e      	ldr	r2, [pc, #312]	; (800374c <I2C_Slave_STOPF+0x258>)
 8003614:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe f947 	bl	80018ae <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
 8003634:	e000      	b.n	8003638 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003636:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03e      	beq.n	80036c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d112      	bne.n	8003676 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d112      	bne.n	80036aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f8b3 	bl	8003834 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80036ce:	e039      	b.n	8003744 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b2a      	cmp	r3, #42	; 0x2a
 80036d4:	d109      	bne.n	80036ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2228      	movs	r2, #40	; 0x28
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff f829 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b28      	cmp	r3, #40	; 0x28
 80036f4:	d111      	bne.n	800371a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <I2C_Slave_STOPF+0x25c>)
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff f82a 	bl	800276c <HAL_I2C_ListenCpltCallback>
}
 8003718:	e014      	b.n	8003744 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	2b22      	cmp	r3, #34	; 0x22
 8003720:	d002      	beq.n	8003728 <I2C_Slave_STOPF+0x234>
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b22      	cmp	r3, #34	; 0x22
 8003726:	d10d      	bne.n	8003744 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fffc 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	08003c35 	.word	0x08003c35
 8003750:	ffff0000 	.word	0xffff0000

08003754 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d002      	beq.n	8003776 <I2C_Slave_AF+0x22>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d129      	bne.n	80037ca <I2C_Slave_AF+0x76>
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b28      	cmp	r3, #40	; 0x28
 800377a:	d126      	bne.n	80037ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <I2C_Slave_AF+0xdc>)
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003790:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe ffd2 	bl	800276c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80037c8:	e02e      	b.n	8003828 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b21      	cmp	r3, #33	; 0x21
 80037ce:	d126      	bne.n	800381e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <I2C_Slave_AF+0xdc>)
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2221      	movs	r2, #33	; 0x21
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003804:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe ff86 	bl	8002728 <HAL_I2C_SlaveTxCpltCallback>
}
 800381c:	e004      	b.n	8003828 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003826:	615a      	str	r2, [r3, #20]
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	ffff0000 	.word	0xffff0000

08003834 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	2b10      	cmp	r3, #16
 8003850:	d002      	beq.n	8003858 <I2C_ITError+0x24>
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d10a      	bne.n	800386e <I2C_ITError+0x3a>
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b22      	cmp	r3, #34	; 0x22
 800385c:	d107      	bne.n	800386e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003874:	2b28      	cmp	r3, #40	; 0x28
 8003876:	d107      	bne.n	8003888 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2228      	movs	r2, #40	; 0x28
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003886:	e015      	b.n	80038b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d00a      	beq.n	80038ae <I2C_ITError+0x7a>
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b60      	cmp	r3, #96	; 0x60
 800389c:	d007      	beq.n	80038ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c2:	d162      	bne.n	800398a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d020      	beq.n	8003924 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <I2C_ITError+0x25c>)
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd ffdd 	bl	80018ae <HAL_DMA_Abort_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8089 	beq.w	8003a0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391e:	4610      	mov	r0, r2
 8003920:	4798      	blx	r3
 8003922:	e074      	b.n	8003a0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	4a59      	ldr	r2, [pc, #356]	; (8003a90 <I2C_ITError+0x25c>)
 800392a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd ffbc 	bl	80018ae <HAL_DMA_Abort_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d068      	beq.n	8003a0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d10b      	bne.n	8003962 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003984:	4610      	mov	r0, r2
 8003986:	4798      	blx	r3
 8003988:	e041      	b.n	8003a0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b60      	cmp	r3, #96	; 0x60
 8003994:	d125      	bne.n	80039e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d10b      	bne.n	80039ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe feee 	bl	80027bc <HAL_I2C_AbortCpltCallback>
 80039e0:	e015      	b.n	8003a0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d10b      	bne.n	8003a08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fe fecd 	bl	80027a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d113      	bne.n	8003a88 <I2C_ITError+0x254>
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b28      	cmp	r3, #40	; 0x28
 8003a64:	d110      	bne.n	8003a88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <I2C_ITError+0x260>)
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fe72 	bl	800276c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08003c35 	.word	0x08003c35
 8003a94:	ffff0000 	.word	0xffff0000

08003a98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d006      	beq.n	8003ad2 <I2C_MasterRequestRead+0x3a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d003      	beq.n	8003ad2 <I2C_MasterRequestRead+0x3a>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e00b      	b.n	8003afc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b11      	cmp	r3, #17
 8003aea:	d107      	bne.n	8003afc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f93b 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d103      	bne.n	8003b2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e079      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b38:	d108      	bne.n	8003b4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]
 8003b4a:	e05f      	b.n	8003c0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b4c:	897b      	ldrh	r3, [r7, #10]
 8003b4e:	11db      	asrs	r3, r3, #7
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 030f 	orn	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4930      	ldr	r1, [pc, #192]	; (8003c2c <I2C_MasterRequestRead+0x194>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f961 	bl	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e054      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4929      	ldr	r1, [pc, #164]	; (8003c30 <I2C_MasterRequestRead+0x198>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f951 	bl	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e044      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f8d9 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	d103      	bne.n	8003bf0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e017      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	11db      	asrs	r3, r3, #7
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 030e 	orn	r3, r3, #14
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4907      	ldr	r1, [pc, #28]	; (8003c30 <I2C_MasterRequestRead+0x198>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f90d 	bl	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	00010008 	.word	0x00010008
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c4e:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <I2C_DMAAbort+0x148>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <I2C_DMAAbort+0x14c>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0a1a      	lsrs	r2, r3, #8
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00da      	lsls	r2, r3, #3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0220 	orr.w	r2, r3, #32
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c7a:	e00a      	b.n	8003c92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d0ea      	beq.n	8003c68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	2200      	movs	r2, #0
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d10e      	bne.n	8003d22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7fe fd4e 	bl	80027bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d20:	e027      	b.n	8003d72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d28:	2b28      	cmp	r3, #40	; 0x28
 8003d2a:	d117      	bne.n	8003d5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2228      	movs	r2, #40	; 0x28
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d5a:	e007      	b.n	8003d6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7fe fd1b 	bl	80027a8 <HAL_I2C_ErrorCallback>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	14f8b589 	.word	0x14f8b589

08003d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d94:	e025      	b.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d021      	beq.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fd fc45 	bl	800162c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e023      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10d      	bne.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	e00c      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d0b6      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e40:	e051      	b.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d123      	bne.n	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e046      	b.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d021      	beq.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fd fbc3 	bl	800162c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d116      	bne.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e020      	b.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10c      	bne.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e00b      	b.n	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d18d      	bne.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	0a1a      	lsrs	r2, r3, #8
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e008      	b.n	8003f80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d0e9      	beq.n	8003f52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	14f8b589 	.word	0x14f8b589

08003f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa0:	e042      	b.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d119      	bne.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0210 	mvn.w	r2, #16
 8003fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e029      	b.n	8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fd fb22 	bl	800162c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d1b5      	bne.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004050:	d103      	bne.n	800405a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004058:	e007      	b.n	800406a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004062:	d102      	bne.n	800406a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e267      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d075      	beq.n	8004182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004096:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d00c      	beq.n	80040bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d112      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b82      	ldr	r3, [pc, #520]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ba:	d10b      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	4b7e      	ldr	r3, [pc, #504]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05b      	beq.n	8004180 <HAL_RCC_OscConfig+0x108>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d157      	bne.n	8004180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e242      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d106      	bne.n	80040ec <HAL_RCC_OscConfig+0x74>
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e01d      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x98>
 80040f6:	4b70      	ldr	r3, [pc, #448]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6f      	ldr	r2, [pc, #444]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6c      	ldr	r2, [pc, #432]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 8004110:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a68      	ldr	r2, [pc, #416]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fa7c 	bl	800162c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fa78 	bl	800162c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e207      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0xc0>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fa68 	bl	800162c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd fa64 	bl	800162c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1f3      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	4b51      	ldr	r3, [pc, #324]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0xe8>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d063      	beq.n	8004256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418e:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d11c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d116      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e1c7      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	e03a      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e8:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCC_OscConfig+0x244>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fa1d 	bl	800162c <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fd fa19 	bl	800162c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1a8      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004208:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4925      	ldr	r1, [pc, #148]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]
 8004228:	e015      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_RCC_OscConfig+0x244>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd f9fc 	bl	800162c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004238:	f7fd f9f8 	bl	800162c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e187      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d036      	beq.n	80042d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d016      	beq.n	8004298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_RCC_OscConfig+0x248>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fd f9dc 	bl	800162c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004278:	f7fd f9d8 	bl	800162c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e167      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_OscConfig+0x240>)
 800428c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x200>
 8004296:	e01b      	b.n	80042d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_OscConfig+0x248>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429e:	f7fd f9c5 	bl	800162c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	e00e      	b.n	80042c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fd f9c1 	bl	800162c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d907      	bls.n	80042c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e150      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
 80042b8:	40023800 	.word	0x40023800
 80042bc:	42470000 	.word	0x42470000
 80042c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ea      	bne.n	80042a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8097 	beq.w	800440c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e2:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b7d      	ldr	r3, [pc, #500]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a7c      	ldr	r2, [pc, #496]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
 80042fe:	4b7a      	ldr	r3, [pc, #488]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b77      	ldr	r3, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x474>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b74      	ldr	r3, [pc, #464]	; (80044ec <HAL_RCC_OscConfig+0x474>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a73      	ldr	r2, [pc, #460]	; (80044ec <HAL_RCC_OscConfig+0x474>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fd f981 	bl	800162c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fd f97d 	bl	800162c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e10c      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_OscConfig+0x474>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x2ea>
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a63      	ldr	r2, [pc, #396]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	e01c      	b.n	800439c <HAL_RCC_OscConfig+0x324>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b05      	cmp	r3, #5
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x30c>
 800436a:	4b5f      	ldr	r3, [pc, #380]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a5e      	ldr	r2, [pc, #376]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a5b      	ldr	r2, [pc, #364]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0x324>
 8004384:	4b58      	ldr	r3, [pc, #352]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a57      	ldr	r2, [pc, #348]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	4b55      	ldr	r3, [pc, #340]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a54      	ldr	r2, [pc, #336]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004396:	f023 0304 	bic.w	r3, r3, #4
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd f942 	bl	800162c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd f93e 	bl	800162c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0cb      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RCC_OscConfig+0x334>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d0:	f7fd f92c 	bl	800162c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd f928 	bl	800162c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0b5      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ee:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1ee      	bne.n	80043d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a1 	beq.w	8004558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004416:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b08      	cmp	r3, #8
 8004420:	d05c      	beq.n	80044dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d141      	bne.n	80044ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCC_OscConfig+0x478>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd f8fc 	bl	800162c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd f8f8 	bl	800162c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e087      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	491b      	ldr	r1, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x478>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fd f8d1 	bl	800162c <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448e:	f7fd f8cd 	bl	800162c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e05c      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x416>
 80044ac:	e054      	b.n	8004558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <HAL_RCC_OscConfig+0x478>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd f8ba 	bl	800162c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd f8b6 	bl	800162c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e045      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x444>
 80044da:	e03d      	b.n	8004558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e038      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40007000 	.word	0x40007000
 80044f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x4ec>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d028      	beq.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d121      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d11a      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800452a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452c:	4293      	cmp	r3, r2
 800452e:	d111      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	3b01      	subs	r3, #1
 800453e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0cc      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d90c      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d044      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e067      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4934      	ldr	r1, [pc, #208]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fc ffe8 	bl	800162c <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fc ffe4 	bl	800162c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e04f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d20c      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc ff48 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
 8004728:	08007798 	.word	0x08007798
 800472c:	20000000 	.word	0x20000000
 8004730:	20000004 	.word	0x20000004

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004738:	b094      	sub	sp, #80	; 0x50
 800473a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	647b      	str	r3, [r7, #68]	; 0x44
 8004740:	2300      	movs	r3, #0
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	2300      	movs	r3, #0
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474c:	4b79      	ldr	r3, [pc, #484]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d00d      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x40>
 8004758:	2b08      	cmp	r3, #8
 800475a:	f200 80e1 	bhi.w	8004920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x34>
 8004762:	2b04      	cmp	r3, #4
 8004764:	d003      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x3a>
 8004766:	e0db      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCC_GetSysClockFreq+0x204>)
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800476c:	e0db      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476e:	4b73      	ldr	r3, [pc, #460]	; (800493c <HAL_RCC_GetSysClockFreq+0x208>)
 8004770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004772:	e0d8      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477e:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d063      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	2200      	movs	r2, #0
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
 8004794:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
 80047a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	0159      	lsls	r1, r3, #5
 80047b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b8:	0150      	lsls	r0, r2, #5
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4621      	mov	r1, r4
 80047c0:	1a51      	subs	r1, r2, r1
 80047c2:	6139      	str	r1, [r7, #16]
 80047c4:	4629      	mov	r1, r5
 80047c6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d8:	4659      	mov	r1, fp
 80047da:	018b      	lsls	r3, r1, #6
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e2:	4651      	mov	r1, sl
 80047e4:	018a      	lsls	r2, r1, #6
 80047e6:	4651      	mov	r1, sl
 80047e8:	ebb2 0801 	subs.w	r8, r2, r1
 80047ec:	4659      	mov	r1, fp
 80047ee:	eb63 0901 	sbc.w	r9, r3, r1
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004806:	4690      	mov	r8, r2
 8004808:	4699      	mov	r9, r3
 800480a:	4623      	mov	r3, r4
 800480c:	eb18 0303 	adds.w	r3, r8, r3
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	462b      	mov	r3, r5
 8004814:	eb49 0303 	adc.w	r3, r9, r3
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004826:	4629      	mov	r1, r5
 8004828:	024b      	lsls	r3, r1, #9
 800482a:	4621      	mov	r1, r4
 800482c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004830:	4621      	mov	r1, r4
 8004832:	024a      	lsls	r2, r1, #9
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	2200      	movs	r2, #0
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
 800483e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004844:	f7fc f9b0 	bl	8000ba8 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	e058      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004852:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	2200      	movs	r2, #0
 800485a:	4618      	mov	r0, r3
 800485c:	4611      	mov	r1, r2
 800485e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	2300      	movs	r3, #0
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	f04f 0000 	mov.w	r0, #0
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	0159      	lsls	r1, r3, #5
 800487a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487e:	0150      	lsls	r0, r2, #5
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4641      	mov	r1, r8
 8004886:	ebb2 0a01 	subs.w	sl, r2, r1
 800488a:	4649      	mov	r1, r9
 800488c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800489c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a4:	ebb2 040a 	subs.w	r4, r2, sl
 80048a8:	eb63 050b 	sbc.w	r5, r3, fp
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	00eb      	lsls	r3, r5, #3
 80048b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ba:	00e2      	lsls	r2, r4, #3
 80048bc:	4614      	mov	r4, r2
 80048be:	461d      	mov	r5, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	18e3      	adds	r3, r4, r3
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	464b      	mov	r3, r9
 80048c8:	eb45 0303 	adc.w	r3, r5, r3
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048da:	4629      	mov	r1, r5
 80048dc:	028b      	lsls	r3, r1, #10
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e4:	4621      	mov	r1, r4
 80048e6:	028a      	lsls	r2, r1, #10
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	2200      	movs	r2, #0
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	61fa      	str	r2, [r7, #28]
 80048f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f8:	f7fc f956 	bl	8000ba8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	3301      	adds	r3, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800491e:	e002      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetSysClockFreq+0x204>)
 8004922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004928:	4618      	mov	r0, r3
 800492a:	3750      	adds	r7, #80	; 0x50
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400
 800493c:	007a1200 	.word	0x007a1200

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_GetHCLKFreq+0x14>)
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000000 	.word	0x20000000

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800495c:	f7ff fff0 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK1Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	080077a8 	.word	0x080077a8

08004980 <__cvt>:
 8004980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	ec55 4b10 	vmov	r4, r5, d0
 8004988:	2d00      	cmp	r5, #0
 800498a:	460e      	mov	r6, r1
 800498c:	4619      	mov	r1, r3
 800498e:	462b      	mov	r3, r5
 8004990:	bfbb      	ittet	lt
 8004992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004996:	461d      	movlt	r5, r3
 8004998:	2300      	movge	r3, #0
 800499a:	232d      	movlt	r3, #45	; 0x2d
 800499c:	700b      	strb	r3, [r1, #0]
 800499e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049a4:	4691      	mov	r9, r2
 80049a6:	f023 0820 	bic.w	r8, r3, #32
 80049aa:	bfbc      	itt	lt
 80049ac:	4622      	movlt	r2, r4
 80049ae:	4614      	movlt	r4, r2
 80049b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049b4:	d005      	beq.n	80049c2 <__cvt+0x42>
 80049b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049ba:	d100      	bne.n	80049be <__cvt+0x3e>
 80049bc:	3601      	adds	r6, #1
 80049be:	2102      	movs	r1, #2
 80049c0:	e000      	b.n	80049c4 <__cvt+0x44>
 80049c2:	2103      	movs	r1, #3
 80049c4:	ab03      	add	r3, sp, #12
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	ab02      	add	r3, sp, #8
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	ec45 4b10 	vmov	d0, r4, r5
 80049d0:	4653      	mov	r3, sl
 80049d2:	4632      	mov	r2, r6
 80049d4:	f000 ff58 	bl	8005888 <_dtoa_r>
 80049d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049dc:	4607      	mov	r7, r0
 80049de:	d102      	bne.n	80049e6 <__cvt+0x66>
 80049e0:	f019 0f01 	tst.w	r9, #1
 80049e4:	d022      	beq.n	8004a2c <__cvt+0xac>
 80049e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ea:	eb07 0906 	add.w	r9, r7, r6
 80049ee:	d110      	bne.n	8004a12 <__cvt+0x92>
 80049f0:	783b      	ldrb	r3, [r7, #0]
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d10a      	bne.n	8004a0c <__cvt+0x8c>
 80049f6:	2200      	movs	r2, #0
 80049f8:	2300      	movs	r3, #0
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fc f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a02:	b918      	cbnz	r0, 8004a0c <__cvt+0x8c>
 8004a04:	f1c6 0601 	rsb	r6, r6, #1
 8004a08:	f8ca 6000 	str.w	r6, [sl]
 8004a0c:	f8da 3000 	ldr.w	r3, [sl]
 8004a10:	4499      	add	r9, r3
 8004a12:	2200      	movs	r2, #0
 8004a14:	2300      	movs	r3, #0
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fc f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a1e:	b108      	cbz	r0, 8004a24 <__cvt+0xa4>
 8004a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a24:	2230      	movs	r2, #48	; 0x30
 8004a26:	9b03      	ldr	r3, [sp, #12]
 8004a28:	454b      	cmp	r3, r9
 8004a2a:	d307      	bcc.n	8004a3c <__cvt+0xbc>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a30:	1bdb      	subs	r3, r3, r7
 8004a32:	4638      	mov	r0, r7
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	b004      	add	sp, #16
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	9103      	str	r1, [sp, #12]
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e7f0      	b.n	8004a26 <__cvt+0xa6>

08004a44 <__exponent>:
 8004a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a46:	4603      	mov	r3, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	4249      	neglt	r1, r1
 8004a4e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a52:	bfb4      	ite	lt
 8004a54:	222d      	movlt	r2, #45	; 0x2d
 8004a56:	222b      	movge	r2, #43	; 0x2b
 8004a58:	2909      	cmp	r1, #9
 8004a5a:	7042      	strb	r2, [r0, #1]
 8004a5c:	dd2a      	ble.n	8004ab4 <__exponent+0x70>
 8004a5e:	f10d 0207 	add.w	r2, sp, #7
 8004a62:	4617      	mov	r7, r2
 8004a64:	260a      	movs	r6, #10
 8004a66:	4694      	mov	ip, r2
 8004a68:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a6c:	fb06 1415 	mls	r4, r6, r5, r1
 8004a70:	3430      	adds	r4, #48	; 0x30
 8004a72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a76:	460c      	mov	r4, r1
 8004a78:	2c63      	cmp	r4, #99	; 0x63
 8004a7a:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a7e:	4629      	mov	r1, r5
 8004a80:	dcf1      	bgt.n	8004a66 <__exponent+0x22>
 8004a82:	3130      	adds	r1, #48	; 0x30
 8004a84:	f1ac 0402 	sub.w	r4, ip, #2
 8004a88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a8c:	1c41      	adds	r1, r0, #1
 8004a8e:	4622      	mov	r2, r4
 8004a90:	42ba      	cmp	r2, r7
 8004a92:	d30a      	bcc.n	8004aaa <__exponent+0x66>
 8004a94:	f10d 0209 	add.w	r2, sp, #9
 8004a98:	eba2 020c 	sub.w	r2, r2, ip
 8004a9c:	42bc      	cmp	r4, r7
 8004a9e:	bf88      	it	hi
 8004aa0:	2200      	movhi	r2, #0
 8004aa2:	4413      	add	r3, r2
 8004aa4:	1a18      	subs	r0, r3, r0
 8004aa6:	b003      	add	sp, #12
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004aae:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ab2:	e7ed      	b.n	8004a90 <__exponent+0x4c>
 8004ab4:	2330      	movs	r3, #48	; 0x30
 8004ab6:	3130      	adds	r1, #48	; 0x30
 8004ab8:	7083      	strb	r3, [r0, #2]
 8004aba:	70c1      	strb	r1, [r0, #3]
 8004abc:	1d03      	adds	r3, r0, #4
 8004abe:	e7f1      	b.n	8004aa4 <__exponent+0x60>

08004ac0 <_printf_float>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	ed2d 8b02 	vpush	{d8}
 8004ac8:	b08d      	sub	sp, #52	; 0x34
 8004aca:	460c      	mov	r4, r1
 8004acc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	f000 fdd7 	bl	8005688 <_localeconv_r>
 8004ada:	f8d0 a000 	ldr.w	sl, [r0]
 8004ade:	4650      	mov	r0, sl
 8004ae0:	f7fb fbc6 	bl	8000270 <strlen>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	f8d8 3000 	ldr.w	r3, [r8]
 8004af0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004af4:	3307      	adds	r3, #7
 8004af6:	f023 0307 	bic.w	r3, r3, #7
 8004afa:	f103 0208 	add.w	r2, r3, #8
 8004afe:	f8c8 2000 	str.w	r2, [r8]
 8004b02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b0a:	9307      	str	r3, [sp, #28]
 8004b0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b10:	ee08 0a10 	vmov	s16, r0
 8004b14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <_printf_float+0x2d8>)
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b22:	f7fc f803 	bl	8000b2c <__aeabi_dcmpun>
 8004b26:	bb88      	cbnz	r0, 8004b8c <_printf_float+0xcc>
 8004b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b2c:	4b9a      	ldr	r3, [pc, #616]	; (8004d98 <_printf_float+0x2d8>)
 8004b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b32:	f7fb ffdd 	bl	8000af0 <__aeabi_dcmple>
 8004b36:	bb48      	cbnz	r0, 8004b8c <_printf_float+0xcc>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	4649      	mov	r1, r9
 8004b40:	f7fb ffcc 	bl	8000adc <__aeabi_dcmplt>
 8004b44:	b110      	cbz	r0, 8004b4c <_printf_float+0x8c>
 8004b46:	232d      	movs	r3, #45	; 0x2d
 8004b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b4c:	4a93      	ldr	r2, [pc, #588]	; (8004d9c <_printf_float+0x2dc>)
 8004b4e:	4b94      	ldr	r3, [pc, #592]	; (8004da0 <_printf_float+0x2e0>)
 8004b50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b54:	bf94      	ite	ls
 8004b56:	4690      	movls	r8, r2
 8004b58:	4698      	movhi	r8, r3
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f04f 0900 	mov.w	r9, #0
 8004b6a:	9700      	str	r7, [sp, #0]
 8004b6c:	4633      	mov	r3, r6
 8004b6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 f9da 	bl	8004f2c <_printf_common>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f040 8090 	bne.w	8004c9e <_printf_float+0x1de>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	b00d      	add	sp, #52	; 0x34
 8004b84:	ecbd 8b02 	vpop	{d8}
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	4640      	mov	r0, r8
 8004b92:	4649      	mov	r1, r9
 8004b94:	f7fb ffca 	bl	8000b2c <__aeabi_dcmpun>
 8004b98:	b140      	cbz	r0, 8004bac <_printf_float+0xec>
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bfbc      	itt	lt
 8004ba0:	232d      	movlt	r3, #45	; 0x2d
 8004ba2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ba6:	4a7f      	ldr	r2, [pc, #508]	; (8004da4 <_printf_float+0x2e4>)
 8004ba8:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <_printf_float+0x2e8>)
 8004baa:	e7d1      	b.n	8004b50 <_printf_float+0x90>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bb2:	9206      	str	r2, [sp, #24]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	d13f      	bne.n	8004c38 <_printf_float+0x178>
 8004bb8:	2306      	movs	r3, #6
 8004bba:	6063      	str	r3, [r4, #4]
 8004bbc:	9b05      	ldr	r3, [sp, #20]
 8004bbe:	6861      	ldr	r1, [r4, #4]
 8004bc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	ab0a      	add	r3, sp, #40	; 0x28
 8004bca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bce:	ab09      	add	r3, sp, #36	; 0x24
 8004bd0:	ec49 8b10 	vmov	d0, r8, r9
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f7ff fecf 	bl	8004980 <__cvt>
 8004be2:	9b06      	ldr	r3, [sp, #24]
 8004be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be6:	2b47      	cmp	r3, #71	; 0x47
 8004be8:	4680      	mov	r8, r0
 8004bea:	d108      	bne.n	8004bfe <_printf_float+0x13e>
 8004bec:	1cc8      	adds	r0, r1, #3
 8004bee:	db02      	blt.n	8004bf6 <_printf_float+0x136>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	dd41      	ble.n	8004c7a <_printf_float+0x1ba>
 8004bf6:	f1ab 0302 	sub.w	r3, fp, #2
 8004bfa:	fa5f fb83 	uxtb.w	fp, r3
 8004bfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c02:	d820      	bhi.n	8004c46 <_printf_float+0x186>
 8004c04:	3901      	subs	r1, #1
 8004c06:	465a      	mov	r2, fp
 8004c08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c0c:	9109      	str	r1, [sp, #36]	; 0x24
 8004c0e:	f7ff ff19 	bl	8004a44 <__exponent>
 8004c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c14:	1813      	adds	r3, r2, r0
 8004c16:	2a01      	cmp	r2, #1
 8004c18:	4681      	mov	r9, r0
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	dc02      	bgt.n	8004c24 <_printf_float+0x164>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	07d2      	lsls	r2, r2, #31
 8004c22:	d501      	bpl.n	8004c28 <_printf_float+0x168>
 8004c24:	3301      	adds	r3, #1
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d09c      	beq.n	8004b6a <_printf_float+0xaa>
 8004c30:	232d      	movs	r3, #45	; 0x2d
 8004c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c36:	e798      	b.n	8004b6a <_printf_float+0xaa>
 8004c38:	9a06      	ldr	r2, [sp, #24]
 8004c3a:	2a47      	cmp	r2, #71	; 0x47
 8004c3c:	d1be      	bne.n	8004bbc <_printf_float+0xfc>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1bc      	bne.n	8004bbc <_printf_float+0xfc>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e7b9      	b.n	8004bba <_printf_float+0xfa>
 8004c46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c4a:	d118      	bne.n	8004c7e <_printf_float+0x1be>
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	dd0b      	ble.n	8004c6a <_printf_float+0x1aa>
 8004c52:	6121      	str	r1, [r4, #16]
 8004c54:	b913      	cbnz	r3, 8004c5c <_printf_float+0x19c>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	07d0      	lsls	r0, r2, #31
 8004c5a:	d502      	bpl.n	8004c62 <_printf_float+0x1a2>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	440b      	add	r3, r1
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c64:	f04f 0900 	mov.w	r9, #0
 8004c68:	e7de      	b.n	8004c28 <_printf_float+0x168>
 8004c6a:	b913      	cbnz	r3, 8004c72 <_printf_float+0x1b2>
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	07d2      	lsls	r2, r2, #31
 8004c70:	d501      	bpl.n	8004c76 <_printf_float+0x1b6>
 8004c72:	3302      	adds	r3, #2
 8004c74:	e7f4      	b.n	8004c60 <_printf_float+0x1a0>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e7f2      	b.n	8004c60 <_printf_float+0x1a0>
 8004c7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	4299      	cmp	r1, r3
 8004c82:	db05      	blt.n	8004c90 <_printf_float+0x1d0>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	6121      	str	r1, [r4, #16]
 8004c88:	07d8      	lsls	r0, r3, #31
 8004c8a:	d5ea      	bpl.n	8004c62 <_printf_float+0x1a2>
 8004c8c:	1c4b      	adds	r3, r1, #1
 8004c8e:	e7e7      	b.n	8004c60 <_printf_float+0x1a0>
 8004c90:	2900      	cmp	r1, #0
 8004c92:	bfd4      	ite	le
 8004c94:	f1c1 0202 	rsble	r2, r1, #2
 8004c98:	2201      	movgt	r2, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	e7e0      	b.n	8004c60 <_printf_float+0x1a0>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	055a      	lsls	r2, r3, #21
 8004ca2:	d407      	bmi.n	8004cb4 <_printf_float+0x1f4>
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d12c      	bne.n	8004d0c <_printf_float+0x24c>
 8004cb2:	e764      	b.n	8004b7e <_printf_float+0xbe>
 8004cb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cb8:	f240 80e0 	bls.w	8004e7c <_printf_float+0x3bc>
 8004cbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f7fb ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d034      	beq.n	8004d36 <_printf_float+0x276>
 8004ccc:	4a37      	ldr	r2, [pc, #220]	; (8004dac <_printf_float+0x2ec>)
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f43f af51 	beq.w	8004b7e <_printf_float+0xbe>
 8004cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	db02      	blt.n	8004cea <_printf_float+0x22a>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	07d8      	lsls	r0, r3, #31
 8004ce8:	d510      	bpl.n	8004d0c <_printf_float+0x24c>
 8004cea:	ee18 3a10 	vmov	r3, s16
 8004cee:	4652      	mov	r2, sl
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af41 	beq.w	8004b7e <_printf_float+0xbe>
 8004cfc:	f04f 0800 	mov.w	r8, #0
 8004d00:	f104 091a 	add.w	r9, r4, #26
 8004d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d06:	3b01      	subs	r3, #1
 8004d08:	4543      	cmp	r3, r8
 8004d0a:	dc09      	bgt.n	8004d20 <_printf_float+0x260>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	f100 8107 	bmi.w	8004f22 <_printf_float+0x462>
 8004d14:	68e0      	ldr	r0, [r4, #12]
 8004d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	bfb8      	it	lt
 8004d1c:	4618      	movlt	r0, r3
 8004d1e:	e730      	b.n	8004b82 <_printf_float+0xc2>
 8004d20:	2301      	movs	r3, #1
 8004d22:	464a      	mov	r2, r9
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f af27 	beq.w	8004b7e <_printf_float+0xbe>
 8004d30:	f108 0801 	add.w	r8, r8, #1
 8004d34:	e7e6      	b.n	8004d04 <_printf_float+0x244>
 8004d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dc39      	bgt.n	8004db0 <_printf_float+0x2f0>
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <_printf_float+0x2ec>)
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af19 	beq.w	8004b7e <_printf_float+0xbe>
 8004d4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d102      	bne.n	8004d5a <_printf_float+0x29a>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07d9      	lsls	r1, r3, #31
 8004d58:	d5d8      	bpl.n	8004d0c <_printf_float+0x24c>
 8004d5a:	ee18 3a10 	vmov	r3, s16
 8004d5e:	4652      	mov	r2, sl
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af09 	beq.w	8004b7e <_printf_float+0xbe>
 8004d6c:	f04f 0900 	mov.w	r9, #0
 8004d70:	f104 0a1a 	add.w	sl, r4, #26
 8004d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d76:	425b      	negs	r3, r3
 8004d78:	454b      	cmp	r3, r9
 8004d7a:	dc01      	bgt.n	8004d80 <_printf_float+0x2c0>
 8004d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7e:	e792      	b.n	8004ca6 <_printf_float+0x1e6>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4652      	mov	r2, sl
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f aef7 	beq.w	8004b7e <_printf_float+0xbe>
 8004d90:	f109 0901 	add.w	r9, r9, #1
 8004d94:	e7ee      	b.n	8004d74 <_printf_float+0x2b4>
 8004d96:	bf00      	nop
 8004d98:	7fefffff 	.word	0x7fefffff
 8004d9c:	080077b0 	.word	0x080077b0
 8004da0:	080077b4 	.word	0x080077b4
 8004da4:	080077b8 	.word	0x080077b8
 8004da8:	080077bc 	.word	0x080077bc
 8004dac:	080077c0 	.word	0x080077c0
 8004db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004db4:	429a      	cmp	r2, r3
 8004db6:	bfa8      	it	ge
 8004db8:	461a      	movge	r2, r3
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	4691      	mov	r9, r2
 8004dbe:	dc37      	bgt.n	8004e30 <_printf_float+0x370>
 8004dc0:	f04f 0b00 	mov.w	fp, #0
 8004dc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dc8:	f104 021a 	add.w	r2, r4, #26
 8004dcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	eba3 0309 	sub.w	r3, r3, r9
 8004dd4:	455b      	cmp	r3, fp
 8004dd6:	dc33      	bgt.n	8004e40 <_printf_float+0x380>
 8004dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	db3b      	blt.n	8004e58 <_printf_float+0x398>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07da      	lsls	r2, r3, #31
 8004de4:	d438      	bmi.n	8004e58 <_printf_float+0x398>
 8004de6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004dea:	eba2 0903 	sub.w	r9, r2, r3
 8004dee:	9b05      	ldr	r3, [sp, #20]
 8004df0:	1ad2      	subs	r2, r2, r3
 8004df2:	4591      	cmp	r9, r2
 8004df4:	bfa8      	it	ge
 8004df6:	4691      	movge	r9, r2
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	dc35      	bgt.n	8004e6a <_printf_float+0x3aa>
 8004dfe:	f04f 0800 	mov.w	r8, #0
 8004e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e06:	f104 0a1a 	add.w	sl, r4, #26
 8004e0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	eba3 0309 	sub.w	r3, r3, r9
 8004e14:	4543      	cmp	r3, r8
 8004e16:	f77f af79 	ble.w	8004d0c <_printf_float+0x24c>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f aeaa 	beq.w	8004b7e <_printf_float+0xbe>
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	e7ec      	b.n	8004e0a <_printf_float+0x34a>
 8004e30:	4613      	mov	r3, r2
 8004e32:	4631      	mov	r1, r6
 8004e34:	4642      	mov	r2, r8
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d1c0      	bne.n	8004dc0 <_printf_float+0x300>
 8004e3e:	e69e      	b.n	8004b7e <_printf_float+0xbe>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	9205      	str	r2, [sp, #20]
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f ae97 	beq.w	8004b7e <_printf_float+0xbe>
 8004e50:	9a05      	ldr	r2, [sp, #20]
 8004e52:	f10b 0b01 	add.w	fp, fp, #1
 8004e56:	e7b9      	b.n	8004dcc <_printf_float+0x30c>
 8004e58:	ee18 3a10 	vmov	r3, s16
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	d1be      	bne.n	8004de6 <_printf_float+0x326>
 8004e68:	e689      	b.n	8004b7e <_printf_float+0xbe>
 8004e6a:	9a05      	ldr	r2, [sp, #20]
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	4442      	add	r2, r8
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1c1      	bne.n	8004dfe <_printf_float+0x33e>
 8004e7a:	e680      	b.n	8004b7e <_printf_float+0xbe>
 8004e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e7e:	2a01      	cmp	r2, #1
 8004e80:	dc01      	bgt.n	8004e86 <_printf_float+0x3c6>
 8004e82:	07db      	lsls	r3, r3, #31
 8004e84:	d53a      	bpl.n	8004efc <_printf_float+0x43c>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4642      	mov	r2, r8
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae74 	beq.w	8004b7e <_printf_float+0xbe>
 8004e96:	ee18 3a10 	vmov	r3, s16
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f ae6b 	beq.w	8004b7e <_printf_float+0xbe>
 8004ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eac:	2200      	movs	r2, #0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004eb4:	f7fb fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eb8:	b9d8      	cbnz	r0, 8004ef2 <_printf_float+0x432>
 8004eba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ebe:	f108 0201 	add.w	r2, r8, #1
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d10e      	bne.n	8004eea <_printf_float+0x42a>
 8004ecc:	e657      	b.n	8004b7e <_printf_float+0xbe>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f ae50 	beq.w	8004b7e <_printf_float+0xbe>
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4543      	cmp	r3, r8
 8004ee8:	dcf1      	bgt.n	8004ece <_printf_float+0x40e>
 8004eea:	464b      	mov	r3, r9
 8004eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ef0:	e6da      	b.n	8004ca8 <_printf_float+0x1e8>
 8004ef2:	f04f 0800 	mov.w	r8, #0
 8004ef6:	f104 0a1a 	add.w	sl, r4, #26
 8004efa:	e7f2      	b.n	8004ee2 <_printf_float+0x422>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4642      	mov	r2, r8
 8004f00:	e7df      	b.n	8004ec2 <_printf_float+0x402>
 8004f02:	2301      	movs	r3, #1
 8004f04:	464a      	mov	r2, r9
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f ae36 	beq.w	8004b7e <_printf_float+0xbe>
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	4543      	cmp	r3, r8
 8004f1e:	dcf0      	bgt.n	8004f02 <_printf_float+0x442>
 8004f20:	e6f8      	b.n	8004d14 <_printf_float+0x254>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	f104 0919 	add.w	r9, r4, #25
 8004f2a:	e7f4      	b.n	8004f16 <_printf_float+0x456>

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bfb8      	it	lt
 8004f40:	4613      	movlt	r3, r2
 8004f42:	6033      	str	r3, [r6, #0]
 8004f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f48:	4607      	mov	r7, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc26      	bgt.n	8004fc2 <_printf_common+0x96>
 8004f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f78:	1e13      	subs	r3, r2, #0
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d42b      	bmi.n	8004fdc <_printf_common+0xb0>
 8004f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d01e      	beq.n	8004fd0 <_printf_common+0xa4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	bf02      	ittt	eq
 8004f9e:	68e5      	ldreq	r5, [r4, #12]
 8004fa0:	6833      	ldreq	r3, [r6, #0]
 8004fa2:	1aed      	subeq	r5, r5, r3
 8004fa4:	68a3      	ldr	r3, [r4, #8]
 8004fa6:	bf0c      	ite	eq
 8004fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fac:	2500      	movne	r5, #0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfc4      	itt	gt
 8004fb2:	1a9b      	subgt	r3, r3, r2
 8004fb4:	18ed      	addgt	r5, r5, r3
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	341a      	adds	r4, #26
 8004fba:	42b5      	cmp	r5, r6
 8004fbc:	d11a      	bne.n	8004ff4 <_printf_common+0xc8>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e008      	b.n	8004fd4 <_printf_common+0xa8>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4638      	mov	r0, r7
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_printf_common+0xac>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7c6      	b.n	8004f6a <_printf_common+0x3e>
 8004fdc:	18e1      	adds	r1, r4, r3
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	2030      	movs	r0, #48	; 0x30
 8004fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe6:	4422      	add	r2, r4
 8004fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	e7c7      	b.n	8004f84 <_printf_common+0x58>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0e6      	beq.n	8004fd0 <_printf_common+0xa4>
 8005002:	3601      	adds	r6, #1
 8005004:	e7d9      	b.n	8004fba <_printf_common+0x8e>
	...

08005008 <_printf_i>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	7e0f      	ldrb	r7, [r1, #24]
 800500e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005010:	2f78      	cmp	r7, #120	; 0x78
 8005012:	4691      	mov	r9, r2
 8005014:	4680      	mov	r8, r0
 8005016:	460c      	mov	r4, r1
 8005018:	469a      	mov	sl, r3
 800501a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800501e:	d807      	bhi.n	8005030 <_printf_i+0x28>
 8005020:	2f62      	cmp	r7, #98	; 0x62
 8005022:	d80a      	bhi.n	800503a <_printf_i+0x32>
 8005024:	2f00      	cmp	r7, #0
 8005026:	f000 80d4 	beq.w	80051d2 <_printf_i+0x1ca>
 800502a:	2f58      	cmp	r7, #88	; 0x58
 800502c:	f000 80c0 	beq.w	80051b0 <_printf_i+0x1a8>
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005038:	e03a      	b.n	80050b0 <_printf_i+0xa8>
 800503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503e:	2b15      	cmp	r3, #21
 8005040:	d8f6      	bhi.n	8005030 <_printf_i+0x28>
 8005042:	a101      	add	r1, pc, #4	; (adr r1, 8005048 <_printf_i+0x40>)
 8005044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050b5 	.word	0x080050b5
 8005050:	08005031 	.word	0x08005031
 8005054:	08005031 	.word	0x08005031
 8005058:	08005031 	.word	0x08005031
 800505c:	08005031 	.word	0x08005031
 8005060:	080050b5 	.word	0x080050b5
 8005064:	08005031 	.word	0x08005031
 8005068:	08005031 	.word	0x08005031
 800506c:	08005031 	.word	0x08005031
 8005070:	08005031 	.word	0x08005031
 8005074:	080051b9 	.word	0x080051b9
 8005078:	080050e1 	.word	0x080050e1
 800507c:	08005173 	.word	0x08005173
 8005080:	08005031 	.word	0x08005031
 8005084:	08005031 	.word	0x08005031
 8005088:	080051db 	.word	0x080051db
 800508c:	08005031 	.word	0x08005031
 8005090:	080050e1 	.word	0x080050e1
 8005094:	08005031 	.word	0x08005031
 8005098:	08005031 	.word	0x08005031
 800509c:	0800517b 	.word	0x0800517b
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b0:	2301      	movs	r3, #1
 80050b2:	e09f      	b.n	80051f4 <_printf_i+0x1ec>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	0607      	lsls	r7, r0, #24
 80050ba:	f103 0104 	add.w	r1, r3, #4
 80050be:	6029      	str	r1, [r5, #0]
 80050c0:	d501      	bpl.n	80050c6 <_printf_i+0xbe>
 80050c2:	681e      	ldr	r6, [r3, #0]
 80050c4:	e003      	b.n	80050ce <_printf_i+0xc6>
 80050c6:	0646      	lsls	r6, r0, #25
 80050c8:	d5fb      	bpl.n	80050c2 <_printf_i+0xba>
 80050ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	da03      	bge.n	80050da <_printf_i+0xd2>
 80050d2:	232d      	movs	r3, #45	; 0x2d
 80050d4:	4276      	negs	r6, r6
 80050d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050da:	485a      	ldr	r0, [pc, #360]	; (8005244 <_printf_i+0x23c>)
 80050dc:	230a      	movs	r3, #10
 80050de:	e012      	b.n	8005106 <_printf_i+0xfe>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	6820      	ldr	r0, [r4, #0]
 80050e4:	1d19      	adds	r1, r3, #4
 80050e6:	6029      	str	r1, [r5, #0]
 80050e8:	0605      	lsls	r5, r0, #24
 80050ea:	d501      	bpl.n	80050f0 <_printf_i+0xe8>
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	e002      	b.n	80050f6 <_printf_i+0xee>
 80050f0:	0641      	lsls	r1, r0, #25
 80050f2:	d5fb      	bpl.n	80050ec <_printf_i+0xe4>
 80050f4:	881e      	ldrh	r6, [r3, #0]
 80050f6:	4853      	ldr	r0, [pc, #332]	; (8005244 <_printf_i+0x23c>)
 80050f8:	2f6f      	cmp	r7, #111	; 0x6f
 80050fa:	bf0c      	ite	eq
 80050fc:	2308      	moveq	r3, #8
 80050fe:	230a      	movne	r3, #10
 8005100:	2100      	movs	r1, #0
 8005102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005106:	6865      	ldr	r5, [r4, #4]
 8005108:	60a5      	str	r5, [r4, #8]
 800510a:	2d00      	cmp	r5, #0
 800510c:	bfa2      	ittt	ge
 800510e:	6821      	ldrge	r1, [r4, #0]
 8005110:	f021 0104 	bicge.w	r1, r1, #4
 8005114:	6021      	strge	r1, [r4, #0]
 8005116:	b90e      	cbnz	r6, 800511c <_printf_i+0x114>
 8005118:	2d00      	cmp	r5, #0
 800511a:	d04b      	beq.n	80051b4 <_printf_i+0x1ac>
 800511c:	4615      	mov	r5, r2
 800511e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005122:	fb03 6711 	mls	r7, r3, r1, r6
 8005126:	5dc7      	ldrb	r7, [r0, r7]
 8005128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800512c:	4637      	mov	r7, r6
 800512e:	42bb      	cmp	r3, r7
 8005130:	460e      	mov	r6, r1
 8005132:	d9f4      	bls.n	800511e <_printf_i+0x116>
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10b      	bne.n	8005150 <_printf_i+0x148>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	07de      	lsls	r6, r3, #31
 800513c:	d508      	bpl.n	8005150 <_printf_i+0x148>
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4299      	cmp	r1, r3
 8005144:	bfde      	ittt	le
 8005146:	2330      	movle	r3, #48	; 0x30
 8005148:	f805 3c01 	strble.w	r3, [r5, #-1]
 800514c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005150:	1b52      	subs	r2, r2, r5
 8005152:	6122      	str	r2, [r4, #16]
 8005154:	f8cd a000 	str.w	sl, [sp]
 8005158:	464b      	mov	r3, r9
 800515a:	aa03      	add	r2, sp, #12
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f7ff fee4 	bl	8004f2c <_printf_common>
 8005164:	3001      	adds	r0, #1
 8005166:	d14a      	bne.n	80051fe <_printf_i+0x1f6>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	b004      	add	sp, #16
 800516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	f043 0320 	orr.w	r3, r3, #32
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	4833      	ldr	r0, [pc, #204]	; (8005248 <_printf_i+0x240>)
 800517c:	2778      	movs	r7, #120	; 0x78
 800517e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6829      	ldr	r1, [r5, #0]
 8005186:	061f      	lsls	r7, r3, #24
 8005188:	f851 6b04 	ldr.w	r6, [r1], #4
 800518c:	d402      	bmi.n	8005194 <_printf_i+0x18c>
 800518e:	065f      	lsls	r7, r3, #25
 8005190:	bf48      	it	mi
 8005192:	b2b6      	uxthmi	r6, r6
 8005194:	07df      	lsls	r7, r3, #31
 8005196:	bf48      	it	mi
 8005198:	f043 0320 	orrmi.w	r3, r3, #32
 800519c:	6029      	str	r1, [r5, #0]
 800519e:	bf48      	it	mi
 80051a0:	6023      	strmi	r3, [r4, #0]
 80051a2:	b91e      	cbnz	r6, 80051ac <_printf_i+0x1a4>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f023 0320 	bic.w	r3, r3, #32
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	2310      	movs	r3, #16
 80051ae:	e7a7      	b.n	8005100 <_printf_i+0xf8>
 80051b0:	4824      	ldr	r0, [pc, #144]	; (8005244 <_printf_i+0x23c>)
 80051b2:	e7e4      	b.n	800517e <_printf_i+0x176>
 80051b4:	4615      	mov	r5, r2
 80051b6:	e7bd      	b.n	8005134 <_printf_i+0x12c>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	6826      	ldr	r6, [r4, #0]
 80051bc:	6961      	ldr	r1, [r4, #20]
 80051be:	1d18      	adds	r0, r3, #4
 80051c0:	6028      	str	r0, [r5, #0]
 80051c2:	0635      	lsls	r5, r6, #24
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0x1c4>
 80051c8:	6019      	str	r1, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0x1ca>
 80051cc:	0670      	lsls	r0, r6, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0x1c0>
 80051d0:	8019      	strh	r1, [r3, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	4615      	mov	r5, r2
 80051d8:	e7bc      	b.n	8005154 <_printf_i+0x14c>
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	1d1a      	adds	r2, r3, #4
 80051de:	602a      	str	r2, [r5, #0]
 80051e0:	681d      	ldr	r5, [r3, #0]
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	2100      	movs	r1, #0
 80051e6:	4628      	mov	r0, r5
 80051e8:	f7fa fff2 	bl	80001d0 <memchr>
 80051ec:	b108      	cbz	r0, 80051f2 <_printf_i+0x1ea>
 80051ee:	1b40      	subs	r0, r0, r5
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	2300      	movs	r3, #0
 80051f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fc:	e7aa      	b.n	8005154 <_printf_i+0x14c>
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	462a      	mov	r2, r5
 8005202:	4649      	mov	r1, r9
 8005204:	4640      	mov	r0, r8
 8005206:	47d0      	blx	sl
 8005208:	3001      	adds	r0, #1
 800520a:	d0ad      	beq.n	8005168 <_printf_i+0x160>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	d413      	bmi.n	800523a <_printf_i+0x232>
 8005212:	68e0      	ldr	r0, [r4, #12]
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	4298      	cmp	r0, r3
 8005218:	bfb8      	it	lt
 800521a:	4618      	movlt	r0, r3
 800521c:	e7a6      	b.n	800516c <_printf_i+0x164>
 800521e:	2301      	movs	r3, #1
 8005220:	4632      	mov	r2, r6
 8005222:	4649      	mov	r1, r9
 8005224:	4640      	mov	r0, r8
 8005226:	47d0      	blx	sl
 8005228:	3001      	adds	r0, #1
 800522a:	d09d      	beq.n	8005168 <_printf_i+0x160>
 800522c:	3501      	adds	r5, #1
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	9903      	ldr	r1, [sp, #12]
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	42ab      	cmp	r3, r5
 8005236:	dcf2      	bgt.n	800521e <_printf_i+0x216>
 8005238:	e7eb      	b.n	8005212 <_printf_i+0x20a>
 800523a:	2500      	movs	r5, #0
 800523c:	f104 0619 	add.w	r6, r4, #25
 8005240:	e7f5      	b.n	800522e <_printf_i+0x226>
 8005242:	bf00      	nop
 8005244:	080077c2 	.word	0x080077c2
 8005248:	080077d3 	.word	0x080077d3

0800524c <std>:
 800524c:	2300      	movs	r3, #0
 800524e:	b510      	push	{r4, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	e9c0 3300 	strd	r3, r3, [r0]
 8005256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525a:	6083      	str	r3, [r0, #8]
 800525c:	8181      	strh	r1, [r0, #12]
 800525e:	6643      	str	r3, [r0, #100]	; 0x64
 8005260:	81c2      	strh	r2, [r0, #14]
 8005262:	6183      	str	r3, [r0, #24]
 8005264:	4619      	mov	r1, r3
 8005266:	2208      	movs	r2, #8
 8005268:	305c      	adds	r0, #92	; 0x5c
 800526a:	f000 fa05 	bl	8005678 <memset>
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <std+0x38>)
 8005270:	6263      	str	r3, [r4, #36]	; 0x24
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <std+0x3c>)
 8005274:	62a3      	str	r3, [r4, #40]	; 0x28
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <std+0x40>)
 8005278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <std+0x44>)
 800527c:	6224      	str	r4, [r4, #32]
 800527e:	6323      	str	r3, [r4, #48]	; 0x30
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	080054c9 	.word	0x080054c9
 8005288:	080054eb 	.word	0x080054eb
 800528c:	08005523 	.word	0x08005523
 8005290:	08005547 	.word	0x08005547

08005294 <stdio_exit_handler>:
 8005294:	4a02      	ldr	r2, [pc, #8]	; (80052a0 <stdio_exit_handler+0xc>)
 8005296:	4903      	ldr	r1, [pc, #12]	; (80052a4 <stdio_exit_handler+0x10>)
 8005298:	4803      	ldr	r0, [pc, #12]	; (80052a8 <stdio_exit_handler+0x14>)
 800529a:	f000 b869 	b.w	8005370 <_fwalk_sglue>
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	080073a9 	.word	0x080073a9
 80052a8:	20000018 	.word	0x20000018

080052ac <cleanup_stdio>:
 80052ac:	6841      	ldr	r1, [r0, #4]
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <cleanup_stdio+0x34>)
 80052b0:	4299      	cmp	r1, r3
 80052b2:	b510      	push	{r4, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	d001      	beq.n	80052bc <cleanup_stdio+0x10>
 80052b8:	f002 f876 	bl	80073a8 <_fflush_r>
 80052bc:	68a1      	ldr	r1, [r4, #8]
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <cleanup_stdio+0x38>)
 80052c0:	4299      	cmp	r1, r3
 80052c2:	d002      	beq.n	80052ca <cleanup_stdio+0x1e>
 80052c4:	4620      	mov	r0, r4
 80052c6:	f002 f86f 	bl	80073a8 <_fflush_r>
 80052ca:	68e1      	ldr	r1, [r4, #12]
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <cleanup_stdio+0x3c>)
 80052ce:	4299      	cmp	r1, r3
 80052d0:	d004      	beq.n	80052dc <cleanup_stdio+0x30>
 80052d2:	4620      	mov	r0, r4
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f002 b866 	b.w	80073a8 <_fflush_r>
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	bf00      	nop
 80052e0:	2000024c 	.word	0x2000024c
 80052e4:	200002b4 	.word	0x200002b4
 80052e8:	2000031c 	.word	0x2000031c

080052ec <global_stdio_init.part.0>:
 80052ec:	b510      	push	{r4, lr}
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <global_stdio_init.part.0+0x30>)
 80052f0:	4c0b      	ldr	r4, [pc, #44]	; (8005320 <global_stdio_init.part.0+0x34>)
 80052f2:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <global_stdio_init.part.0+0x38>)
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	4620      	mov	r0, r4
 80052f8:	2200      	movs	r2, #0
 80052fa:	2104      	movs	r1, #4
 80052fc:	f7ff ffa6 	bl	800524c <std>
 8005300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005304:	2201      	movs	r2, #1
 8005306:	2109      	movs	r1, #9
 8005308:	f7ff ffa0 	bl	800524c <std>
 800530c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005310:	2202      	movs	r2, #2
 8005312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005316:	2112      	movs	r1, #18
 8005318:	f7ff bf98 	b.w	800524c <std>
 800531c:	20000384 	.word	0x20000384
 8005320:	2000024c 	.word	0x2000024c
 8005324:	08005295 	.word	0x08005295

08005328 <__sfp_lock_acquire>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__sfp_lock_acquire+0x8>)
 800532a:	f000 ba21 	b.w	8005770 <__retarget_lock_acquire_recursive>
 800532e:	bf00      	nop
 8005330:	2000038d 	.word	0x2000038d

08005334 <__sfp_lock_release>:
 8005334:	4801      	ldr	r0, [pc, #4]	; (800533c <__sfp_lock_release+0x8>)
 8005336:	f000 ba1c 	b.w	8005772 <__retarget_lock_release_recursive>
 800533a:	bf00      	nop
 800533c:	2000038d 	.word	0x2000038d

08005340 <__sinit>:
 8005340:	b510      	push	{r4, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	f7ff fff0 	bl	8005328 <__sfp_lock_acquire>
 8005348:	6a23      	ldr	r3, [r4, #32]
 800534a:	b11b      	cbz	r3, 8005354 <__sinit+0x14>
 800534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005350:	f7ff bff0 	b.w	8005334 <__sfp_lock_release>
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <__sinit+0x28>)
 8005356:	6223      	str	r3, [r4, #32]
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__sinit+0x2c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f5      	bne.n	800534c <__sinit+0xc>
 8005360:	f7ff ffc4 	bl	80052ec <global_stdio_init.part.0>
 8005364:	e7f2      	b.n	800534c <__sinit+0xc>
 8005366:	bf00      	nop
 8005368:	080052ad 	.word	0x080052ad
 800536c:	20000384 	.word	0x20000384

08005370 <_fwalk_sglue>:
 8005370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005374:	4607      	mov	r7, r0
 8005376:	4688      	mov	r8, r1
 8005378:	4614      	mov	r4, r2
 800537a:	2600      	movs	r6, #0
 800537c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005380:	f1b9 0901 	subs.w	r9, r9, #1
 8005384:	d505      	bpl.n	8005392 <_fwalk_sglue+0x22>
 8005386:	6824      	ldr	r4, [r4, #0]
 8005388:	2c00      	cmp	r4, #0
 800538a:	d1f7      	bne.n	800537c <_fwalk_sglue+0xc>
 800538c:	4630      	mov	r0, r6
 800538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d907      	bls.n	80053a8 <_fwalk_sglue+0x38>
 8005398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800539c:	3301      	adds	r3, #1
 800539e:	d003      	beq.n	80053a8 <_fwalk_sglue+0x38>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4638      	mov	r0, r7
 80053a4:	47c0      	blx	r8
 80053a6:	4306      	orrs	r6, r0
 80053a8:	3568      	adds	r5, #104	; 0x68
 80053aa:	e7e9      	b.n	8005380 <_fwalk_sglue+0x10>

080053ac <iprintf>:
 80053ac:	b40f      	push	{r0, r1, r2, r3}
 80053ae:	b507      	push	{r0, r1, r2, lr}
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <iprintf+0x20>)
 80053b2:	ab04      	add	r3, sp, #16
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ba:	6881      	ldr	r1, [r0, #8]
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	f001 fe53 	bl	8007068 <_vfiprintf_r>
 80053c2:	b003      	add	sp, #12
 80053c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c8:	b004      	add	sp, #16
 80053ca:	4770      	bx	lr
 80053cc:	20000064 	.word	0x20000064

080053d0 <_puts_r>:
 80053d0:	6a03      	ldr	r3, [r0, #32]
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	6884      	ldr	r4, [r0, #8]
 80053d6:	4605      	mov	r5, r0
 80053d8:	460e      	mov	r6, r1
 80053da:	b90b      	cbnz	r3, 80053e0 <_puts_r+0x10>
 80053dc:	f7ff ffb0 	bl	8005340 <__sinit>
 80053e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d405      	bmi.n	80053f2 <_puts_r+0x22>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	0598      	lsls	r0, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_puts_r+0x22>
 80053ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ee:	f000 f9bf 	bl	8005770 <__retarget_lock_acquire_recursive>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	0719      	lsls	r1, r3, #28
 80053f6:	d513      	bpl.n	8005420 <_puts_r+0x50>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	b18b      	cbz	r3, 8005420 <_puts_r+0x50>
 80053fc:	3e01      	subs	r6, #1
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005404:	3b01      	subs	r3, #1
 8005406:	60a3      	str	r3, [r4, #8]
 8005408:	b9e9      	cbnz	r1, 8005446 <_puts_r+0x76>
 800540a:	2b00      	cmp	r3, #0
 800540c:	da2e      	bge.n	800546c <_puts_r+0x9c>
 800540e:	4622      	mov	r2, r4
 8005410:	210a      	movs	r1, #10
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f89b 	bl	800554e <__swbuf_r>
 8005418:	3001      	adds	r0, #1
 800541a:	d007      	beq.n	800542c <_puts_r+0x5c>
 800541c:	250a      	movs	r5, #10
 800541e:	e007      	b.n	8005430 <_puts_r+0x60>
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f8d0 	bl	80055c8 <__swsetup_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	d0e7      	beq.n	80053fc <_puts_r+0x2c>
 800542c:	f04f 35ff 	mov.w	r5, #4294967295
 8005430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d405      	bmi.n	8005442 <_puts_r+0x72>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	059b      	lsls	r3, r3, #22
 800543a:	d402      	bmi.n	8005442 <_puts_r+0x72>
 800543c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543e:	f000 f998 	bl	8005772 <__retarget_lock_release_recursive>
 8005442:	4628      	mov	r0, r5
 8005444:	bd70      	pop	{r4, r5, r6, pc}
 8005446:	2b00      	cmp	r3, #0
 8005448:	da04      	bge.n	8005454 <_puts_r+0x84>
 800544a:	69a2      	ldr	r2, [r4, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	dc06      	bgt.n	800545e <_puts_r+0x8e>
 8005450:	290a      	cmp	r1, #10
 8005452:	d004      	beq.n	800545e <_puts_r+0x8e>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	7019      	strb	r1, [r3, #0]
 800545c:	e7cf      	b.n	80053fe <_puts_r+0x2e>
 800545e:	4622      	mov	r2, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 f874 	bl	800554e <__swbuf_r>
 8005466:	3001      	adds	r0, #1
 8005468:	d1c9      	bne.n	80053fe <_puts_r+0x2e>
 800546a:	e7df      	b.n	800542c <_puts_r+0x5c>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	250a      	movs	r5, #10
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	701d      	strb	r5, [r3, #0]
 8005476:	e7db      	b.n	8005430 <_puts_r+0x60>

08005478 <puts>:
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <puts+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f7ff bfa7 	b.w	80053d0 <_puts_r>
 8005482:	bf00      	nop
 8005484:	20000064 	.word	0x20000064

08005488 <siprintf>:
 8005488:	b40e      	push	{r1, r2, r3}
 800548a:	b500      	push	{lr}
 800548c:	b09c      	sub	sp, #112	; 0x70
 800548e:	ab1d      	add	r3, sp, #116	; 0x74
 8005490:	9002      	str	r0, [sp, #8]
 8005492:	9006      	str	r0, [sp, #24]
 8005494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005498:	4809      	ldr	r0, [pc, #36]	; (80054c0 <siprintf+0x38>)
 800549a:	9107      	str	r1, [sp, #28]
 800549c:	9104      	str	r1, [sp, #16]
 800549e:	4909      	ldr	r1, [pc, #36]	; (80054c4 <siprintf+0x3c>)
 80054a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	a902      	add	r1, sp, #8
 80054ac:	f001 fcb4 	bl	8006e18 <_svfiprintf_r>
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	b01c      	add	sp, #112	; 0x70
 80054b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054bc:	b003      	add	sp, #12
 80054be:	4770      	bx	lr
 80054c0:	20000064 	.word	0x20000064
 80054c4:	ffff0208 	.word	0xffff0208

080054c8 <__sread>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	460c      	mov	r4, r1
 80054cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d0:	f000 f900 	bl	80056d4 <_read_r>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	bfab      	itete	ge
 80054d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054da:	89a3      	ldrhlt	r3, [r4, #12]
 80054dc:	181b      	addge	r3, r3, r0
 80054de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054e2:	bfac      	ite	ge
 80054e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054e6:	81a3      	strhlt	r3, [r4, #12]
 80054e8:	bd10      	pop	{r4, pc}

080054ea <__swrite>:
 80054ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ee:	461f      	mov	r7, r3
 80054f0:	898b      	ldrh	r3, [r1, #12]
 80054f2:	05db      	lsls	r3, r3, #23
 80054f4:	4605      	mov	r5, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4616      	mov	r6, r2
 80054fa:	d505      	bpl.n	8005508 <__swrite+0x1e>
 80054fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005500:	2302      	movs	r3, #2
 8005502:	2200      	movs	r2, #0
 8005504:	f000 f8d4 	bl	80056b0 <_lseek_r>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800550e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	4632      	mov	r2, r6
 8005516:	463b      	mov	r3, r7
 8005518:	4628      	mov	r0, r5
 800551a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800551e:	f000 b8eb 	b.w	80056f8 <_write_r>

08005522 <__sseek>:
 8005522:	b510      	push	{r4, lr}
 8005524:	460c      	mov	r4, r1
 8005526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552a:	f000 f8c1 	bl	80056b0 <_lseek_r>
 800552e:	1c43      	adds	r3, r0, #1
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	bf15      	itete	ne
 8005534:	6560      	strne	r0, [r4, #84]	; 0x54
 8005536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800553a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800553e:	81a3      	strheq	r3, [r4, #12]
 8005540:	bf18      	it	ne
 8005542:	81a3      	strhne	r3, [r4, #12]
 8005544:	bd10      	pop	{r4, pc}

08005546 <__sclose>:
 8005546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554a:	f000 b8a1 	b.w	8005690 <_close_r>

0800554e <__swbuf_r>:
 800554e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005550:	460e      	mov	r6, r1
 8005552:	4614      	mov	r4, r2
 8005554:	4605      	mov	r5, r0
 8005556:	b118      	cbz	r0, 8005560 <__swbuf_r+0x12>
 8005558:	6a03      	ldr	r3, [r0, #32]
 800555a:	b90b      	cbnz	r3, 8005560 <__swbuf_r+0x12>
 800555c:	f7ff fef0 	bl	8005340 <__sinit>
 8005560:	69a3      	ldr	r3, [r4, #24]
 8005562:	60a3      	str	r3, [r4, #8]
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	071a      	lsls	r2, r3, #28
 8005568:	d525      	bpl.n	80055b6 <__swbuf_r+0x68>
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	b31b      	cbz	r3, 80055b6 <__swbuf_r+0x68>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	1a98      	subs	r0, r3, r2
 8005574:	6963      	ldr	r3, [r4, #20]
 8005576:	b2f6      	uxtb	r6, r6
 8005578:	4283      	cmp	r3, r0
 800557a:	4637      	mov	r7, r6
 800557c:	dc04      	bgt.n	8005588 <__swbuf_r+0x3a>
 800557e:	4621      	mov	r1, r4
 8005580:	4628      	mov	r0, r5
 8005582:	f001 ff11 	bl	80073a8 <_fflush_r>
 8005586:	b9e0      	cbnz	r0, 80055c2 <__swbuf_r+0x74>
 8005588:	68a3      	ldr	r3, [r4, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	60a3      	str	r3, [r4, #8]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	701e      	strb	r6, [r3, #0]
 8005596:	6962      	ldr	r2, [r4, #20]
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	429a      	cmp	r2, r3
 800559c:	d004      	beq.n	80055a8 <__swbuf_r+0x5a>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	07db      	lsls	r3, r3, #31
 80055a2:	d506      	bpl.n	80055b2 <__swbuf_r+0x64>
 80055a4:	2e0a      	cmp	r6, #10
 80055a6:	d104      	bne.n	80055b2 <__swbuf_r+0x64>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f001 fefc 	bl	80073a8 <_fflush_r>
 80055b0:	b938      	cbnz	r0, 80055c2 <__swbuf_r+0x74>
 80055b2:	4638      	mov	r0, r7
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 f805 	bl	80055c8 <__swsetup_r>
 80055be:	2800      	cmp	r0, #0
 80055c0:	d0d5      	beq.n	800556e <__swbuf_r+0x20>
 80055c2:	f04f 37ff 	mov.w	r7, #4294967295
 80055c6:	e7f4      	b.n	80055b2 <__swbuf_r+0x64>

080055c8 <__swsetup_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <__swsetup_r+0xac>)
 80055cc:	4605      	mov	r5, r0
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	460c      	mov	r4, r1
 80055d2:	b118      	cbz	r0, 80055dc <__swsetup_r+0x14>
 80055d4:	6a03      	ldr	r3, [r0, #32]
 80055d6:	b90b      	cbnz	r3, 80055dc <__swsetup_r+0x14>
 80055d8:	f7ff feb2 	bl	8005340 <__sinit>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e2:	0718      	lsls	r0, r3, #28
 80055e4:	d422      	bmi.n	800562c <__swsetup_r+0x64>
 80055e6:	06d9      	lsls	r1, r3, #27
 80055e8:	d407      	bmi.n	80055fa <__swsetup_r+0x32>
 80055ea:	2309      	movs	r3, #9
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	e034      	b.n	8005664 <__swsetup_r+0x9c>
 80055fa:	0758      	lsls	r0, r3, #29
 80055fc:	d512      	bpl.n	8005624 <__swsetup_r+0x5c>
 80055fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005600:	b141      	cbz	r1, 8005614 <__swsetup_r+0x4c>
 8005602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005606:	4299      	cmp	r1, r3
 8005608:	d002      	beq.n	8005610 <__swsetup_r+0x48>
 800560a:	4628      	mov	r0, r5
 800560c:	f000 ff2e 	bl	800646c <_free_r>
 8005610:	2300      	movs	r3, #0
 8005612:	6363      	str	r3, [r4, #52]	; 0x34
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	2300      	movs	r3, #0
 800561e:	6063      	str	r3, [r4, #4]
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f043 0308 	orr.w	r3, r3, #8
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	b94b      	cbnz	r3, 8005644 <__swsetup_r+0x7c>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563a:	d003      	beq.n	8005644 <__swsetup_r+0x7c>
 800563c:	4621      	mov	r1, r4
 800563e:	4628      	mov	r0, r5
 8005640:	f001 ff00 	bl	8007444 <__smakebuf_r>
 8005644:	89a0      	ldrh	r0, [r4, #12]
 8005646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800564a:	f010 0301 	ands.w	r3, r0, #1
 800564e:	d00a      	beq.n	8005666 <__swsetup_r+0x9e>
 8005650:	2300      	movs	r3, #0
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	6963      	ldr	r3, [r4, #20]
 8005656:	425b      	negs	r3, r3
 8005658:	61a3      	str	r3, [r4, #24]
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	b943      	cbnz	r3, 8005670 <__swsetup_r+0xa8>
 800565e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005662:	d1c4      	bne.n	80055ee <__swsetup_r+0x26>
 8005664:	bd38      	pop	{r3, r4, r5, pc}
 8005666:	0781      	lsls	r1, r0, #30
 8005668:	bf58      	it	pl
 800566a:	6963      	ldrpl	r3, [r4, #20]
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	e7f4      	b.n	800565a <__swsetup_r+0x92>
 8005670:	2000      	movs	r0, #0
 8005672:	e7f7      	b.n	8005664 <__swsetup_r+0x9c>
 8005674:	20000064 	.word	0x20000064

08005678 <memset>:
 8005678:	4402      	add	r2, r0
 800567a:	4603      	mov	r3, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <_localeconv_r>:
 8005688:	4800      	ldr	r0, [pc, #0]	; (800568c <_localeconv_r+0x4>)
 800568a:	4770      	bx	lr
 800568c:	20000158 	.word	0x20000158

08005690 <_close_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_close_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fb feb9 	bl	8001412 <_close>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_close_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_close_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000388 	.word	0x20000388

080056b0 <_lseek_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_lseek_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fb fece 	bl	8001460 <_lseek>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_lseek_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_lseek_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20000388 	.word	0x20000388

080056d4 <_read_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_read_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb fe78 	bl	80013d8 <_read>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_read_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_read_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20000388 	.word	0x20000388

080056f8 <_write_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_write_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fb fc2b 	bl	8000f62 <_write>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_write_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_write_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000388 	.word	0x20000388

0800571c <__errno>:
 800571c:	4b01      	ldr	r3, [pc, #4]	; (8005724 <__errno+0x8>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000064 	.word	0x20000064

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4d0d      	ldr	r5, [pc, #52]	; (8005760 <__libc_init_array+0x38>)
 800572c:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 800572e:	1b64      	subs	r4, r4, r5
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	2600      	movs	r6, #0
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	4d0b      	ldr	r5, [pc, #44]	; (8005768 <__libc_init_array+0x40>)
 800573a:	4c0c      	ldr	r4, [pc, #48]	; (800576c <__libc_init_array+0x44>)
 800573c:	f002 f800 	bl	8007740 <_init>
 8005740:	1b64      	subs	r4, r4, r5
 8005742:	10a4      	asrs	r4, r4, #2
 8005744:	2600      	movs	r6, #0
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	08007b2c 	.word	0x08007b2c
 8005764:	08007b2c 	.word	0x08007b2c
 8005768:	08007b2c 	.word	0x08007b2c
 800576c:	08007b30 	.word	0x08007b30

08005770 <__retarget_lock_acquire_recursive>:
 8005770:	4770      	bx	lr

08005772 <__retarget_lock_release_recursive>:
 8005772:	4770      	bx	lr

08005774 <quorem>:
 8005774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005778:	6903      	ldr	r3, [r0, #16]
 800577a:	690c      	ldr	r4, [r1, #16]
 800577c:	42a3      	cmp	r3, r4
 800577e:	4607      	mov	r7, r0
 8005780:	db7e      	blt.n	8005880 <quorem+0x10c>
 8005782:	3c01      	subs	r4, #1
 8005784:	f101 0814 	add.w	r8, r1, #20
 8005788:	f100 0514 	add.w	r5, r0, #20
 800578c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800579a:	3301      	adds	r3, #1
 800579c:	429a      	cmp	r2, r3
 800579e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80057aa:	d331      	bcc.n	8005810 <quorem+0x9c>
 80057ac:	f04f 0e00 	mov.w	lr, #0
 80057b0:	4640      	mov	r0, r8
 80057b2:	46ac      	mov	ip, r5
 80057b4:	46f2      	mov	sl, lr
 80057b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80057ba:	b293      	uxth	r3, r2
 80057bc:	fb06 e303 	mla	r3, r6, r3, lr
 80057c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057c4:	0c1a      	lsrs	r2, r3, #16
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	ebaa 0303 	sub.w	r3, sl, r3
 80057cc:	f8dc a000 	ldr.w	sl, [ip]
 80057d0:	fa13 f38a 	uxtah	r3, r3, sl
 80057d4:	fb06 220e 	mla	r2, r6, lr, r2
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	9b00      	ldr	r3, [sp, #0]
 80057dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057e0:	b292      	uxth	r2, r2
 80057e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80057ee:	4581      	cmp	r9, r0
 80057f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f4:	f84c 3b04 	str.w	r3, [ip], #4
 80057f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057fc:	d2db      	bcs.n	80057b6 <quorem+0x42>
 80057fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8005802:	b92b      	cbnz	r3, 8005810 <quorem+0x9c>
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	3b04      	subs	r3, #4
 8005808:	429d      	cmp	r5, r3
 800580a:	461a      	mov	r2, r3
 800580c:	d32c      	bcc.n	8005868 <quorem+0xf4>
 800580e:	613c      	str	r4, [r7, #16]
 8005810:	4638      	mov	r0, r7
 8005812:	f001 f9a7 	bl	8006b64 <__mcmp>
 8005816:	2800      	cmp	r0, #0
 8005818:	db22      	blt.n	8005860 <quorem+0xec>
 800581a:	3601      	adds	r6, #1
 800581c:	4629      	mov	r1, r5
 800581e:	2000      	movs	r0, #0
 8005820:	f858 2b04 	ldr.w	r2, [r8], #4
 8005824:	f8d1 c000 	ldr.w	ip, [r1]
 8005828:	b293      	uxth	r3, r2
 800582a:	1ac3      	subs	r3, r0, r3
 800582c:	0c12      	lsrs	r2, r2, #16
 800582e:	fa13 f38c 	uxtah	r3, r3, ip
 8005832:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005836:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005840:	45c1      	cmp	r9, r8
 8005842:	f841 3b04 	str.w	r3, [r1], #4
 8005846:	ea4f 4022 	mov.w	r0, r2, asr #16
 800584a:	d2e9      	bcs.n	8005820 <quorem+0xac>
 800584c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005854:	b922      	cbnz	r2, 8005860 <quorem+0xec>
 8005856:	3b04      	subs	r3, #4
 8005858:	429d      	cmp	r5, r3
 800585a:	461a      	mov	r2, r3
 800585c:	d30a      	bcc.n	8005874 <quorem+0x100>
 800585e:	613c      	str	r4, [r7, #16]
 8005860:	4630      	mov	r0, r6
 8005862:	b003      	add	sp, #12
 8005864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	3b04      	subs	r3, #4
 800586c:	2a00      	cmp	r2, #0
 800586e:	d1ce      	bne.n	800580e <quorem+0x9a>
 8005870:	3c01      	subs	r4, #1
 8005872:	e7c9      	b.n	8005808 <quorem+0x94>
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	3b04      	subs	r3, #4
 8005878:	2a00      	cmp	r2, #0
 800587a:	d1f0      	bne.n	800585e <quorem+0xea>
 800587c:	3c01      	subs	r4, #1
 800587e:	e7eb      	b.n	8005858 <quorem+0xe4>
 8005880:	2000      	movs	r0, #0
 8005882:	e7ee      	b.n	8005862 <quorem+0xee>
 8005884:	0000      	movs	r0, r0
	...

08005888 <_dtoa_r>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	ed2d 8b04 	vpush	{d8-d9}
 8005890:	69c5      	ldr	r5, [r0, #28]
 8005892:	b093      	sub	sp, #76	; 0x4c
 8005894:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005898:	ec57 6b10 	vmov	r6, r7, d0
 800589c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058a0:	9107      	str	r1, [sp, #28]
 80058a2:	4604      	mov	r4, r0
 80058a4:	920a      	str	r2, [sp, #40]	; 0x28
 80058a6:	930d      	str	r3, [sp, #52]	; 0x34
 80058a8:	b975      	cbnz	r5, 80058c8 <_dtoa_r+0x40>
 80058aa:	2010      	movs	r0, #16
 80058ac:	f000 fe2a 	bl	8006504 <malloc>
 80058b0:	4602      	mov	r2, r0
 80058b2:	61e0      	str	r0, [r4, #28]
 80058b4:	b920      	cbnz	r0, 80058c0 <_dtoa_r+0x38>
 80058b6:	4bae      	ldr	r3, [pc, #696]	; (8005b70 <_dtoa_r+0x2e8>)
 80058b8:	21ef      	movs	r1, #239	; 0xef
 80058ba:	48ae      	ldr	r0, [pc, #696]	; (8005b74 <_dtoa_r+0x2ec>)
 80058bc:	f001 fe58 	bl	8007570 <__assert_func>
 80058c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058c4:	6005      	str	r5, [r0, #0]
 80058c6:	60c5      	str	r5, [r0, #12]
 80058c8:	69e3      	ldr	r3, [r4, #28]
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	b151      	cbz	r1, 80058e4 <_dtoa_r+0x5c>
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	604a      	str	r2, [r1, #4]
 80058d2:	2301      	movs	r3, #1
 80058d4:	4093      	lsls	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 ff07 	bl	80066ec <_Bfree>
 80058de:	69e3      	ldr	r3, [r4, #28]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	1e3b      	subs	r3, r7, #0
 80058e6:	bfbb      	ittet	lt
 80058e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	9303      	strlt	r3, [sp, #12]
 80058ee:	2300      	movge	r3, #0
 80058f0:	2201      	movlt	r2, #1
 80058f2:	bfac      	ite	ge
 80058f4:	f8c8 3000 	strge.w	r3, [r8]
 80058f8:	f8c8 2000 	strlt.w	r2, [r8]
 80058fc:	4b9e      	ldr	r3, [pc, #632]	; (8005b78 <_dtoa_r+0x2f0>)
 80058fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005902:	ea33 0308 	bics.w	r3, r3, r8
 8005906:	d11b      	bne.n	8005940 <_dtoa_r+0xb8>
 8005908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800590a:	f242 730f 	movw	r3, #9999	; 0x270f
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005914:	4333      	orrs	r3, r6
 8005916:	f000 8593 	beq.w	8006440 <_dtoa_r+0xbb8>
 800591a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800591c:	b963      	cbnz	r3, 8005938 <_dtoa_r+0xb0>
 800591e:	4b97      	ldr	r3, [pc, #604]	; (8005b7c <_dtoa_r+0x2f4>)
 8005920:	e027      	b.n	8005972 <_dtoa_r+0xea>
 8005922:	4b97      	ldr	r3, [pc, #604]	; (8005b80 <_dtoa_r+0x2f8>)
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	9800      	ldr	r0, [sp, #0]
 800592e:	b013      	add	sp, #76	; 0x4c
 8005930:	ecbd 8b04 	vpop	{d8-d9}
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	4b90      	ldr	r3, [pc, #576]	; (8005b7c <_dtoa_r+0x2f4>)
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	3303      	adds	r3, #3
 800593e:	e7f3      	b.n	8005928 <_dtoa_r+0xa0>
 8005940:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	ec51 0b17 	vmov	r0, r1, d7
 800594a:	eeb0 8a47 	vmov.f32	s16, s14
 800594e:	eef0 8a67 	vmov.f32	s17, s15
 8005952:	2300      	movs	r3, #0
 8005954:	f7fb f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005958:	4681      	mov	r9, r0
 800595a:	b160      	cbz	r0, 8005976 <_dtoa_r+0xee>
 800595c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800595e:	2301      	movs	r3, #1
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8568 	beq.w	800643a <_dtoa_r+0xbb2>
 800596a:	4b86      	ldr	r3, [pc, #536]	; (8005b84 <_dtoa_r+0x2fc>)
 800596c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	e7da      	b.n	800592c <_dtoa_r+0xa4>
 8005976:	aa10      	add	r2, sp, #64	; 0x40
 8005978:	a911      	add	r1, sp, #68	; 0x44
 800597a:	4620      	mov	r0, r4
 800597c:	eeb0 0a48 	vmov.f32	s0, s16
 8005980:	eef0 0a68 	vmov.f32	s1, s17
 8005984:	f001 f994 	bl	8006cb0 <__d2b>
 8005988:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800598c:	4682      	mov	sl, r0
 800598e:	2d00      	cmp	r5, #0
 8005990:	d07f      	beq.n	8005a92 <_dtoa_r+0x20a>
 8005992:	ee18 3a90 	vmov	r3, s17
 8005996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800599a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800599e:	ec51 0b18 	vmov	r0, r1, d8
 80059a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80059ae:	4619      	mov	r1, r3
 80059b0:	2200      	movs	r2, #0
 80059b2:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <_dtoa_r+0x300>)
 80059b4:	f7fa fc68 	bl	8000288 <__aeabi_dsub>
 80059b8:	a367      	add	r3, pc, #412	; (adr r3, 8005b58 <_dtoa_r+0x2d0>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fe1b 	bl	80005f8 <__aeabi_dmul>
 80059c2:	a367      	add	r3, pc, #412	; (adr r3, 8005b60 <_dtoa_r+0x2d8>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fc60 	bl	800028c <__adddf3>
 80059cc:	4606      	mov	r6, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	460f      	mov	r7, r1
 80059d2:	f7fa fda7 	bl	8000524 <__aeabi_i2d>
 80059d6:	a364      	add	r3, pc, #400	; (adr r3, 8005b68 <_dtoa_r+0x2e0>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fc50 	bl	800028c <__adddf3>
 80059ec:	4606      	mov	r6, r0
 80059ee:	460f      	mov	r7, r1
 80059f0:	f7fb f8b2 	bl	8000b58 <__aeabi_d2iz>
 80059f4:	2200      	movs	r2, #0
 80059f6:	4683      	mov	fp, r0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4630      	mov	r0, r6
 80059fc:	4639      	mov	r1, r7
 80059fe:	f7fb f86d 	bl	8000adc <__aeabi_dcmplt>
 8005a02:	b148      	cbz	r0, 8005a18 <_dtoa_r+0x190>
 8005a04:	4658      	mov	r0, fp
 8005a06:	f7fa fd8d 	bl	8000524 <__aeabi_i2d>
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	f7fb f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a12:	b908      	cbnz	r0, 8005a18 <_dtoa_r+0x190>
 8005a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a18:	f1bb 0f16 	cmp.w	fp, #22
 8005a1c:	d857      	bhi.n	8005ace <_dtoa_r+0x246>
 8005a1e:	4b5b      	ldr	r3, [pc, #364]	; (8005b8c <_dtoa_r+0x304>)
 8005a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	ec51 0b18 	vmov	r0, r1, d8
 8005a2c:	f7fb f856 	bl	8000adc <__aeabi_dcmplt>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d04e      	beq.n	8005ad2 <_dtoa_r+0x24a>
 8005a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a38:	2300      	movs	r3, #0
 8005a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a3e:	1b5b      	subs	r3, r3, r5
 8005a40:	1e5a      	subs	r2, r3, #1
 8005a42:	bf45      	ittet	mi
 8005a44:	f1c3 0301 	rsbmi	r3, r3, #1
 8005a48:	9305      	strmi	r3, [sp, #20]
 8005a4a:	2300      	movpl	r3, #0
 8005a4c:	2300      	movmi	r3, #0
 8005a4e:	9206      	str	r2, [sp, #24]
 8005a50:	bf54      	ite	pl
 8005a52:	9305      	strpl	r3, [sp, #20]
 8005a54:	9306      	strmi	r3, [sp, #24]
 8005a56:	f1bb 0f00 	cmp.w	fp, #0
 8005a5a:	db3c      	blt.n	8005ad6 <_dtoa_r+0x24e>
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005a62:	445b      	add	r3, fp
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9308      	str	r3, [sp, #32]
 8005a6a:	9b07      	ldr	r3, [sp, #28]
 8005a6c:	2b09      	cmp	r3, #9
 8005a6e:	d868      	bhi.n	8005b42 <_dtoa_r+0x2ba>
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	bfc4      	itt	gt
 8005a74:	3b04      	subgt	r3, #4
 8005a76:	9307      	strgt	r3, [sp, #28]
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	f1a3 0302 	sub.w	r3, r3, #2
 8005a7e:	bfcc      	ite	gt
 8005a80:	2500      	movgt	r5, #0
 8005a82:	2501      	movle	r5, #1
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	f200 8085 	bhi.w	8005b94 <_dtoa_r+0x30c>
 8005a8a:	e8df f003 	tbb	[pc, r3]
 8005a8e:	3b2e      	.short	0x3b2e
 8005a90:	5839      	.short	0x5839
 8005a92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a96:	441d      	add	r5, r3
 8005a98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	bfc1      	itttt	gt
 8005aa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005aa4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005aa8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005aac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ab0:	bfd6      	itet	le
 8005ab2:	f1c3 0320 	rsble	r3, r3, #32
 8005ab6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005aba:	fa06 f003 	lslle.w	r0, r6, r3
 8005abe:	f7fa fd21 	bl	8000504 <__aeabi_ui2d>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ac8:	3d01      	subs	r5, #1
 8005aca:	920e      	str	r2, [sp, #56]	; 0x38
 8005acc:	e76f      	b.n	80059ae <_dtoa_r+0x126>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e7b3      	b.n	8005a3a <_dtoa_r+0x1b2>
 8005ad2:	900c      	str	r0, [sp, #48]	; 0x30
 8005ad4:	e7b2      	b.n	8005a3c <_dtoa_r+0x1b4>
 8005ad6:	9b05      	ldr	r3, [sp, #20]
 8005ad8:	eba3 030b 	sub.w	r3, r3, fp
 8005adc:	9305      	str	r3, [sp, #20]
 8005ade:	f1cb 0300 	rsb	r3, fp, #0
 8005ae2:	9308      	str	r3, [sp, #32]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae8:	e7bf      	b.n	8005a6a <_dtoa_r+0x1e2>
 8005aea:	2300      	movs	r3, #0
 8005aec:	9309      	str	r3, [sp, #36]	; 0x24
 8005aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dc52      	bgt.n	8005b9a <_dtoa_r+0x312>
 8005af4:	2301      	movs	r3, #1
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	461a      	mov	r2, r3
 8005afc:	920a      	str	r2, [sp, #40]	; 0x28
 8005afe:	e00b      	b.n	8005b18 <_dtoa_r+0x290>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7f3      	b.n	8005aec <_dtoa_r+0x264>
 8005b04:	2300      	movs	r3, #0
 8005b06:	9309      	str	r3, [sp, #36]	; 0x24
 8005b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0a:	445b      	add	r3, fp
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	bfb8      	it	lt
 8005b16:	2301      	movlt	r3, #1
 8005b18:	69e0      	ldr	r0, [r4, #28]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	f102 0614 	add.w	r6, r2, #20
 8005b22:	429e      	cmp	r6, r3
 8005b24:	d93d      	bls.n	8005ba2 <_dtoa_r+0x31a>
 8005b26:	6041      	str	r1, [r0, #4]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 fd9f 	bl	800666c <_Balloc>
 8005b2e:	9000      	str	r0, [sp, #0]
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d139      	bne.n	8005ba8 <_dtoa_r+0x320>
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <_dtoa_r+0x308>)
 8005b36:	4602      	mov	r2, r0
 8005b38:	f240 11af 	movw	r1, #431	; 0x1af
 8005b3c:	e6bd      	b.n	80058ba <_dtoa_r+0x32>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e7e1      	b.n	8005b06 <_dtoa_r+0x27e>
 8005b42:	2501      	movs	r5, #1
 8005b44:	2300      	movs	r3, #0
 8005b46:	9307      	str	r3, [sp, #28]
 8005b48:	9509      	str	r5, [sp, #36]	; 0x24
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2312      	movs	r3, #18
 8005b56:	e7d1      	b.n	8005afc <_dtoa_r+0x274>
 8005b58:	636f4361 	.word	0x636f4361
 8005b5c:	3fd287a7 	.word	0x3fd287a7
 8005b60:	8b60c8b3 	.word	0x8b60c8b3
 8005b64:	3fc68a28 	.word	0x3fc68a28
 8005b68:	509f79fb 	.word	0x509f79fb
 8005b6c:	3fd34413 	.word	0x3fd34413
 8005b70:	080077f1 	.word	0x080077f1
 8005b74:	08007808 	.word	0x08007808
 8005b78:	7ff00000 	.word	0x7ff00000
 8005b7c:	080077ed 	.word	0x080077ed
 8005b80:	080077e4 	.word	0x080077e4
 8005b84:	080077c1 	.word	0x080077c1
 8005b88:	3ff80000 	.word	0x3ff80000
 8005b8c:	080078f8 	.word	0x080078f8
 8005b90:	08007860 	.word	0x08007860
 8005b94:	2301      	movs	r3, #1
 8005b96:	9309      	str	r3, [sp, #36]	; 0x24
 8005b98:	e7d7      	b.n	8005b4a <_dtoa_r+0x2c2>
 8005b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	e7ba      	b.n	8005b18 <_dtoa_r+0x290>
 8005ba2:	3101      	adds	r1, #1
 8005ba4:	0052      	lsls	r2, r2, #1
 8005ba6:	e7ba      	b.n	8005b1e <_dtoa_r+0x296>
 8005ba8:	69e3      	ldr	r3, [r4, #28]
 8005baa:	9a00      	ldr	r2, [sp, #0]
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	2b0e      	cmp	r3, #14
 8005bb2:	f200 80a8 	bhi.w	8005d06 <_dtoa_r+0x47e>
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	f000 80a5 	beq.w	8005d06 <_dtoa_r+0x47e>
 8005bbc:	f1bb 0f00 	cmp.w	fp, #0
 8005bc0:	dd38      	ble.n	8005c34 <_dtoa_r+0x3ac>
 8005bc2:	4bc0      	ldr	r3, [pc, #768]	; (8005ec4 <_dtoa_r+0x63c>)
 8005bc4:	f00b 020f 	and.w	r2, fp, #15
 8005bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005bd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005bd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005bd8:	d019      	beq.n	8005c0e <_dtoa_r+0x386>
 8005bda:	4bbb      	ldr	r3, [pc, #748]	; (8005ec8 <_dtoa_r+0x640>)
 8005bdc:	ec51 0b18 	vmov	r0, r1, d8
 8005be0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005be4:	f7fa fe32 	bl	800084c <__aeabi_ddiv>
 8005be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bec:	f008 080f 	and.w	r8, r8, #15
 8005bf0:	2503      	movs	r5, #3
 8005bf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005ec8 <_dtoa_r+0x640>
 8005bf6:	f1b8 0f00 	cmp.w	r8, #0
 8005bfa:	d10a      	bne.n	8005c12 <_dtoa_r+0x38a>
 8005bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c00:	4632      	mov	r2, r6
 8005c02:	463b      	mov	r3, r7
 8005c04:	f7fa fe22 	bl	800084c <__aeabi_ddiv>
 8005c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0c:	e02b      	b.n	8005c66 <_dtoa_r+0x3de>
 8005c0e:	2502      	movs	r5, #2
 8005c10:	e7ef      	b.n	8005bf2 <_dtoa_r+0x36a>
 8005c12:	f018 0f01 	tst.w	r8, #1
 8005c16:	d008      	beq.n	8005c2a <_dtoa_r+0x3a2>
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c20:	f7fa fcea 	bl	80005f8 <__aeabi_dmul>
 8005c24:	3501      	adds	r5, #1
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c2e:	f109 0908 	add.w	r9, r9, #8
 8005c32:	e7e0      	b.n	8005bf6 <_dtoa_r+0x36e>
 8005c34:	f000 809f 	beq.w	8005d76 <_dtoa_r+0x4ee>
 8005c38:	f1cb 0600 	rsb	r6, fp, #0
 8005c3c:	4ba1      	ldr	r3, [pc, #644]	; (8005ec4 <_dtoa_r+0x63c>)
 8005c3e:	4fa2      	ldr	r7, [pc, #648]	; (8005ec8 <_dtoa_r+0x640>)
 8005c40:	f006 020f 	and.w	r2, r6, #15
 8005c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	ec51 0b18 	vmov	r0, r1, d8
 8005c50:	f7fa fcd2 	bl	80005f8 <__aeabi_dmul>
 8005c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c58:	1136      	asrs	r6, r6, #4
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2502      	movs	r5, #2
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	d17e      	bne.n	8005d60 <_dtoa_r+0x4d8>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d0      	bne.n	8005c08 <_dtoa_r+0x380>
 8005c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8084 	beq.w	8005d7a <_dtoa_r+0x4f2>
 8005c72:	4b96      	ldr	r3, [pc, #600]	; (8005ecc <_dtoa_r+0x644>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa ff2f 	bl	8000adc <__aeabi_dcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d07b      	beq.n	8005d7a <_dtoa_r+0x4f2>
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d078      	beq.n	8005d7a <_dtoa_r+0x4f2>
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd39      	ble.n	8005d02 <_dtoa_r+0x47a>
 8005c8e:	4b90      	ldr	r3, [pc, #576]	; (8005ed0 <_dtoa_r+0x648>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa fcaf 	bl	80005f8 <__aeabi_dmul>
 8005c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9e:	9e01      	ldr	r6, [sp, #4]
 8005ca0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fc3a 	bl	8000524 <__aeabi_i2d>
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	f7fa fca0 	bl	80005f8 <__aeabi_dmul>
 8005cb8:	4b86      	ldr	r3, [pc, #536]	; (8005ed4 <_dtoa_r+0x64c>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f7fa fae6 	bl	800028c <__adddf3>
 8005cc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cc8:	9303      	str	r3, [sp, #12]
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	d158      	bne.n	8005d80 <_dtoa_r+0x4f8>
 8005cce:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <_dtoa_r+0x650>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	f7fa fad7 	bl	8000288 <__aeabi_dsub>
 8005cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cde:	4680      	mov	r8, r0
 8005ce0:	4689      	mov	r9, r1
 8005ce2:	f7fa ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f040 8296 	bne.w	8006218 <_dtoa_r+0x990>
 8005cec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	f7fa fef0 	bl	8000adc <__aeabi_dcmplt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f040 8289 	bne.w	8006214 <_dtoa_r+0x98c>
 8005d02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f2c0 814e 	blt.w	8005faa <_dtoa_r+0x722>
 8005d0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005d12:	f300 814a 	bgt.w	8005faa <_dtoa_r+0x722>
 8005d16:	4b6b      	ldr	r3, [pc, #428]	; (8005ec4 <_dtoa_r+0x63c>)
 8005d18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f280 80dc 	bge.w	8005ee0 <_dtoa_r+0x658>
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f300 80d8 	bgt.w	8005ee0 <_dtoa_r+0x658>
 8005d30:	f040 826f 	bne.w	8006212 <_dtoa_r+0x98a>
 8005d34:	4b68      	ldr	r3, [pc, #416]	; (8005ed8 <_dtoa_r+0x650>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	4640      	mov	r0, r8
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	f7fa fc5c 	bl	80005f8 <__aeabi_dmul>
 8005d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d44:	f7fa fede 	bl	8000b04 <__aeabi_dcmpge>
 8005d48:	9e04      	ldr	r6, [sp, #16]
 8005d4a:	4637      	mov	r7, r6
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f040 8245 	bne.w	80061dc <_dtoa_r+0x954>
 8005d52:	9d00      	ldr	r5, [sp, #0]
 8005d54:	2331      	movs	r3, #49	; 0x31
 8005d56:	f805 3b01 	strb.w	r3, [r5], #1
 8005d5a:	f10b 0b01 	add.w	fp, fp, #1
 8005d5e:	e241      	b.n	80061e4 <_dtoa_r+0x95c>
 8005d60:	07f2      	lsls	r2, r6, #31
 8005d62:	d505      	bpl.n	8005d70 <_dtoa_r+0x4e8>
 8005d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d68:	f7fa fc46 	bl	80005f8 <__aeabi_dmul>
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	2301      	movs	r3, #1
 8005d70:	1076      	asrs	r6, r6, #1
 8005d72:	3708      	adds	r7, #8
 8005d74:	e773      	b.n	8005c5e <_dtoa_r+0x3d6>
 8005d76:	2502      	movs	r5, #2
 8005d78:	e775      	b.n	8005c66 <_dtoa_r+0x3de>
 8005d7a:	9e04      	ldr	r6, [sp, #16]
 8005d7c:	465f      	mov	r7, fp
 8005d7e:	e792      	b.n	8005ca6 <_dtoa_r+0x41e>
 8005d80:	9900      	ldr	r1, [sp, #0]
 8005d82:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <_dtoa_r+0x63c>)
 8005d84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d88:	4431      	add	r1, r6
 8005d8a:	9102      	str	r1, [sp, #8]
 8005d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d8e:	eeb0 9a47 	vmov.f32	s18, s14
 8005d92:	eef0 9a67 	vmov.f32	s19, s15
 8005d96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d044      	beq.n	8005e2c <_dtoa_r+0x5a4>
 8005da2:	494e      	ldr	r1, [pc, #312]	; (8005edc <_dtoa_r+0x654>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fa fd51 	bl	800084c <__aeabi_ddiv>
 8005daa:	ec53 2b19 	vmov	r2, r3, d9
 8005dae:	f7fa fa6b 	bl	8000288 <__aeabi_dsub>
 8005db2:	9d00      	ldr	r5, [sp, #0]
 8005db4:	ec41 0b19 	vmov	d9, r0, r1
 8005db8:	4649      	mov	r1, r9
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7fa fecc 	bl	8000b58 <__aeabi_d2iz>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	f7fa fbaf 	bl	8000524 <__aeabi_i2d>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fa5b 	bl	8000288 <__aeabi_dsub>
 8005dd2:	3630      	adds	r6, #48	; 0x30
 8005dd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd8:	ec53 2b19 	vmov	r2, r3, d9
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	f7fa fe7c 	bl	8000adc <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d164      	bne.n	8005eb2 <_dtoa_r+0x62a>
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	4937      	ldr	r1, [pc, #220]	; (8005ecc <_dtoa_r+0x644>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fa fa4a 	bl	8000288 <__aeabi_dsub>
 8005df4:	ec53 2b19 	vmov	r2, r3, d9
 8005df8:	f7fa fe70 	bl	8000adc <__aeabi_dcmplt>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f040 80b6 	bne.w	8005f6e <_dtoa_r+0x6e6>
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	429d      	cmp	r5, r3
 8005e06:	f43f af7c 	beq.w	8005d02 <_dtoa_r+0x47a>
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <_dtoa_r+0x648>)
 8005e0c:	ec51 0b19 	vmov	r0, r1, d9
 8005e10:	2200      	movs	r2, #0
 8005e12:	f7fa fbf1 	bl	80005f8 <__aeabi_dmul>
 8005e16:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <_dtoa_r+0x648>)
 8005e18:	ec41 0b19 	vmov	d9, r0, r1
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fbe9 	bl	80005f8 <__aeabi_dmul>
 8005e26:	4680      	mov	r8, r0
 8005e28:	4689      	mov	r9, r1
 8005e2a:	e7c5      	b.n	8005db8 <_dtoa_r+0x530>
 8005e2c:	ec51 0b17 	vmov	r0, r1, d7
 8005e30:	f7fa fbe2 	bl	80005f8 <__aeabi_dmul>
 8005e34:	9b02      	ldr	r3, [sp, #8]
 8005e36:	9d00      	ldr	r5, [sp, #0]
 8005e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e3a:	ec41 0b19 	vmov	d9, r0, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	f7fa fe89 	bl	8000b58 <__aeabi_d2iz>
 8005e46:	4606      	mov	r6, r0
 8005e48:	f7fa fb6c 	bl	8000524 <__aeabi_i2d>
 8005e4c:	3630      	adds	r6, #48	; 0x30
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fa17 	bl	8000288 <__aeabi_dsub>
 8005e5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e5e:	9b02      	ldr	r3, [sp, #8]
 8005e60:	429d      	cmp	r5, r3
 8005e62:	4680      	mov	r8, r0
 8005e64:	4689      	mov	r9, r1
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	d124      	bne.n	8005eb6 <_dtoa_r+0x62e>
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <_dtoa_r+0x654>)
 8005e6e:	ec51 0b19 	vmov	r0, r1, d9
 8005e72:	f7fa fa0b 	bl	800028c <__adddf3>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	f7fa fe4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d173      	bne.n	8005f6e <_dtoa_r+0x6e6>
 8005e86:	ec53 2b19 	vmov	r2, r3, d9
 8005e8a:	4914      	ldr	r1, [pc, #80]	; (8005edc <_dtoa_r+0x654>)
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7fa f9fb 	bl	8000288 <__aeabi_dsub>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fe1f 	bl	8000adc <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f43f af2f 	beq.w	8005d02 <_dtoa_r+0x47a>
 8005ea4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ea6:	1e6b      	subs	r3, r5, #1
 8005ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d0f8      	beq.n	8005ea4 <_dtoa_r+0x61c>
 8005eb2:	46bb      	mov	fp, r7
 8005eb4:	e04a      	b.n	8005f4c <_dtoa_r+0x6c4>
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <_dtoa_r+0x648>)
 8005eb8:	f7fa fb9e 	bl	80005f8 <__aeabi_dmul>
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	4689      	mov	r9, r1
 8005ec0:	e7bd      	b.n	8005e3e <_dtoa_r+0x5b6>
 8005ec2:	bf00      	nop
 8005ec4:	080078f8 	.word	0x080078f8
 8005ec8:	080078d0 	.word	0x080078d0
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	40240000 	.word	0x40240000
 8005ed4:	401c0000 	.word	0x401c0000
 8005ed8:	40140000 	.word	0x40140000
 8005edc:	3fe00000 	.word	0x3fe00000
 8005ee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ee4:	9d00      	ldr	r5, [sp, #0]
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4630      	mov	r0, r6
 8005eec:	4639      	mov	r1, r7
 8005eee:	f7fa fcad 	bl	800084c <__aeabi_ddiv>
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_d2iz>
 8005ef6:	9001      	str	r0, [sp, #4]
 8005ef8:	f7fa fb14 	bl	8000524 <__aeabi_i2d>
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	f7fa fb7a 	bl	80005f8 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa f9bc 	bl	8000288 <__aeabi_dsub>
 8005f10:	9e01      	ldr	r6, [sp, #4]
 8005f12:	9f04      	ldr	r7, [sp, #16]
 8005f14:	3630      	adds	r6, #48	; 0x30
 8005f16:	f805 6b01 	strb.w	r6, [r5], #1
 8005f1a:	9e00      	ldr	r6, [sp, #0]
 8005f1c:	1bae      	subs	r6, r5, r6
 8005f1e:	42b7      	cmp	r7, r6
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	d134      	bne.n	8005f90 <_dtoa_r+0x708>
 8005f26:	f7fa f9b1 	bl	800028c <__adddf3>
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460f      	mov	r7, r1
 8005f32:	f7fa fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 8005f36:	b9c8      	cbnz	r0, 8005f6c <_dtoa_r+0x6e4>
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f44:	b110      	cbz	r0, 8005f4c <_dtoa_r+0x6c4>
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	07db      	lsls	r3, r3, #31
 8005f4a:	d40f      	bmi.n	8005f6c <_dtoa_r+0x6e4>
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fbcc 	bl	80066ec <_Bfree>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f58:	702b      	strb	r3, [r5, #0]
 8005f5a:	f10b 0301 	add.w	r3, fp, #1
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f43f ace2 	beq.w	800592c <_dtoa_r+0xa4>
 8005f68:	601d      	str	r5, [r3, #0]
 8005f6a:	e4df      	b.n	800592c <_dtoa_r+0xa4>
 8005f6c:	465f      	mov	r7, fp
 8005f6e:	462b      	mov	r3, r5
 8005f70:	461d      	mov	r5, r3
 8005f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f76:	2a39      	cmp	r2, #57	; 0x39
 8005f78:	d106      	bne.n	8005f88 <_dtoa_r+0x700>
 8005f7a:	9a00      	ldr	r2, [sp, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1f7      	bne.n	8005f70 <_dtoa_r+0x6e8>
 8005f80:	9900      	ldr	r1, [sp, #0]
 8005f82:	2230      	movs	r2, #48	; 0x30
 8005f84:	3701      	adds	r7, #1
 8005f86:	700a      	strb	r2, [r1, #0]
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e790      	b.n	8005eb2 <_dtoa_r+0x62a>
 8005f90:	4ba3      	ldr	r3, [pc, #652]	; (8006220 <_dtoa_r+0x998>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	460f      	mov	r7, r1
 8005fa0:	f7fa fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d09e      	beq.n	8005ee6 <_dtoa_r+0x65e>
 8005fa8:	e7d0      	b.n	8005f4c <_dtoa_r+0x6c4>
 8005faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	f000 80ca 	beq.w	8006146 <_dtoa_r+0x8be>
 8005fb2:	9a07      	ldr	r2, [sp, #28]
 8005fb4:	2a01      	cmp	r2, #1
 8005fb6:	f300 80ad 	bgt.w	8006114 <_dtoa_r+0x88c>
 8005fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	f000 80a5 	beq.w	800610c <_dtoa_r+0x884>
 8005fc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fc6:	9e08      	ldr	r6, [sp, #32]
 8005fc8:	9d05      	ldr	r5, [sp, #20]
 8005fca:	9a05      	ldr	r2, [sp, #20]
 8005fcc:	441a      	add	r2, r3
 8005fce:	9205      	str	r2, [sp, #20]
 8005fd0:	9a06      	ldr	r2, [sp, #24]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	441a      	add	r2, r3
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	9206      	str	r2, [sp, #24]
 8005fda:	f000 fc3d 	bl	8006858 <__i2b>
 8005fde:	4607      	mov	r7, r0
 8005fe0:	b165      	cbz	r5, 8005ffc <_dtoa_r+0x774>
 8005fe2:	9b06      	ldr	r3, [sp, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd09      	ble.n	8005ffc <_dtoa_r+0x774>
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	9a05      	ldr	r2, [sp, #20]
 8005fec:	bfa8      	it	ge
 8005fee:	462b      	movge	r3, r5
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	9205      	str	r2, [sp, #20]
 8005ff4:	9a06      	ldr	r2, [sp, #24]
 8005ff6:	1aed      	subs	r5, r5, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	9306      	str	r3, [sp, #24]
 8005ffc:	9b08      	ldr	r3, [sp, #32]
 8005ffe:	b1f3      	cbz	r3, 800603e <_dtoa_r+0x7b6>
 8006000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80a3 	beq.w	800614e <_dtoa_r+0x8c6>
 8006008:	2e00      	cmp	r6, #0
 800600a:	dd10      	ble.n	800602e <_dtoa_r+0x7a6>
 800600c:	4639      	mov	r1, r7
 800600e:	4632      	mov	r2, r6
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fce1 	bl	80069d8 <__pow5mult>
 8006016:	4652      	mov	r2, sl
 8006018:	4601      	mov	r1, r0
 800601a:	4607      	mov	r7, r0
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fc31 	bl	8006884 <__multiply>
 8006022:	4651      	mov	r1, sl
 8006024:	4680      	mov	r8, r0
 8006026:	4620      	mov	r0, r4
 8006028:	f000 fb60 	bl	80066ec <_Bfree>
 800602c:	46c2      	mov	sl, r8
 800602e:	9b08      	ldr	r3, [sp, #32]
 8006030:	1b9a      	subs	r2, r3, r6
 8006032:	d004      	beq.n	800603e <_dtoa_r+0x7b6>
 8006034:	4651      	mov	r1, sl
 8006036:	4620      	mov	r0, r4
 8006038:	f000 fcce 	bl	80069d8 <__pow5mult>
 800603c:	4682      	mov	sl, r0
 800603e:	2101      	movs	r1, #1
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fc09 	bl	8006858 <__i2b>
 8006046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	4606      	mov	r6, r0
 800604c:	f340 8081 	ble.w	8006152 <_dtoa_r+0x8ca>
 8006050:	461a      	mov	r2, r3
 8006052:	4601      	mov	r1, r0
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fcbf 	bl	80069d8 <__pow5mult>
 800605a:	9b07      	ldr	r3, [sp, #28]
 800605c:	2b01      	cmp	r3, #1
 800605e:	4606      	mov	r6, r0
 8006060:	dd7a      	ble.n	8006158 <_dtoa_r+0x8d0>
 8006062:	f04f 0800 	mov.w	r8, #0
 8006066:	6933      	ldr	r3, [r6, #16]
 8006068:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800606c:	6918      	ldr	r0, [r3, #16]
 800606e:	f000 fba5 	bl	80067bc <__hi0bits>
 8006072:	f1c0 0020 	rsb	r0, r0, #32
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	4418      	add	r0, r3
 800607a:	f010 001f 	ands.w	r0, r0, #31
 800607e:	f000 8094 	beq.w	80061aa <_dtoa_r+0x922>
 8006082:	f1c0 0320 	rsb	r3, r0, #32
 8006086:	2b04      	cmp	r3, #4
 8006088:	f340 8085 	ble.w	8006196 <_dtoa_r+0x90e>
 800608c:	9b05      	ldr	r3, [sp, #20]
 800608e:	f1c0 001c 	rsb	r0, r0, #28
 8006092:	4403      	add	r3, r0
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	9b06      	ldr	r3, [sp, #24]
 8006098:	4403      	add	r3, r0
 800609a:	4405      	add	r5, r0
 800609c:	9306      	str	r3, [sp, #24]
 800609e:	9b05      	ldr	r3, [sp, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dd05      	ble.n	80060b0 <_dtoa_r+0x828>
 80060a4:	4651      	mov	r1, sl
 80060a6:	461a      	mov	r2, r3
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fcef 	bl	8006a8c <__lshift>
 80060ae:	4682      	mov	sl, r0
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dd05      	ble.n	80060c2 <_dtoa_r+0x83a>
 80060b6:	4631      	mov	r1, r6
 80060b8:	461a      	mov	r2, r3
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fce6 	bl	8006a8c <__lshift>
 80060c0:	4606      	mov	r6, r0
 80060c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d072      	beq.n	80061ae <_dtoa_r+0x926>
 80060c8:	4631      	mov	r1, r6
 80060ca:	4650      	mov	r0, sl
 80060cc:	f000 fd4a 	bl	8006b64 <__mcmp>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	da6c      	bge.n	80061ae <_dtoa_r+0x926>
 80060d4:	2300      	movs	r3, #0
 80060d6:	4651      	mov	r1, sl
 80060d8:	220a      	movs	r2, #10
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 fb28 	bl	8006730 <__multadd>
 80060e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060e6:	4682      	mov	sl, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 81b0 	beq.w	800644e <_dtoa_r+0xbc6>
 80060ee:	2300      	movs	r3, #0
 80060f0:	4639      	mov	r1, r7
 80060f2:	220a      	movs	r2, #10
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fb1b 	bl	8006730 <__multadd>
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	4607      	mov	r7, r0
 8006100:	f300 8096 	bgt.w	8006230 <_dtoa_r+0x9a8>
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	2b02      	cmp	r3, #2
 8006108:	dc59      	bgt.n	80061be <_dtoa_r+0x936>
 800610a:	e091      	b.n	8006230 <_dtoa_r+0x9a8>
 800610c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800610e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006112:	e758      	b.n	8005fc6 <_dtoa_r+0x73e>
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	1e5e      	subs	r6, r3, #1
 8006118:	9b08      	ldr	r3, [sp, #32]
 800611a:	42b3      	cmp	r3, r6
 800611c:	bfbf      	itttt	lt
 800611e:	9b08      	ldrlt	r3, [sp, #32]
 8006120:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006122:	9608      	strlt	r6, [sp, #32]
 8006124:	1af3      	sublt	r3, r6, r3
 8006126:	bfb4      	ite	lt
 8006128:	18d2      	addlt	r2, r2, r3
 800612a:	1b9e      	subge	r6, r3, r6
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	bfbc      	itt	lt
 8006130:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006132:	2600      	movlt	r6, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	bfb7      	itett	lt
 8006138:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800613c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006140:	1a9d      	sublt	r5, r3, r2
 8006142:	2300      	movlt	r3, #0
 8006144:	e741      	b.n	8005fca <_dtoa_r+0x742>
 8006146:	9e08      	ldr	r6, [sp, #32]
 8006148:	9d05      	ldr	r5, [sp, #20]
 800614a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800614c:	e748      	b.n	8005fe0 <_dtoa_r+0x758>
 800614e:	9a08      	ldr	r2, [sp, #32]
 8006150:	e770      	b.n	8006034 <_dtoa_r+0x7ac>
 8006152:	9b07      	ldr	r3, [sp, #28]
 8006154:	2b01      	cmp	r3, #1
 8006156:	dc19      	bgt.n	800618c <_dtoa_r+0x904>
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	b9bb      	cbnz	r3, 800618c <_dtoa_r+0x904>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006162:	b99b      	cbnz	r3, 800618c <_dtoa_r+0x904>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800616a:	0d1b      	lsrs	r3, r3, #20
 800616c:	051b      	lsls	r3, r3, #20
 800616e:	b183      	cbz	r3, 8006192 <_dtoa_r+0x90a>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	3301      	adds	r3, #1
 800617a:	9306      	str	r3, [sp, #24]
 800617c:	f04f 0801 	mov.w	r8, #1
 8006180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f af6f 	bne.w	8006066 <_dtoa_r+0x7de>
 8006188:	2001      	movs	r0, #1
 800618a:	e774      	b.n	8006076 <_dtoa_r+0x7ee>
 800618c:	f04f 0800 	mov.w	r8, #0
 8006190:	e7f6      	b.n	8006180 <_dtoa_r+0x8f8>
 8006192:	4698      	mov	r8, r3
 8006194:	e7f4      	b.n	8006180 <_dtoa_r+0x8f8>
 8006196:	d082      	beq.n	800609e <_dtoa_r+0x816>
 8006198:	9a05      	ldr	r2, [sp, #20]
 800619a:	331c      	adds	r3, #28
 800619c:	441a      	add	r2, r3
 800619e:	9205      	str	r2, [sp, #20]
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	441a      	add	r2, r3
 80061a4:	441d      	add	r5, r3
 80061a6:	9206      	str	r2, [sp, #24]
 80061a8:	e779      	b.n	800609e <_dtoa_r+0x816>
 80061aa:	4603      	mov	r3, r0
 80061ac:	e7f4      	b.n	8006198 <_dtoa_r+0x910>
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dc37      	bgt.n	8006224 <_dtoa_r+0x99c>
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	dd34      	ble.n	8006224 <_dtoa_r+0x99c>
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	b963      	cbnz	r3, 80061dc <_dtoa_r+0x954>
 80061c2:	4631      	mov	r1, r6
 80061c4:	2205      	movs	r2, #5
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 fab2 	bl	8006730 <__multadd>
 80061cc:	4601      	mov	r1, r0
 80061ce:	4606      	mov	r6, r0
 80061d0:	4650      	mov	r0, sl
 80061d2:	f000 fcc7 	bl	8006b64 <__mcmp>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f73f adbb 	bgt.w	8005d52 <_dtoa_r+0x4ca>
 80061dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061de:	9d00      	ldr	r5, [sp, #0]
 80061e0:	ea6f 0b03 	mvn.w	fp, r3
 80061e4:	f04f 0800 	mov.w	r8, #0
 80061e8:	4631      	mov	r1, r6
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fa7e 	bl	80066ec <_Bfree>
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f43f aeab 	beq.w	8005f4c <_dtoa_r+0x6c4>
 80061f6:	f1b8 0f00 	cmp.w	r8, #0
 80061fa:	d005      	beq.n	8006208 <_dtoa_r+0x980>
 80061fc:	45b8      	cmp	r8, r7
 80061fe:	d003      	beq.n	8006208 <_dtoa_r+0x980>
 8006200:	4641      	mov	r1, r8
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fa72 	bl	80066ec <_Bfree>
 8006208:	4639      	mov	r1, r7
 800620a:	4620      	mov	r0, r4
 800620c:	f000 fa6e 	bl	80066ec <_Bfree>
 8006210:	e69c      	b.n	8005f4c <_dtoa_r+0x6c4>
 8006212:	2600      	movs	r6, #0
 8006214:	4637      	mov	r7, r6
 8006216:	e7e1      	b.n	80061dc <_dtoa_r+0x954>
 8006218:	46bb      	mov	fp, r7
 800621a:	4637      	mov	r7, r6
 800621c:	e599      	b.n	8005d52 <_dtoa_r+0x4ca>
 800621e:	bf00      	nop
 8006220:	40240000 	.word	0x40240000
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80c8 	beq.w	80063bc <_dtoa_r+0xb34>
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	2d00      	cmp	r5, #0
 8006232:	dd05      	ble.n	8006240 <_dtoa_r+0x9b8>
 8006234:	4639      	mov	r1, r7
 8006236:	462a      	mov	r2, r5
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fc27 	bl	8006a8c <__lshift>
 800623e:	4607      	mov	r7, r0
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d05b      	beq.n	80062fe <_dtoa_r+0xa76>
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fa0f 	bl	800666c <_Balloc>
 800624e:	4605      	mov	r5, r0
 8006250:	b928      	cbnz	r0, 800625e <_dtoa_r+0x9d6>
 8006252:	4b83      	ldr	r3, [pc, #524]	; (8006460 <_dtoa_r+0xbd8>)
 8006254:	4602      	mov	r2, r0
 8006256:	f240 21ef 	movw	r1, #751	; 0x2ef
 800625a:	f7ff bb2e 	b.w	80058ba <_dtoa_r+0x32>
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	3202      	adds	r2, #2
 8006262:	0092      	lsls	r2, r2, #2
 8006264:	f107 010c 	add.w	r1, r7, #12
 8006268:	300c      	adds	r0, #12
 800626a:	f001 f973 	bl	8007554 <memcpy>
 800626e:	2201      	movs	r2, #1
 8006270:	4629      	mov	r1, r5
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fc0a 	bl	8006a8c <__lshift>
 8006278:	9b00      	ldr	r3, [sp, #0]
 800627a:	3301      	adds	r3, #1
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006282:	4413      	add	r3, r2
 8006284:	9308      	str	r3, [sp, #32]
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	46b8      	mov	r8, r7
 800628e:	9306      	str	r3, [sp, #24]
 8006290:	4607      	mov	r7, r0
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	4631      	mov	r1, r6
 8006296:	3b01      	subs	r3, #1
 8006298:	4650      	mov	r0, sl
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	f7ff fa6a 	bl	8005774 <quorem>
 80062a0:	4641      	mov	r1, r8
 80062a2:	9002      	str	r0, [sp, #8]
 80062a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062a8:	4650      	mov	r0, sl
 80062aa:	f000 fc5b 	bl	8006b64 <__mcmp>
 80062ae:	463a      	mov	r2, r7
 80062b0:	9005      	str	r0, [sp, #20]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4620      	mov	r0, r4
 80062b6:	f000 fc71 	bl	8006b9c <__mdiff>
 80062ba:	68c2      	ldr	r2, [r0, #12]
 80062bc:	4605      	mov	r5, r0
 80062be:	bb02      	cbnz	r2, 8006302 <_dtoa_r+0xa7a>
 80062c0:	4601      	mov	r1, r0
 80062c2:	4650      	mov	r0, sl
 80062c4:	f000 fc4e 	bl	8006b64 <__mcmp>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4629      	mov	r1, r5
 80062cc:	4620      	mov	r0, r4
 80062ce:	9209      	str	r2, [sp, #36]	; 0x24
 80062d0:	f000 fa0c 	bl	80066ec <_Bfree>
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d8:	9d04      	ldr	r5, [sp, #16]
 80062da:	ea43 0102 	orr.w	r1, r3, r2
 80062de:	9b06      	ldr	r3, [sp, #24]
 80062e0:	4319      	orrs	r1, r3
 80062e2:	d110      	bne.n	8006306 <_dtoa_r+0xa7e>
 80062e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062e8:	d029      	beq.n	800633e <_dtoa_r+0xab6>
 80062ea:	9b05      	ldr	r3, [sp, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dd02      	ble.n	80062f6 <_dtoa_r+0xa6e>
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	f883 9000 	strb.w	r9, [r3]
 80062fc:	e774      	b.n	80061e8 <_dtoa_r+0x960>
 80062fe:	4638      	mov	r0, r7
 8006300:	e7ba      	b.n	8006278 <_dtoa_r+0x9f0>
 8006302:	2201      	movs	r2, #1
 8006304:	e7e1      	b.n	80062ca <_dtoa_r+0xa42>
 8006306:	9b05      	ldr	r3, [sp, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	db04      	blt.n	8006316 <_dtoa_r+0xa8e>
 800630c:	9907      	ldr	r1, [sp, #28]
 800630e:	430b      	orrs	r3, r1
 8006310:	9906      	ldr	r1, [sp, #24]
 8006312:	430b      	orrs	r3, r1
 8006314:	d120      	bne.n	8006358 <_dtoa_r+0xad0>
 8006316:	2a00      	cmp	r2, #0
 8006318:	dded      	ble.n	80062f6 <_dtoa_r+0xa6e>
 800631a:	4651      	mov	r1, sl
 800631c:	2201      	movs	r2, #1
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fbb4 	bl	8006a8c <__lshift>
 8006324:	4631      	mov	r1, r6
 8006326:	4682      	mov	sl, r0
 8006328:	f000 fc1c 	bl	8006b64 <__mcmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	dc03      	bgt.n	8006338 <_dtoa_r+0xab0>
 8006330:	d1e1      	bne.n	80062f6 <_dtoa_r+0xa6e>
 8006332:	f019 0f01 	tst.w	r9, #1
 8006336:	d0de      	beq.n	80062f6 <_dtoa_r+0xa6e>
 8006338:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800633c:	d1d8      	bne.n	80062f0 <_dtoa_r+0xa68>
 800633e:	9a01      	ldr	r2, [sp, #4]
 8006340:	2339      	movs	r3, #57	; 0x39
 8006342:	7013      	strb	r3, [r2, #0]
 8006344:	462b      	mov	r3, r5
 8006346:	461d      	mov	r5, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800634e:	2a39      	cmp	r2, #57	; 0x39
 8006350:	d06c      	beq.n	800642c <_dtoa_r+0xba4>
 8006352:	3201      	adds	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e747      	b.n	80061e8 <_dtoa_r+0x960>
 8006358:	2a00      	cmp	r2, #0
 800635a:	dd07      	ble.n	800636c <_dtoa_r+0xae4>
 800635c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006360:	d0ed      	beq.n	800633e <_dtoa_r+0xab6>
 8006362:	9a01      	ldr	r2, [sp, #4]
 8006364:	f109 0301 	add.w	r3, r9, #1
 8006368:	7013      	strb	r3, [r2, #0]
 800636a:	e73d      	b.n	80061e8 <_dtoa_r+0x960>
 800636c:	9b04      	ldr	r3, [sp, #16]
 800636e:	9a08      	ldr	r2, [sp, #32]
 8006370:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006374:	4293      	cmp	r3, r2
 8006376:	d043      	beq.n	8006400 <_dtoa_r+0xb78>
 8006378:	4651      	mov	r1, sl
 800637a:	2300      	movs	r3, #0
 800637c:	220a      	movs	r2, #10
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f9d6 	bl	8006730 <__multadd>
 8006384:	45b8      	cmp	r8, r7
 8006386:	4682      	mov	sl, r0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	f04f 020a 	mov.w	r2, #10
 8006390:	4641      	mov	r1, r8
 8006392:	4620      	mov	r0, r4
 8006394:	d107      	bne.n	80063a6 <_dtoa_r+0xb1e>
 8006396:	f000 f9cb 	bl	8006730 <__multadd>
 800639a:	4680      	mov	r8, r0
 800639c:	4607      	mov	r7, r0
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	e775      	b.n	8006292 <_dtoa_r+0xa0a>
 80063a6:	f000 f9c3 	bl	8006730 <__multadd>
 80063aa:	4639      	mov	r1, r7
 80063ac:	4680      	mov	r8, r0
 80063ae:	2300      	movs	r3, #0
 80063b0:	220a      	movs	r2, #10
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f9bc 	bl	8006730 <__multadd>
 80063b8:	4607      	mov	r7, r0
 80063ba:	e7f0      	b.n	800639e <_dtoa_r+0xb16>
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	9d00      	ldr	r5, [sp, #0]
 80063c2:	4631      	mov	r1, r6
 80063c4:	4650      	mov	r0, sl
 80063c6:	f7ff f9d5 	bl	8005774 <quorem>
 80063ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063ce:	9b00      	ldr	r3, [sp, #0]
 80063d0:	f805 9b01 	strb.w	r9, [r5], #1
 80063d4:	1aea      	subs	r2, r5, r3
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	4293      	cmp	r3, r2
 80063da:	dd07      	ble.n	80063ec <_dtoa_r+0xb64>
 80063dc:	4651      	mov	r1, sl
 80063de:	2300      	movs	r3, #0
 80063e0:	220a      	movs	r2, #10
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 f9a4 	bl	8006730 <__multadd>
 80063e8:	4682      	mov	sl, r0
 80063ea:	e7ea      	b.n	80063c2 <_dtoa_r+0xb3a>
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfc8      	it	gt
 80063f2:	461d      	movgt	r5, r3
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	bfd8      	it	le
 80063f8:	2501      	movle	r5, #1
 80063fa:	441d      	add	r5, r3
 80063fc:	f04f 0800 	mov.w	r8, #0
 8006400:	4651      	mov	r1, sl
 8006402:	2201      	movs	r2, #1
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fb41 	bl	8006a8c <__lshift>
 800640a:	4631      	mov	r1, r6
 800640c:	4682      	mov	sl, r0
 800640e:	f000 fba9 	bl	8006b64 <__mcmp>
 8006412:	2800      	cmp	r0, #0
 8006414:	dc96      	bgt.n	8006344 <_dtoa_r+0xabc>
 8006416:	d102      	bne.n	800641e <_dtoa_r+0xb96>
 8006418:	f019 0f01 	tst.w	r9, #1
 800641c:	d192      	bne.n	8006344 <_dtoa_r+0xabc>
 800641e:	462b      	mov	r3, r5
 8006420:	461d      	mov	r5, r3
 8006422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006426:	2a30      	cmp	r2, #48	; 0x30
 8006428:	d0fa      	beq.n	8006420 <_dtoa_r+0xb98>
 800642a:	e6dd      	b.n	80061e8 <_dtoa_r+0x960>
 800642c:	9a00      	ldr	r2, [sp, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d189      	bne.n	8006346 <_dtoa_r+0xabe>
 8006432:	f10b 0b01 	add.w	fp, fp, #1
 8006436:	2331      	movs	r3, #49	; 0x31
 8006438:	e796      	b.n	8006368 <_dtoa_r+0xae0>
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <_dtoa_r+0xbdc>)
 800643c:	f7ff ba99 	b.w	8005972 <_dtoa_r+0xea>
 8006440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f aa6d 	bne.w	8005922 <_dtoa_r+0x9a>
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <_dtoa_r+0xbe0>)
 800644a:	f7ff ba92 	b.w	8005972 <_dtoa_r+0xea>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dcb5      	bgt.n	80063c0 <_dtoa_r+0xb38>
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	2b02      	cmp	r3, #2
 8006458:	f73f aeb1 	bgt.w	80061be <_dtoa_r+0x936>
 800645c:	e7b0      	b.n	80063c0 <_dtoa_r+0xb38>
 800645e:	bf00      	nop
 8006460:	08007860 	.word	0x08007860
 8006464:	080077c0 	.word	0x080077c0
 8006468:	080077e4 	.word	0x080077e4

0800646c <_free_r>:
 800646c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800646e:	2900      	cmp	r1, #0
 8006470:	d044      	beq.n	80064fc <_free_r+0x90>
 8006472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006476:	9001      	str	r0, [sp, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f1a1 0404 	sub.w	r4, r1, #4
 800647e:	bfb8      	it	lt
 8006480:	18e4      	addlt	r4, r4, r3
 8006482:	f000 f8e7 	bl	8006654 <__malloc_lock>
 8006486:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <_free_r+0x94>)
 8006488:	9801      	ldr	r0, [sp, #4]
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	b933      	cbnz	r3, 800649c <_free_r+0x30>
 800648e:	6063      	str	r3, [r4, #4]
 8006490:	6014      	str	r4, [r2, #0]
 8006492:	b003      	add	sp, #12
 8006494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006498:	f000 b8e2 	b.w	8006660 <__malloc_unlock>
 800649c:	42a3      	cmp	r3, r4
 800649e:	d908      	bls.n	80064b2 <_free_r+0x46>
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	1961      	adds	r1, r4, r5
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf01      	itttt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	1949      	addeq	r1, r1, r5
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	e7ed      	b.n	800648e <_free_r+0x22>
 80064b2:	461a      	mov	r2, r3
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	b10b      	cbz	r3, 80064bc <_free_r+0x50>
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d9fa      	bls.n	80064b2 <_free_r+0x46>
 80064bc:	6811      	ldr	r1, [r2, #0]
 80064be:	1855      	adds	r5, r2, r1
 80064c0:	42a5      	cmp	r5, r4
 80064c2:	d10b      	bne.n	80064dc <_free_r+0x70>
 80064c4:	6824      	ldr	r4, [r4, #0]
 80064c6:	4421      	add	r1, r4
 80064c8:	1854      	adds	r4, r2, r1
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	d1e0      	bne.n	8006492 <_free_r+0x26>
 80064d0:	681c      	ldr	r4, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	6053      	str	r3, [r2, #4]
 80064d6:	440c      	add	r4, r1
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	e7da      	b.n	8006492 <_free_r+0x26>
 80064dc:	d902      	bls.n	80064e4 <_free_r+0x78>
 80064de:	230c      	movs	r3, #12
 80064e0:	6003      	str	r3, [r0, #0]
 80064e2:	e7d6      	b.n	8006492 <_free_r+0x26>
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	1961      	adds	r1, r4, r5
 80064e8:	428b      	cmp	r3, r1
 80064ea:	bf04      	itt	eq
 80064ec:	6819      	ldreq	r1, [r3, #0]
 80064ee:	685b      	ldreq	r3, [r3, #4]
 80064f0:	6063      	str	r3, [r4, #4]
 80064f2:	bf04      	itt	eq
 80064f4:	1949      	addeq	r1, r1, r5
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	6054      	str	r4, [r2, #4]
 80064fa:	e7ca      	b.n	8006492 <_free_r+0x26>
 80064fc:	b003      	add	sp, #12
 80064fe:	bd30      	pop	{r4, r5, pc}
 8006500:	20000390 	.word	0x20000390

08006504 <malloc>:
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <malloc+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f000 b823 	b.w	8006554 <_malloc_r>
 800650e:	bf00      	nop
 8006510:	20000064 	.word	0x20000064

08006514 <sbrk_aligned>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4e0e      	ldr	r6, [pc, #56]	; (8006550 <sbrk_aligned+0x3c>)
 8006518:	460c      	mov	r4, r1
 800651a:	6831      	ldr	r1, [r6, #0]
 800651c:	4605      	mov	r5, r0
 800651e:	b911      	cbnz	r1, 8006526 <sbrk_aligned+0x12>
 8006520:	f001 f808 	bl	8007534 <_sbrk_r>
 8006524:	6030      	str	r0, [r6, #0]
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f001 f803 	bl	8007534 <_sbrk_r>
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	d00a      	beq.n	8006548 <sbrk_aligned+0x34>
 8006532:	1cc4      	adds	r4, r0, #3
 8006534:	f024 0403 	bic.w	r4, r4, #3
 8006538:	42a0      	cmp	r0, r4
 800653a:	d007      	beq.n	800654c <sbrk_aligned+0x38>
 800653c:	1a21      	subs	r1, r4, r0
 800653e:	4628      	mov	r0, r5
 8006540:	f000 fff8 	bl	8007534 <_sbrk_r>
 8006544:	3001      	adds	r0, #1
 8006546:	d101      	bne.n	800654c <sbrk_aligned+0x38>
 8006548:	f04f 34ff 	mov.w	r4, #4294967295
 800654c:	4620      	mov	r0, r4
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	20000394 	.word	0x20000394

08006554 <_malloc_r>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	1ccd      	adds	r5, r1, #3
 800655a:	f025 0503 	bic.w	r5, r5, #3
 800655e:	3508      	adds	r5, #8
 8006560:	2d0c      	cmp	r5, #12
 8006562:	bf38      	it	cc
 8006564:	250c      	movcc	r5, #12
 8006566:	2d00      	cmp	r5, #0
 8006568:	4607      	mov	r7, r0
 800656a:	db01      	blt.n	8006570 <_malloc_r+0x1c>
 800656c:	42a9      	cmp	r1, r5
 800656e:	d905      	bls.n	800657c <_malloc_r+0x28>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	2600      	movs	r6, #0
 8006576:	4630      	mov	r0, r6
 8006578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006650 <_malloc_r+0xfc>
 8006580:	f000 f868 	bl	8006654 <__malloc_lock>
 8006584:	f8d8 3000 	ldr.w	r3, [r8]
 8006588:	461c      	mov	r4, r3
 800658a:	bb5c      	cbnz	r4, 80065e4 <_malloc_r+0x90>
 800658c:	4629      	mov	r1, r5
 800658e:	4638      	mov	r0, r7
 8006590:	f7ff ffc0 	bl	8006514 <sbrk_aligned>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	4604      	mov	r4, r0
 8006598:	d155      	bne.n	8006646 <_malloc_r+0xf2>
 800659a:	f8d8 4000 	ldr.w	r4, [r8]
 800659e:	4626      	mov	r6, r4
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	d145      	bne.n	8006630 <_malloc_r+0xdc>
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d048      	beq.n	800663a <_malloc_r+0xe6>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	4631      	mov	r1, r6
 80065ac:	4638      	mov	r0, r7
 80065ae:	eb04 0903 	add.w	r9, r4, r3
 80065b2:	f000 ffbf 	bl	8007534 <_sbrk_r>
 80065b6:	4581      	cmp	r9, r0
 80065b8:	d13f      	bne.n	800663a <_malloc_r+0xe6>
 80065ba:	6821      	ldr	r1, [r4, #0]
 80065bc:	1a6d      	subs	r5, r5, r1
 80065be:	4629      	mov	r1, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ffa7 	bl	8006514 <sbrk_aligned>
 80065c6:	3001      	adds	r0, #1
 80065c8:	d037      	beq.n	800663a <_malloc_r+0xe6>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	442b      	add	r3, r5
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	f8d8 3000 	ldr.w	r3, [r8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d038      	beq.n	800664a <_malloc_r+0xf6>
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	42a2      	cmp	r2, r4
 80065dc:	d12b      	bne.n	8006636 <_malloc_r+0xe2>
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e00f      	b.n	8006604 <_malloc_r+0xb0>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	1b52      	subs	r2, r2, r5
 80065e8:	d41f      	bmi.n	800662a <_malloc_r+0xd6>
 80065ea:	2a0b      	cmp	r2, #11
 80065ec:	d917      	bls.n	800661e <_malloc_r+0xca>
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	6025      	str	r5, [r4, #0]
 80065f4:	bf18      	it	ne
 80065f6:	6059      	strne	r1, [r3, #4]
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	bf08      	it	eq
 80065fc:	f8c8 1000 	streq.w	r1, [r8]
 8006600:	5162      	str	r2, [r4, r5]
 8006602:	604b      	str	r3, [r1, #4]
 8006604:	4638      	mov	r0, r7
 8006606:	f104 060b 	add.w	r6, r4, #11
 800660a:	f000 f829 	bl	8006660 <__malloc_unlock>
 800660e:	f026 0607 	bic.w	r6, r6, #7
 8006612:	1d23      	adds	r3, r4, #4
 8006614:	1af2      	subs	r2, r6, r3
 8006616:	d0ae      	beq.n	8006576 <_malloc_r+0x22>
 8006618:	1b9b      	subs	r3, r3, r6
 800661a:	50a3      	str	r3, [r4, r2]
 800661c:	e7ab      	b.n	8006576 <_malloc_r+0x22>
 800661e:	42a3      	cmp	r3, r4
 8006620:	6862      	ldr	r2, [r4, #4]
 8006622:	d1dd      	bne.n	80065e0 <_malloc_r+0x8c>
 8006624:	f8c8 2000 	str.w	r2, [r8]
 8006628:	e7ec      	b.n	8006604 <_malloc_r+0xb0>
 800662a:	4623      	mov	r3, r4
 800662c:	6864      	ldr	r4, [r4, #4]
 800662e:	e7ac      	b.n	800658a <_malloc_r+0x36>
 8006630:	4634      	mov	r4, r6
 8006632:	6876      	ldr	r6, [r6, #4]
 8006634:	e7b4      	b.n	80065a0 <_malloc_r+0x4c>
 8006636:	4613      	mov	r3, r2
 8006638:	e7cc      	b.n	80065d4 <_malloc_r+0x80>
 800663a:	230c      	movs	r3, #12
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4638      	mov	r0, r7
 8006640:	f000 f80e 	bl	8006660 <__malloc_unlock>
 8006644:	e797      	b.n	8006576 <_malloc_r+0x22>
 8006646:	6025      	str	r5, [r4, #0]
 8006648:	e7dc      	b.n	8006604 <_malloc_r+0xb0>
 800664a:	605b      	str	r3, [r3, #4]
 800664c:	deff      	udf	#255	; 0xff
 800664e:	bf00      	nop
 8006650:	20000390 	.word	0x20000390

08006654 <__malloc_lock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_lock+0x8>)
 8006656:	f7ff b88b 	b.w	8005770 <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	2000038c 	.word	0x2000038c

08006660 <__malloc_unlock>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__malloc_unlock+0x8>)
 8006662:	f7ff b886 	b.w	8005772 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	2000038c 	.word	0x2000038c

0800666c <_Balloc>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	69c6      	ldr	r6, [r0, #28]
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	b976      	cbnz	r6, 8006694 <_Balloc+0x28>
 8006676:	2010      	movs	r0, #16
 8006678:	f7ff ff44 	bl	8006504 <malloc>
 800667c:	4602      	mov	r2, r0
 800667e:	61e0      	str	r0, [r4, #28]
 8006680:	b920      	cbnz	r0, 800668c <_Balloc+0x20>
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <_Balloc+0x78>)
 8006684:	4818      	ldr	r0, [pc, #96]	; (80066e8 <_Balloc+0x7c>)
 8006686:	216b      	movs	r1, #107	; 0x6b
 8006688:	f000 ff72 	bl	8007570 <__assert_func>
 800668c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006690:	6006      	str	r6, [r0, #0]
 8006692:	60c6      	str	r6, [r0, #12]
 8006694:	69e6      	ldr	r6, [r4, #28]
 8006696:	68f3      	ldr	r3, [r6, #12]
 8006698:	b183      	cbz	r3, 80066bc <_Balloc+0x50>
 800669a:	69e3      	ldr	r3, [r4, #28]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066a2:	b9b8      	cbnz	r0, 80066d4 <_Balloc+0x68>
 80066a4:	2101      	movs	r1, #1
 80066a6:	fa01 f605 	lsl.w	r6, r1, r5
 80066aa:	1d72      	adds	r2, r6, #5
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 ff7c 	bl	80075ac <_calloc_r>
 80066b4:	b160      	cbz	r0, 80066d0 <_Balloc+0x64>
 80066b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066ba:	e00e      	b.n	80066da <_Balloc+0x6e>
 80066bc:	2221      	movs	r2, #33	; 0x21
 80066be:	2104      	movs	r1, #4
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 ff73 	bl	80075ac <_calloc_r>
 80066c6:	69e3      	ldr	r3, [r4, #28]
 80066c8:	60f0      	str	r0, [r6, #12]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e4      	bne.n	800669a <_Balloc+0x2e>
 80066d0:	2000      	movs	r0, #0
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	6802      	ldr	r2, [r0, #0]
 80066d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066da:	2300      	movs	r3, #0
 80066dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066e0:	e7f7      	b.n	80066d2 <_Balloc+0x66>
 80066e2:	bf00      	nop
 80066e4:	080077f1 	.word	0x080077f1
 80066e8:	08007871 	.word	0x08007871

080066ec <_Bfree>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	69c6      	ldr	r6, [r0, #28]
 80066f0:	4605      	mov	r5, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	b976      	cbnz	r6, 8006714 <_Bfree+0x28>
 80066f6:	2010      	movs	r0, #16
 80066f8:	f7ff ff04 	bl	8006504 <malloc>
 80066fc:	4602      	mov	r2, r0
 80066fe:	61e8      	str	r0, [r5, #28]
 8006700:	b920      	cbnz	r0, 800670c <_Bfree+0x20>
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <_Bfree+0x3c>)
 8006704:	4809      	ldr	r0, [pc, #36]	; (800672c <_Bfree+0x40>)
 8006706:	218f      	movs	r1, #143	; 0x8f
 8006708:	f000 ff32 	bl	8007570 <__assert_func>
 800670c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006710:	6006      	str	r6, [r0, #0]
 8006712:	60c6      	str	r6, [r0, #12]
 8006714:	b13c      	cbz	r4, 8006726 <_Bfree+0x3a>
 8006716:	69eb      	ldr	r3, [r5, #28]
 8006718:	6862      	ldr	r2, [r4, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006720:	6021      	str	r1, [r4, #0]
 8006722:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	080077f1 	.word	0x080077f1
 800672c:	08007871 	.word	0x08007871

08006730 <__multadd>:
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	690d      	ldr	r5, [r1, #16]
 8006736:	4607      	mov	r7, r0
 8006738:	460c      	mov	r4, r1
 800673a:	461e      	mov	r6, r3
 800673c:	f101 0c14 	add.w	ip, r1, #20
 8006740:	2000      	movs	r0, #0
 8006742:	f8dc 3000 	ldr.w	r3, [ip]
 8006746:	b299      	uxth	r1, r3
 8006748:	fb02 6101 	mla	r1, r2, r1, r6
 800674c:	0c1e      	lsrs	r6, r3, #16
 800674e:	0c0b      	lsrs	r3, r1, #16
 8006750:	fb02 3306 	mla	r3, r2, r6, r3
 8006754:	b289      	uxth	r1, r1
 8006756:	3001      	adds	r0, #1
 8006758:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800675c:	4285      	cmp	r5, r0
 800675e:	f84c 1b04 	str.w	r1, [ip], #4
 8006762:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006766:	dcec      	bgt.n	8006742 <__multadd+0x12>
 8006768:	b30e      	cbz	r6, 80067ae <__multadd+0x7e>
 800676a:	68a3      	ldr	r3, [r4, #8]
 800676c:	42ab      	cmp	r3, r5
 800676e:	dc19      	bgt.n	80067a4 <__multadd+0x74>
 8006770:	6861      	ldr	r1, [r4, #4]
 8006772:	4638      	mov	r0, r7
 8006774:	3101      	adds	r1, #1
 8006776:	f7ff ff79 	bl	800666c <_Balloc>
 800677a:	4680      	mov	r8, r0
 800677c:	b928      	cbnz	r0, 800678a <__multadd+0x5a>
 800677e:	4602      	mov	r2, r0
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <__multadd+0x84>)
 8006782:	480d      	ldr	r0, [pc, #52]	; (80067b8 <__multadd+0x88>)
 8006784:	21ba      	movs	r1, #186	; 0xba
 8006786:	f000 fef3 	bl	8007570 <__assert_func>
 800678a:	6922      	ldr	r2, [r4, #16]
 800678c:	3202      	adds	r2, #2
 800678e:	f104 010c 	add.w	r1, r4, #12
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	300c      	adds	r0, #12
 8006796:	f000 fedd 	bl	8007554 <memcpy>
 800679a:	4621      	mov	r1, r4
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff ffa5 	bl	80066ec <_Bfree>
 80067a2:	4644      	mov	r4, r8
 80067a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067a8:	3501      	adds	r5, #1
 80067aa:	615e      	str	r6, [r3, #20]
 80067ac:	6125      	str	r5, [r4, #16]
 80067ae:	4620      	mov	r0, r4
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	08007860 	.word	0x08007860
 80067b8:	08007871 	.word	0x08007871

080067bc <__hi0bits>:
 80067bc:	0c03      	lsrs	r3, r0, #16
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	b9d3      	cbnz	r3, 80067f8 <__hi0bits+0x3c>
 80067c2:	0400      	lsls	r0, r0, #16
 80067c4:	2310      	movs	r3, #16
 80067c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067ca:	bf04      	itt	eq
 80067cc:	0200      	lsleq	r0, r0, #8
 80067ce:	3308      	addeq	r3, #8
 80067d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067d4:	bf04      	itt	eq
 80067d6:	0100      	lsleq	r0, r0, #4
 80067d8:	3304      	addeq	r3, #4
 80067da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067de:	bf04      	itt	eq
 80067e0:	0080      	lsleq	r0, r0, #2
 80067e2:	3302      	addeq	r3, #2
 80067e4:	2800      	cmp	r0, #0
 80067e6:	db05      	blt.n	80067f4 <__hi0bits+0x38>
 80067e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067ec:	f103 0301 	add.w	r3, r3, #1
 80067f0:	bf08      	it	eq
 80067f2:	2320      	moveq	r3, #32
 80067f4:	4618      	mov	r0, r3
 80067f6:	4770      	bx	lr
 80067f8:	2300      	movs	r3, #0
 80067fa:	e7e4      	b.n	80067c6 <__hi0bits+0xa>

080067fc <__lo0bits>:
 80067fc:	6803      	ldr	r3, [r0, #0]
 80067fe:	f013 0207 	ands.w	r2, r3, #7
 8006802:	d00c      	beq.n	800681e <__lo0bits+0x22>
 8006804:	07d9      	lsls	r1, r3, #31
 8006806:	d422      	bmi.n	800684e <__lo0bits+0x52>
 8006808:	079a      	lsls	r2, r3, #30
 800680a:	bf49      	itett	mi
 800680c:	085b      	lsrmi	r3, r3, #1
 800680e:	089b      	lsrpl	r3, r3, #2
 8006810:	6003      	strmi	r3, [r0, #0]
 8006812:	2201      	movmi	r2, #1
 8006814:	bf5c      	itt	pl
 8006816:	6003      	strpl	r3, [r0, #0]
 8006818:	2202      	movpl	r2, #2
 800681a:	4610      	mov	r0, r2
 800681c:	4770      	bx	lr
 800681e:	b299      	uxth	r1, r3
 8006820:	b909      	cbnz	r1, 8006826 <__lo0bits+0x2a>
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	2210      	movs	r2, #16
 8006826:	b2d9      	uxtb	r1, r3
 8006828:	b909      	cbnz	r1, 800682e <__lo0bits+0x32>
 800682a:	3208      	adds	r2, #8
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	0719      	lsls	r1, r3, #28
 8006830:	bf04      	itt	eq
 8006832:	091b      	lsreq	r3, r3, #4
 8006834:	3204      	addeq	r2, #4
 8006836:	0799      	lsls	r1, r3, #30
 8006838:	bf04      	itt	eq
 800683a:	089b      	lsreq	r3, r3, #2
 800683c:	3202      	addeq	r2, #2
 800683e:	07d9      	lsls	r1, r3, #31
 8006840:	d403      	bmi.n	800684a <__lo0bits+0x4e>
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	f102 0201 	add.w	r2, r2, #1
 8006848:	d003      	beq.n	8006852 <__lo0bits+0x56>
 800684a:	6003      	str	r3, [r0, #0]
 800684c:	e7e5      	b.n	800681a <__lo0bits+0x1e>
 800684e:	2200      	movs	r2, #0
 8006850:	e7e3      	b.n	800681a <__lo0bits+0x1e>
 8006852:	2220      	movs	r2, #32
 8006854:	e7e1      	b.n	800681a <__lo0bits+0x1e>
	...

08006858 <__i2b>:
 8006858:	b510      	push	{r4, lr}
 800685a:	460c      	mov	r4, r1
 800685c:	2101      	movs	r1, #1
 800685e:	f7ff ff05 	bl	800666c <_Balloc>
 8006862:	4602      	mov	r2, r0
 8006864:	b928      	cbnz	r0, 8006872 <__i2b+0x1a>
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <__i2b+0x24>)
 8006868:	4805      	ldr	r0, [pc, #20]	; (8006880 <__i2b+0x28>)
 800686a:	f240 1145 	movw	r1, #325	; 0x145
 800686e:	f000 fe7f 	bl	8007570 <__assert_func>
 8006872:	2301      	movs	r3, #1
 8006874:	6144      	str	r4, [r0, #20]
 8006876:	6103      	str	r3, [r0, #16]
 8006878:	bd10      	pop	{r4, pc}
 800687a:	bf00      	nop
 800687c:	08007860 	.word	0x08007860
 8006880:	08007871 	.word	0x08007871

08006884 <__multiply>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	4691      	mov	r9, r2
 800688a:	690a      	ldr	r2, [r1, #16]
 800688c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	bfb8      	it	lt
 8006894:	460b      	movlt	r3, r1
 8006896:	460c      	mov	r4, r1
 8006898:	bfbc      	itt	lt
 800689a:	464c      	movlt	r4, r9
 800689c:	4699      	movlt	r9, r3
 800689e:	6927      	ldr	r7, [r4, #16]
 80068a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068a4:	68a3      	ldr	r3, [r4, #8]
 80068a6:	6861      	ldr	r1, [r4, #4]
 80068a8:	eb07 060a 	add.w	r6, r7, sl
 80068ac:	42b3      	cmp	r3, r6
 80068ae:	b085      	sub	sp, #20
 80068b0:	bfb8      	it	lt
 80068b2:	3101      	addlt	r1, #1
 80068b4:	f7ff feda 	bl	800666c <_Balloc>
 80068b8:	b930      	cbnz	r0, 80068c8 <__multiply+0x44>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4b44      	ldr	r3, [pc, #272]	; (80069d0 <__multiply+0x14c>)
 80068be:	4845      	ldr	r0, [pc, #276]	; (80069d4 <__multiply+0x150>)
 80068c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80068c4:	f000 fe54 	bl	8007570 <__assert_func>
 80068c8:	f100 0514 	add.w	r5, r0, #20
 80068cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068d0:	462b      	mov	r3, r5
 80068d2:	2200      	movs	r2, #0
 80068d4:	4543      	cmp	r3, r8
 80068d6:	d321      	bcc.n	800691c <__multiply+0x98>
 80068d8:	f104 0314 	add.w	r3, r4, #20
 80068dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068e0:	f109 0314 	add.w	r3, r9, #20
 80068e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068e8:	9202      	str	r2, [sp, #8]
 80068ea:	1b3a      	subs	r2, r7, r4
 80068ec:	3a15      	subs	r2, #21
 80068ee:	f022 0203 	bic.w	r2, r2, #3
 80068f2:	3204      	adds	r2, #4
 80068f4:	f104 0115 	add.w	r1, r4, #21
 80068f8:	428f      	cmp	r7, r1
 80068fa:	bf38      	it	cc
 80068fc:	2204      	movcc	r2, #4
 80068fe:	9201      	str	r2, [sp, #4]
 8006900:	9a02      	ldr	r2, [sp, #8]
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d80c      	bhi.n	8006922 <__multiply+0x9e>
 8006908:	2e00      	cmp	r6, #0
 800690a:	dd03      	ble.n	8006914 <__multiply+0x90>
 800690c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006910:	2b00      	cmp	r3, #0
 8006912:	d05b      	beq.n	80069cc <__multiply+0x148>
 8006914:	6106      	str	r6, [r0, #16]
 8006916:	b005      	add	sp, #20
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	f843 2b04 	str.w	r2, [r3], #4
 8006920:	e7d8      	b.n	80068d4 <__multiply+0x50>
 8006922:	f8b3 a000 	ldrh.w	sl, [r3]
 8006926:	f1ba 0f00 	cmp.w	sl, #0
 800692a:	d024      	beq.n	8006976 <__multiply+0xf2>
 800692c:	f104 0e14 	add.w	lr, r4, #20
 8006930:	46a9      	mov	r9, r5
 8006932:	f04f 0c00 	mov.w	ip, #0
 8006936:	f85e 2b04 	ldr.w	r2, [lr], #4
 800693a:	f8d9 1000 	ldr.w	r1, [r9]
 800693e:	fa1f fb82 	uxth.w	fp, r2
 8006942:	b289      	uxth	r1, r1
 8006944:	fb0a 110b 	mla	r1, sl, fp, r1
 8006948:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800694c:	f8d9 2000 	ldr.w	r2, [r9]
 8006950:	4461      	add	r1, ip
 8006952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006956:	fb0a c20b 	mla	r2, sl, fp, ip
 800695a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800695e:	b289      	uxth	r1, r1
 8006960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006964:	4577      	cmp	r7, lr
 8006966:	f849 1b04 	str.w	r1, [r9], #4
 800696a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800696e:	d8e2      	bhi.n	8006936 <__multiply+0xb2>
 8006970:	9a01      	ldr	r2, [sp, #4]
 8006972:	f845 c002 	str.w	ip, [r5, r2]
 8006976:	9a03      	ldr	r2, [sp, #12]
 8006978:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800697c:	3304      	adds	r3, #4
 800697e:	f1b9 0f00 	cmp.w	r9, #0
 8006982:	d021      	beq.n	80069c8 <__multiply+0x144>
 8006984:	6829      	ldr	r1, [r5, #0]
 8006986:	f104 0c14 	add.w	ip, r4, #20
 800698a:	46ae      	mov	lr, r5
 800698c:	f04f 0a00 	mov.w	sl, #0
 8006990:	f8bc b000 	ldrh.w	fp, [ip]
 8006994:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006998:	fb09 220b 	mla	r2, r9, fp, r2
 800699c:	4452      	add	r2, sl
 800699e:	b289      	uxth	r1, r1
 80069a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069a4:	f84e 1b04 	str.w	r1, [lr], #4
 80069a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80069ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069b0:	f8be 1000 	ldrh.w	r1, [lr]
 80069b4:	fb09 110a 	mla	r1, r9, sl, r1
 80069b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80069bc:	4567      	cmp	r7, ip
 80069be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069c2:	d8e5      	bhi.n	8006990 <__multiply+0x10c>
 80069c4:	9a01      	ldr	r2, [sp, #4]
 80069c6:	50a9      	str	r1, [r5, r2]
 80069c8:	3504      	adds	r5, #4
 80069ca:	e799      	b.n	8006900 <__multiply+0x7c>
 80069cc:	3e01      	subs	r6, #1
 80069ce:	e79b      	b.n	8006908 <__multiply+0x84>
 80069d0:	08007860 	.word	0x08007860
 80069d4:	08007871 	.word	0x08007871

080069d8 <__pow5mult>:
 80069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	4615      	mov	r5, r2
 80069de:	f012 0203 	ands.w	r2, r2, #3
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	d007      	beq.n	80069f8 <__pow5mult+0x20>
 80069e8:	4c25      	ldr	r4, [pc, #148]	; (8006a80 <__pow5mult+0xa8>)
 80069ea:	3a01      	subs	r2, #1
 80069ec:	2300      	movs	r3, #0
 80069ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069f2:	f7ff fe9d 	bl	8006730 <__multadd>
 80069f6:	4607      	mov	r7, r0
 80069f8:	10ad      	asrs	r5, r5, #2
 80069fa:	d03d      	beq.n	8006a78 <__pow5mult+0xa0>
 80069fc:	69f4      	ldr	r4, [r6, #28]
 80069fe:	b97c      	cbnz	r4, 8006a20 <__pow5mult+0x48>
 8006a00:	2010      	movs	r0, #16
 8006a02:	f7ff fd7f 	bl	8006504 <malloc>
 8006a06:	4602      	mov	r2, r0
 8006a08:	61f0      	str	r0, [r6, #28]
 8006a0a:	b928      	cbnz	r0, 8006a18 <__pow5mult+0x40>
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <__pow5mult+0xac>)
 8006a0e:	481e      	ldr	r0, [pc, #120]	; (8006a88 <__pow5mult+0xb0>)
 8006a10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a14:	f000 fdac 	bl	8007570 <__assert_func>
 8006a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a1c:	6004      	str	r4, [r0, #0]
 8006a1e:	60c4      	str	r4, [r0, #12]
 8006a20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a28:	b94c      	cbnz	r4, 8006a3e <__pow5mult+0x66>
 8006a2a:	f240 2171 	movw	r1, #625	; 0x271
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff12 	bl	8006858 <__i2b>
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	6003      	str	r3, [r0, #0]
 8006a3e:	f04f 0900 	mov.w	r9, #0
 8006a42:	07eb      	lsls	r3, r5, #31
 8006a44:	d50a      	bpl.n	8006a5c <__pow5mult+0x84>
 8006a46:	4639      	mov	r1, r7
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff ff1a 	bl	8006884 <__multiply>
 8006a50:	4639      	mov	r1, r7
 8006a52:	4680      	mov	r8, r0
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7ff fe49 	bl	80066ec <_Bfree>
 8006a5a:	4647      	mov	r7, r8
 8006a5c:	106d      	asrs	r5, r5, #1
 8006a5e:	d00b      	beq.n	8006a78 <__pow5mult+0xa0>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	b938      	cbnz	r0, 8006a74 <__pow5mult+0x9c>
 8006a64:	4622      	mov	r2, r4
 8006a66:	4621      	mov	r1, r4
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff ff0b 	bl	8006884 <__multiply>
 8006a6e:	6020      	str	r0, [r4, #0]
 8006a70:	f8c0 9000 	str.w	r9, [r0]
 8006a74:	4604      	mov	r4, r0
 8006a76:	e7e4      	b.n	8006a42 <__pow5mult+0x6a>
 8006a78:	4638      	mov	r0, r7
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	bf00      	nop
 8006a80:	080079c0 	.word	0x080079c0
 8006a84:	080077f1 	.word	0x080077f1
 8006a88:	08007871 	.word	0x08007871

08006a8c <__lshift>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	460c      	mov	r4, r1
 8006a92:	6849      	ldr	r1, [r1, #4]
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	4691      	mov	r9, r2
 8006aa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006aa4:	f108 0601 	add.w	r6, r8, #1
 8006aa8:	42b3      	cmp	r3, r6
 8006aaa:	db0b      	blt.n	8006ac4 <__lshift+0x38>
 8006aac:	4638      	mov	r0, r7
 8006aae:	f7ff fddd 	bl	800666c <_Balloc>
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	b948      	cbnz	r0, 8006aca <__lshift+0x3e>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <__lshift+0xd0>)
 8006aba:	4829      	ldr	r0, [pc, #164]	; (8006b60 <__lshift+0xd4>)
 8006abc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ac0:	f000 fd56 	bl	8007570 <__assert_func>
 8006ac4:	3101      	adds	r1, #1
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	e7ee      	b.n	8006aa8 <__lshift+0x1c>
 8006aca:	2300      	movs	r3, #0
 8006acc:	f100 0114 	add.w	r1, r0, #20
 8006ad0:	f100 0210 	add.w	r2, r0, #16
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	4553      	cmp	r3, sl
 8006ad8:	db33      	blt.n	8006b42 <__lshift+0xb6>
 8006ada:	6920      	ldr	r0, [r4, #16]
 8006adc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ae0:	f104 0314 	add.w	r3, r4, #20
 8006ae4:	f019 091f 	ands.w	r9, r9, #31
 8006ae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006af0:	d02b      	beq.n	8006b4a <__lshift+0xbe>
 8006af2:	f1c9 0e20 	rsb	lr, r9, #32
 8006af6:	468a      	mov	sl, r1
 8006af8:	2200      	movs	r2, #0
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	fa00 f009 	lsl.w	r0, r0, r9
 8006b00:	4310      	orrs	r0, r2
 8006b02:	f84a 0b04 	str.w	r0, [sl], #4
 8006b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0a:	459c      	cmp	ip, r3
 8006b0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b10:	d8f3      	bhi.n	8006afa <__lshift+0x6e>
 8006b12:	ebac 0304 	sub.w	r3, ip, r4
 8006b16:	3b15      	subs	r3, #21
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	f104 0015 	add.w	r0, r4, #21
 8006b22:	4584      	cmp	ip, r0
 8006b24:	bf38      	it	cc
 8006b26:	2304      	movcc	r3, #4
 8006b28:	50ca      	str	r2, [r1, r3]
 8006b2a:	b10a      	cbz	r2, 8006b30 <__lshift+0xa4>
 8006b2c:	f108 0602 	add.w	r6, r8, #2
 8006b30:	3e01      	subs	r6, #1
 8006b32:	4638      	mov	r0, r7
 8006b34:	612e      	str	r6, [r5, #16]
 8006b36:	4621      	mov	r1, r4
 8006b38:	f7ff fdd8 	bl	80066ec <_Bfree>
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b46:	3301      	adds	r3, #1
 8006b48:	e7c5      	b.n	8006ad6 <__lshift+0x4a>
 8006b4a:	3904      	subs	r1, #4
 8006b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b54:	459c      	cmp	ip, r3
 8006b56:	d8f9      	bhi.n	8006b4c <__lshift+0xc0>
 8006b58:	e7ea      	b.n	8006b30 <__lshift+0xa4>
 8006b5a:	bf00      	nop
 8006b5c:	08007860 	.word	0x08007860
 8006b60:	08007871 	.word	0x08007871

08006b64 <__mcmp>:
 8006b64:	b530      	push	{r4, r5, lr}
 8006b66:	6902      	ldr	r2, [r0, #16]
 8006b68:	690c      	ldr	r4, [r1, #16]
 8006b6a:	1b12      	subs	r2, r2, r4
 8006b6c:	d10e      	bne.n	8006b8c <__mcmp+0x28>
 8006b6e:	f100 0314 	add.w	r3, r0, #20
 8006b72:	3114      	adds	r1, #20
 8006b74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b84:	42a5      	cmp	r5, r4
 8006b86:	d003      	beq.n	8006b90 <__mcmp+0x2c>
 8006b88:	d305      	bcc.n	8006b96 <__mcmp+0x32>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	bd30      	pop	{r4, r5, pc}
 8006b90:	4283      	cmp	r3, r0
 8006b92:	d3f3      	bcc.n	8006b7c <__mcmp+0x18>
 8006b94:	e7fa      	b.n	8006b8c <__mcmp+0x28>
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	e7f7      	b.n	8006b8c <__mcmp+0x28>

08006b9c <__mdiff>:
 8006b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4690      	mov	r8, r2
 8006baa:	f7ff ffdb 	bl	8006b64 <__mcmp>
 8006bae:	1e05      	subs	r5, r0, #0
 8006bb0:	d110      	bne.n	8006bd4 <__mdiff+0x38>
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff fd59 	bl	800666c <_Balloc>
 8006bba:	b930      	cbnz	r0, 8006bca <__mdiff+0x2e>
 8006bbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ca8 <__mdiff+0x10c>)
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	f240 2137 	movw	r1, #567	; 0x237
 8006bc4:	4839      	ldr	r0, [pc, #228]	; (8006cac <__mdiff+0x110>)
 8006bc6:	f000 fcd3 	bl	8007570 <__assert_func>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	bfa4      	itt	ge
 8006bd6:	4643      	movge	r3, r8
 8006bd8:	46a0      	movge	r8, r4
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006be0:	bfa6      	itte	ge
 8006be2:	461c      	movge	r4, r3
 8006be4:	2500      	movge	r5, #0
 8006be6:	2501      	movlt	r5, #1
 8006be8:	f7ff fd40 	bl	800666c <_Balloc>
 8006bec:	b920      	cbnz	r0, 8006bf8 <__mdiff+0x5c>
 8006bee:	4b2e      	ldr	r3, [pc, #184]	; (8006ca8 <__mdiff+0x10c>)
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	f240 2145 	movw	r1, #581	; 0x245
 8006bf6:	e7e5      	b.n	8006bc4 <__mdiff+0x28>
 8006bf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bfc:	6926      	ldr	r6, [r4, #16]
 8006bfe:	60c5      	str	r5, [r0, #12]
 8006c00:	f104 0914 	add.w	r9, r4, #20
 8006c04:	f108 0514 	add.w	r5, r8, #20
 8006c08:	f100 0e14 	add.w	lr, r0, #20
 8006c0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c14:	f108 0210 	add.w	r2, r8, #16
 8006c18:	46f2      	mov	sl, lr
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c24:	fa11 f88b 	uxtah	r8, r1, fp
 8006c28:	b299      	uxth	r1, r3
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	eba8 0801 	sub.w	r8, r8, r1
 8006c30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c38:	fa1f f888 	uxth.w	r8, r8
 8006c3c:	1419      	asrs	r1, r3, #16
 8006c3e:	454e      	cmp	r6, r9
 8006c40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c44:	f84a 3b04 	str.w	r3, [sl], #4
 8006c48:	d8e8      	bhi.n	8006c1c <__mdiff+0x80>
 8006c4a:	1b33      	subs	r3, r6, r4
 8006c4c:	3b15      	subs	r3, #21
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	3304      	adds	r3, #4
 8006c54:	3415      	adds	r4, #21
 8006c56:	42a6      	cmp	r6, r4
 8006c58:	bf38      	it	cc
 8006c5a:	2304      	movcc	r3, #4
 8006c5c:	441d      	add	r5, r3
 8006c5e:	4473      	add	r3, lr
 8006c60:	469e      	mov	lr, r3
 8006c62:	462e      	mov	r6, r5
 8006c64:	4566      	cmp	r6, ip
 8006c66:	d30e      	bcc.n	8006c86 <__mdiff+0xea>
 8006c68:	f10c 0203 	add.w	r2, ip, #3
 8006c6c:	1b52      	subs	r2, r2, r5
 8006c6e:	f022 0203 	bic.w	r2, r2, #3
 8006c72:	3d03      	subs	r5, #3
 8006c74:	45ac      	cmp	ip, r5
 8006c76:	bf38      	it	cc
 8006c78:	2200      	movcc	r2, #0
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c80:	b17a      	cbz	r2, 8006ca2 <__mdiff+0x106>
 8006c82:	6107      	str	r7, [r0, #16]
 8006c84:	e7a4      	b.n	8006bd0 <__mdiff+0x34>
 8006c86:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c8a:	fa11 f288 	uxtah	r2, r1, r8
 8006c8e:	1414      	asrs	r4, r2, #16
 8006c90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c94:	b292      	uxth	r2, r2
 8006c96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c9a:	f84e 2b04 	str.w	r2, [lr], #4
 8006c9e:	1421      	asrs	r1, r4, #16
 8006ca0:	e7e0      	b.n	8006c64 <__mdiff+0xc8>
 8006ca2:	3f01      	subs	r7, #1
 8006ca4:	e7ea      	b.n	8006c7c <__mdiff+0xe0>
 8006ca6:	bf00      	nop
 8006ca8:	08007860 	.word	0x08007860
 8006cac:	08007871 	.word	0x08007871

08006cb0 <__d2b>:
 8006cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	ec59 8b10 	vmov	r8, r9, d0
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	f7ff fcd5 	bl	800666c <_Balloc>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	b930      	cbnz	r0, 8006cd4 <__d2b+0x24>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <__d2b+0xac>)
 8006cca:	4825      	ldr	r0, [pc, #148]	; (8006d60 <__d2b+0xb0>)
 8006ccc:	f240 310f 	movw	r1, #783	; 0x30f
 8006cd0:	f000 fc4e 	bl	8007570 <__assert_func>
 8006cd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cdc:	bb2d      	cbnz	r5, 8006d2a <__d2b+0x7a>
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ce4:	d026      	beq.n	8006d34 <__d2b+0x84>
 8006ce6:	4668      	mov	r0, sp
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	f7ff fd87 	bl	80067fc <__lo0bits>
 8006cee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cf2:	b1e8      	cbz	r0, 8006d30 <__d2b+0x80>
 8006cf4:	f1c0 0320 	rsb	r3, r0, #32
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	40c2      	lsrs	r2, r0
 8006d00:	6163      	str	r3, [r4, #20]
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	61a3      	str	r3, [r4, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2202      	movne	r2, #2
 8006d0e:	2201      	moveq	r2, #1
 8006d10:	6122      	str	r2, [r4, #16]
 8006d12:	b1bd      	cbz	r5, 8006d44 <__d2b+0x94>
 8006d14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d18:	4405      	add	r5, r0
 8006d1a:	603d      	str	r5, [r7, #0]
 8006d1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d20:	6030      	str	r0, [r6, #0]
 8006d22:	4620      	mov	r0, r4
 8006d24:	b003      	add	sp, #12
 8006d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d2e:	e7d6      	b.n	8006cde <__d2b+0x2e>
 8006d30:	6161      	str	r1, [r4, #20]
 8006d32:	e7e7      	b.n	8006d04 <__d2b+0x54>
 8006d34:	a801      	add	r0, sp, #4
 8006d36:	f7ff fd61 	bl	80067fc <__lo0bits>
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	6163      	str	r3, [r4, #20]
 8006d3e:	3020      	adds	r0, #32
 8006d40:	2201      	movs	r2, #1
 8006d42:	e7e5      	b.n	8006d10 <__d2b+0x60>
 8006d44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d4c:	6038      	str	r0, [r7, #0]
 8006d4e:	6918      	ldr	r0, [r3, #16]
 8006d50:	f7ff fd34 	bl	80067bc <__hi0bits>
 8006d54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d58:	e7e2      	b.n	8006d20 <__d2b+0x70>
 8006d5a:	bf00      	nop
 8006d5c:	08007860 	.word	0x08007860
 8006d60:	08007871 	.word	0x08007871

08006d64 <__ssputs_r>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	688e      	ldr	r6, [r1, #8]
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	42be      	cmp	r6, r7
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	4682      	mov	sl, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4690      	mov	r8, r2
 8006d76:	d82c      	bhi.n	8006dd2 <__ssputs_r+0x6e>
 8006d78:	898a      	ldrh	r2, [r1, #12]
 8006d7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d7e:	d026      	beq.n	8006dce <__ssputs_r+0x6a>
 8006d80:	6965      	ldr	r5, [r4, #20]
 8006d82:	6909      	ldr	r1, [r1, #16]
 8006d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d88:	eba3 0901 	sub.w	r9, r3, r1
 8006d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d90:	1c7b      	adds	r3, r7, #1
 8006d92:	444b      	add	r3, r9
 8006d94:	106d      	asrs	r5, r5, #1
 8006d96:	429d      	cmp	r5, r3
 8006d98:	bf38      	it	cc
 8006d9a:	461d      	movcc	r5, r3
 8006d9c:	0553      	lsls	r3, r2, #21
 8006d9e:	d527      	bpl.n	8006df0 <__ssputs_r+0x8c>
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7ff fbd7 	bl	8006554 <_malloc_r>
 8006da6:	4606      	mov	r6, r0
 8006da8:	b360      	cbz	r0, 8006e04 <__ssputs_r+0xa0>
 8006daa:	6921      	ldr	r1, [r4, #16]
 8006dac:	464a      	mov	r2, r9
 8006dae:	f000 fbd1 	bl	8007554 <memcpy>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	6126      	str	r6, [r4, #16]
 8006dc0:	6165      	str	r5, [r4, #20]
 8006dc2:	444e      	add	r6, r9
 8006dc4:	eba5 0509 	sub.w	r5, r5, r9
 8006dc8:	6026      	str	r6, [r4, #0]
 8006dca:	60a5      	str	r5, [r4, #8]
 8006dcc:	463e      	mov	r6, r7
 8006dce:	42be      	cmp	r6, r7
 8006dd0:	d900      	bls.n	8006dd4 <__ssputs_r+0x70>
 8006dd2:	463e      	mov	r6, r7
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4641      	mov	r1, r8
 8006dda:	f000 fb6f 	bl	80074bc <memmove>
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	1b9b      	subs	r3, r3, r6
 8006de2:	60a3      	str	r3, [r4, #8]
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	4433      	add	r3, r6
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	2000      	movs	r0, #0
 8006dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df0:	462a      	mov	r2, r5
 8006df2:	f000 fc03 	bl	80075fc <_realloc_r>
 8006df6:	4606      	mov	r6, r0
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d1e0      	bne.n	8006dbe <__ssputs_r+0x5a>
 8006dfc:	6921      	ldr	r1, [r4, #16]
 8006dfe:	4650      	mov	r0, sl
 8006e00:	f7ff fb34 	bl	800646c <_free_r>
 8006e04:	230c      	movs	r3, #12
 8006e06:	f8ca 3000 	str.w	r3, [sl]
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	e7e9      	b.n	8006dec <__ssputs_r+0x88>

08006e18 <_svfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	898b      	ldrh	r3, [r1, #12]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	b09d      	sub	sp, #116	; 0x74
 8006e24:	4607      	mov	r7, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	d50e      	bpl.n	8006e4a <_svfiprintf_r+0x32>
 8006e2c:	690b      	ldr	r3, [r1, #16]
 8006e2e:	b963      	cbnz	r3, 8006e4a <_svfiprintf_r+0x32>
 8006e30:	2140      	movs	r1, #64	; 0x40
 8006e32:	f7ff fb8f 	bl	8006554 <_malloc_r>
 8006e36:	6028      	str	r0, [r5, #0]
 8006e38:	6128      	str	r0, [r5, #16]
 8006e3a:	b920      	cbnz	r0, 8006e46 <_svfiprintf_r+0x2e>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	e0d0      	b.n	8006fe8 <_svfiprintf_r+0x1d0>
 8006e46:	2340      	movs	r3, #64	; 0x40
 8006e48:	616b      	str	r3, [r5, #20]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	2320      	movs	r3, #32
 8006e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e58:	2330      	movs	r3, #48	; 0x30
 8006e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007000 <_svfiprintf_r+0x1e8>
 8006e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	4623      	mov	r3, r4
 8006e68:	469a      	mov	sl, r3
 8006e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6e:	b10a      	cbz	r2, 8006e74 <_svfiprintf_r+0x5c>
 8006e70:	2a25      	cmp	r2, #37	; 0x25
 8006e72:	d1f9      	bne.n	8006e68 <_svfiprintf_r+0x50>
 8006e74:	ebba 0b04 	subs.w	fp, sl, r4
 8006e78:	d00b      	beq.n	8006e92 <_svfiprintf_r+0x7a>
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff ff6f 	bl	8006d64 <__ssputs_r>
 8006e86:	3001      	adds	r0, #1
 8006e88:	f000 80a9 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e8e:	445a      	add	r2, fp
 8006e90:	9209      	str	r2, [sp, #36]	; 0x24
 8006e92:	f89a 3000 	ldrb.w	r3, [sl]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80a1 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea6:	f10a 0a01 	add.w	sl, sl, #1
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9307      	str	r3, [sp, #28]
 8006eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebc:	4850      	ldr	r0, [pc, #320]	; (8007000 <_svfiprintf_r+0x1e8>)
 8006ebe:	f7f9 f987 	bl	80001d0 <memchr>
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	b9d8      	cbnz	r0, 8006efe <_svfiprintf_r+0xe6>
 8006ec6:	06d0      	lsls	r0, r2, #27
 8006ec8:	bf44      	itt	mi
 8006eca:	2320      	movmi	r3, #32
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed0:	0711      	lsls	r1, r2, #28
 8006ed2:	bf44      	itt	mi
 8006ed4:	232b      	movmi	r3, #43	; 0x2b
 8006ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eda:	f89a 3000 	ldrb.w	r3, [sl]
 8006ede:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee0:	d015      	beq.n	8006f0e <_svfiprintf_r+0xf6>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	4654      	mov	r4, sl
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f04f 0c0a 	mov.w	ip, #10
 8006eec:	4621      	mov	r1, r4
 8006eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef2:	3b30      	subs	r3, #48	; 0x30
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	d94d      	bls.n	8006f94 <_svfiprintf_r+0x17c>
 8006ef8:	b1b0      	cbz	r0, 8006f28 <_svfiprintf_r+0x110>
 8006efa:	9207      	str	r2, [sp, #28]
 8006efc:	e014      	b.n	8006f28 <_svfiprintf_r+0x110>
 8006efe:	eba0 0308 	sub.w	r3, r0, r8
 8006f02:	fa09 f303 	lsl.w	r3, r9, r3
 8006f06:	4313      	orrs	r3, r2
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	46a2      	mov	sl, r4
 8006f0c:	e7d2      	b.n	8006eb4 <_svfiprintf_r+0x9c>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	9103      	str	r1, [sp, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfbb      	ittet	lt
 8006f1a:	425b      	neglt	r3, r3
 8006f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f20:	9307      	strge	r3, [sp, #28]
 8006f22:	9307      	strlt	r3, [sp, #28]
 8006f24:	bfb8      	it	lt
 8006f26:	9204      	strlt	r2, [sp, #16]
 8006f28:	7823      	ldrb	r3, [r4, #0]
 8006f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f2c:	d10c      	bne.n	8006f48 <_svfiprintf_r+0x130>
 8006f2e:	7863      	ldrb	r3, [r4, #1]
 8006f30:	2b2a      	cmp	r3, #42	; 0x2a
 8006f32:	d134      	bne.n	8006f9e <_svfiprintf_r+0x186>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	1d1a      	adds	r2, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9203      	str	r2, [sp, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bfb8      	it	lt
 8006f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f44:	3402      	adds	r4, #2
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007010 <_svfiprintf_r+0x1f8>
 8006f4c:	7821      	ldrb	r1, [r4, #0]
 8006f4e:	2203      	movs	r2, #3
 8006f50:	4650      	mov	r0, sl
 8006f52:	f7f9 f93d 	bl	80001d0 <memchr>
 8006f56:	b138      	cbz	r0, 8006f68 <_svfiprintf_r+0x150>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	eba0 000a 	sub.w	r0, r0, sl
 8006f5e:	2240      	movs	r2, #64	; 0x40
 8006f60:	4082      	lsls	r2, r0
 8006f62:	4313      	orrs	r3, r2
 8006f64:	3401      	adds	r4, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	4825      	ldr	r0, [pc, #148]	; (8007004 <_svfiprintf_r+0x1ec>)
 8006f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f72:	2206      	movs	r2, #6
 8006f74:	f7f9 f92c 	bl	80001d0 <memchr>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d038      	beq.n	8006fee <_svfiprintf_r+0x1d6>
 8006f7c:	4b22      	ldr	r3, [pc, #136]	; (8007008 <_svfiprintf_r+0x1f0>)
 8006f7e:	bb1b      	cbnz	r3, 8006fc8 <_svfiprintf_r+0x1b0>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	3307      	adds	r3, #7
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	3308      	adds	r3, #8
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8e:	4433      	add	r3, r6
 8006f90:	9309      	str	r3, [sp, #36]	; 0x24
 8006f92:	e768      	b.n	8006e66 <_svfiprintf_r+0x4e>
 8006f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f98:	460c      	mov	r4, r1
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	e7a6      	b.n	8006eec <_svfiprintf_r+0xd4>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	3401      	adds	r4, #1
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f04f 0c0a 	mov.w	ip, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb0:	3a30      	subs	r2, #48	; 0x30
 8006fb2:	2a09      	cmp	r2, #9
 8006fb4:	d903      	bls.n	8006fbe <_svfiprintf_r+0x1a6>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0c6      	beq.n	8006f48 <_svfiprintf_r+0x130>
 8006fba:	9105      	str	r1, [sp, #20]
 8006fbc:	e7c4      	b.n	8006f48 <_svfiprintf_r+0x130>
 8006fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e7f0      	b.n	8006faa <_svfiprintf_r+0x192>
 8006fc8:	ab03      	add	r3, sp, #12
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <_svfiprintf_r+0x1f4>)
 8006fd0:	a904      	add	r1, sp, #16
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7fd fd74 	bl	8004ac0 <_printf_float>
 8006fd8:	1c42      	adds	r2, r0, #1
 8006fda:	4606      	mov	r6, r0
 8006fdc:	d1d6      	bne.n	8006f8c <_svfiprintf_r+0x174>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	065b      	lsls	r3, r3, #25
 8006fe2:	f53f af2d 	bmi.w	8006e40 <_svfiprintf_r+0x28>
 8006fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe8:	b01d      	add	sp, #116	; 0x74
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <_svfiprintf_r+0x1f4>)
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7fe f805 	bl	8005008 <_printf_i>
 8006ffe:	e7eb      	b.n	8006fd8 <_svfiprintf_r+0x1c0>
 8007000:	080079cc 	.word	0x080079cc
 8007004:	080079d6 	.word	0x080079d6
 8007008:	08004ac1 	.word	0x08004ac1
 800700c:	08006d65 	.word	0x08006d65
 8007010:	080079d2 	.word	0x080079d2

08007014 <__sfputc_r>:
 8007014:	6893      	ldr	r3, [r2, #8]
 8007016:	3b01      	subs	r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	b410      	push	{r4}
 800701c:	6093      	str	r3, [r2, #8]
 800701e:	da08      	bge.n	8007032 <__sfputc_r+0x1e>
 8007020:	6994      	ldr	r4, [r2, #24]
 8007022:	42a3      	cmp	r3, r4
 8007024:	db01      	blt.n	800702a <__sfputc_r+0x16>
 8007026:	290a      	cmp	r1, #10
 8007028:	d103      	bne.n	8007032 <__sfputc_r+0x1e>
 800702a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702e:	f7fe ba8e 	b.w	800554e <__swbuf_r>
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	1c58      	adds	r0, r3, #1
 8007036:	6010      	str	r0, [r2, #0]
 8007038:	7019      	strb	r1, [r3, #0]
 800703a:	4608      	mov	r0, r1
 800703c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007040:	4770      	bx	lr

08007042 <__sfputs_r>:
 8007042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007044:	4606      	mov	r6, r0
 8007046:	460f      	mov	r7, r1
 8007048:	4614      	mov	r4, r2
 800704a:	18d5      	adds	r5, r2, r3
 800704c:	42ac      	cmp	r4, r5
 800704e:	d101      	bne.n	8007054 <__sfputs_r+0x12>
 8007050:	2000      	movs	r0, #0
 8007052:	e007      	b.n	8007064 <__sfputs_r+0x22>
 8007054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007058:	463a      	mov	r2, r7
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ffda 	bl	8007014 <__sfputc_r>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d1f3      	bne.n	800704c <__sfputs_r+0xa>
 8007064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007068 <_vfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	460d      	mov	r5, r1
 800706e:	b09d      	sub	sp, #116	; 0x74
 8007070:	4614      	mov	r4, r2
 8007072:	4698      	mov	r8, r3
 8007074:	4606      	mov	r6, r0
 8007076:	b118      	cbz	r0, 8007080 <_vfiprintf_r+0x18>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <_vfiprintf_r+0x18>
 800707c:	f7fe f960 	bl	8005340 <__sinit>
 8007080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	d405      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	059a      	lsls	r2, r3, #22
 800708a:	d402      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 800708c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800708e:	f7fe fb6f 	bl	8005770 <__retarget_lock_acquire_recursive>
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	071b      	lsls	r3, r3, #28
 8007096:	d501      	bpl.n	800709c <_vfiprintf_r+0x34>
 8007098:	692b      	ldr	r3, [r5, #16]
 800709a:	b99b      	cbnz	r3, 80070c4 <_vfiprintf_r+0x5c>
 800709c:	4629      	mov	r1, r5
 800709e:	4630      	mov	r0, r6
 80070a0:	f7fe fa92 	bl	80055c8 <__swsetup_r>
 80070a4:	b170      	cbz	r0, 80070c4 <_vfiprintf_r+0x5c>
 80070a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a8:	07dc      	lsls	r4, r3, #31
 80070aa:	d504      	bpl.n	80070b6 <_vfiprintf_r+0x4e>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	b01d      	add	sp, #116	; 0x74
 80070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	0598      	lsls	r0, r3, #22
 80070ba:	d4f7      	bmi.n	80070ac <_vfiprintf_r+0x44>
 80070bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070be:	f7fe fb58 	bl	8005772 <__retarget_lock_release_recursive>
 80070c2:	e7f3      	b.n	80070ac <_vfiprintf_r+0x44>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	2320      	movs	r3, #32
 80070ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80070d2:	2330      	movs	r3, #48	; 0x30
 80070d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007288 <_vfiprintf_r+0x220>
 80070d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070dc:	f04f 0901 	mov.w	r9, #1
 80070e0:	4623      	mov	r3, r4
 80070e2:	469a      	mov	sl, r3
 80070e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e8:	b10a      	cbz	r2, 80070ee <_vfiprintf_r+0x86>
 80070ea:	2a25      	cmp	r2, #37	; 0x25
 80070ec:	d1f9      	bne.n	80070e2 <_vfiprintf_r+0x7a>
 80070ee:	ebba 0b04 	subs.w	fp, sl, r4
 80070f2:	d00b      	beq.n	800710c <_vfiprintf_r+0xa4>
 80070f4:	465b      	mov	r3, fp
 80070f6:	4622      	mov	r2, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffa1 	bl	8007042 <__sfputs_r>
 8007100:	3001      	adds	r0, #1
 8007102:	f000 80a9 	beq.w	8007258 <_vfiprintf_r+0x1f0>
 8007106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007108:	445a      	add	r2, fp
 800710a:	9209      	str	r2, [sp, #36]	; 0x24
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a1 	beq.w	8007258 <_vfiprintf_r+0x1f0>
 8007116:	2300      	movs	r3, #0
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007120:	f10a 0a01 	add.w	sl, sl, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712c:	931a      	str	r3, [sp, #104]	; 0x68
 800712e:	4654      	mov	r4, sl
 8007130:	2205      	movs	r2, #5
 8007132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007136:	4854      	ldr	r0, [pc, #336]	; (8007288 <_vfiprintf_r+0x220>)
 8007138:	f7f9 f84a 	bl	80001d0 <memchr>
 800713c:	9a04      	ldr	r2, [sp, #16]
 800713e:	b9d8      	cbnz	r0, 8007178 <_vfiprintf_r+0x110>
 8007140:	06d1      	lsls	r1, r2, #27
 8007142:	bf44      	itt	mi
 8007144:	2320      	movmi	r3, #32
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714a:	0713      	lsls	r3, r2, #28
 800714c:	bf44      	itt	mi
 800714e:	232b      	movmi	r3, #43	; 0x2b
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d015      	beq.n	8007188 <_vfiprintf_r+0x120>
 800715c:	9a07      	ldr	r2, [sp, #28]
 800715e:	4654      	mov	r4, sl
 8007160:	2000      	movs	r0, #0
 8007162:	f04f 0c0a 	mov.w	ip, #10
 8007166:	4621      	mov	r1, r4
 8007168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800716c:	3b30      	subs	r3, #48	; 0x30
 800716e:	2b09      	cmp	r3, #9
 8007170:	d94d      	bls.n	800720e <_vfiprintf_r+0x1a6>
 8007172:	b1b0      	cbz	r0, 80071a2 <_vfiprintf_r+0x13a>
 8007174:	9207      	str	r2, [sp, #28]
 8007176:	e014      	b.n	80071a2 <_vfiprintf_r+0x13a>
 8007178:	eba0 0308 	sub.w	r3, r0, r8
 800717c:	fa09 f303 	lsl.w	r3, r9, r3
 8007180:	4313      	orrs	r3, r2
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	46a2      	mov	sl, r4
 8007186:	e7d2      	b.n	800712e <_vfiprintf_r+0xc6>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	1d19      	adds	r1, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	9103      	str	r1, [sp, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbb      	ittet	lt
 8007194:	425b      	neglt	r3, r3
 8007196:	f042 0202 	orrlt.w	r2, r2, #2
 800719a:	9307      	strge	r3, [sp, #28]
 800719c:	9307      	strlt	r3, [sp, #28]
 800719e:	bfb8      	it	lt
 80071a0:	9204      	strlt	r2, [sp, #16]
 80071a2:	7823      	ldrb	r3, [r4, #0]
 80071a4:	2b2e      	cmp	r3, #46	; 0x2e
 80071a6:	d10c      	bne.n	80071c2 <_vfiprintf_r+0x15a>
 80071a8:	7863      	ldrb	r3, [r4, #1]
 80071aa:	2b2a      	cmp	r3, #42	; 0x2a
 80071ac:	d134      	bne.n	8007218 <_vfiprintf_r+0x1b0>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	9203      	str	r2, [sp, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80071be:	3402      	adds	r4, #2
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007298 <_vfiprintf_r+0x230>
 80071c6:	7821      	ldrb	r1, [r4, #0]
 80071c8:	2203      	movs	r2, #3
 80071ca:	4650      	mov	r0, sl
 80071cc:	f7f9 f800 	bl	80001d0 <memchr>
 80071d0:	b138      	cbz	r0, 80071e2 <_vfiprintf_r+0x17a>
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	eba0 000a 	sub.w	r0, r0, sl
 80071d8:	2240      	movs	r2, #64	; 0x40
 80071da:	4082      	lsls	r2, r0
 80071dc:	4313      	orrs	r3, r2
 80071de:	3401      	adds	r4, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e6:	4829      	ldr	r0, [pc, #164]	; (800728c <_vfiprintf_r+0x224>)
 80071e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ec:	2206      	movs	r2, #6
 80071ee:	f7f8 ffef 	bl	80001d0 <memchr>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d03f      	beq.n	8007276 <_vfiprintf_r+0x20e>
 80071f6:	4b26      	ldr	r3, [pc, #152]	; (8007290 <_vfiprintf_r+0x228>)
 80071f8:	bb1b      	cbnz	r3, 8007242 <_vfiprintf_r+0x1da>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	3307      	adds	r3, #7
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	3308      	adds	r3, #8
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007208:	443b      	add	r3, r7
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	e768      	b.n	80070e0 <_vfiprintf_r+0x78>
 800720e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007212:	460c      	mov	r4, r1
 8007214:	2001      	movs	r0, #1
 8007216:	e7a6      	b.n	8007166 <_vfiprintf_r+0xfe>
 8007218:	2300      	movs	r3, #0
 800721a:	3401      	adds	r4, #1
 800721c:	9305      	str	r3, [sp, #20]
 800721e:	4619      	mov	r1, r3
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4620      	mov	r0, r4
 8007226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800722a:	3a30      	subs	r2, #48	; 0x30
 800722c:	2a09      	cmp	r2, #9
 800722e:	d903      	bls.n	8007238 <_vfiprintf_r+0x1d0>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0c6      	beq.n	80071c2 <_vfiprintf_r+0x15a>
 8007234:	9105      	str	r1, [sp, #20]
 8007236:	e7c4      	b.n	80071c2 <_vfiprintf_r+0x15a>
 8007238:	fb0c 2101 	mla	r1, ip, r1, r2
 800723c:	4604      	mov	r4, r0
 800723e:	2301      	movs	r3, #1
 8007240:	e7f0      	b.n	8007224 <_vfiprintf_r+0x1bc>
 8007242:	ab03      	add	r3, sp, #12
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	462a      	mov	r2, r5
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <_vfiprintf_r+0x22c>)
 800724a:	a904      	add	r1, sp, #16
 800724c:	4630      	mov	r0, r6
 800724e:	f7fd fc37 	bl	8004ac0 <_printf_float>
 8007252:	4607      	mov	r7, r0
 8007254:	1c78      	adds	r0, r7, #1
 8007256:	d1d6      	bne.n	8007206 <_vfiprintf_r+0x19e>
 8007258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d405      	bmi.n	800726a <_vfiprintf_r+0x202>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	059a      	lsls	r2, r3, #22
 8007262:	d402      	bmi.n	800726a <_vfiprintf_r+0x202>
 8007264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007266:	f7fe fa84 	bl	8005772 <__retarget_lock_release_recursive>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	065b      	lsls	r3, r3, #25
 800726e:	f53f af1d 	bmi.w	80070ac <_vfiprintf_r+0x44>
 8007272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007274:	e71c      	b.n	80070b0 <_vfiprintf_r+0x48>
 8007276:	ab03      	add	r3, sp, #12
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	462a      	mov	r2, r5
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <_vfiprintf_r+0x22c>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	4630      	mov	r0, r6
 8007282:	f7fd fec1 	bl	8005008 <_printf_i>
 8007286:	e7e4      	b.n	8007252 <_vfiprintf_r+0x1ea>
 8007288:	080079cc 	.word	0x080079cc
 800728c:	080079d6 	.word	0x080079d6
 8007290:	08004ac1 	.word	0x08004ac1
 8007294:	08007043 	.word	0x08007043
 8007298:	080079d2 	.word	0x080079d2

0800729c <__sflush_r>:
 800729c:	898a      	ldrh	r2, [r1, #12]
 800729e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a2:	4605      	mov	r5, r0
 80072a4:	0710      	lsls	r0, r2, #28
 80072a6:	460c      	mov	r4, r1
 80072a8:	d458      	bmi.n	800735c <__sflush_r+0xc0>
 80072aa:	684b      	ldr	r3, [r1, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc05      	bgt.n	80072bc <__sflush_r+0x20>
 80072b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dc02      	bgt.n	80072bc <__sflush_r+0x20>
 80072b6:	2000      	movs	r0, #0
 80072b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072be:	2e00      	cmp	r6, #0
 80072c0:	d0f9      	beq.n	80072b6 <__sflush_r+0x1a>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072c8:	682f      	ldr	r7, [r5, #0]
 80072ca:	6a21      	ldr	r1, [r4, #32]
 80072cc:	602b      	str	r3, [r5, #0]
 80072ce:	d032      	beq.n	8007336 <__sflush_r+0x9a>
 80072d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	075a      	lsls	r2, r3, #29
 80072d6:	d505      	bpl.n	80072e4 <__sflush_r+0x48>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	1ac0      	subs	r0, r0, r3
 80072dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072de:	b10b      	cbz	r3, 80072e4 <__sflush_r+0x48>
 80072e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072e2:	1ac0      	subs	r0, r0, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	4602      	mov	r2, r0
 80072e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ea:	6a21      	ldr	r1, [r4, #32]
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b0      	blx	r6
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	d106      	bne.n	8007304 <__sflush_r+0x68>
 80072f6:	6829      	ldr	r1, [r5, #0]
 80072f8:	291d      	cmp	r1, #29
 80072fa:	d82b      	bhi.n	8007354 <__sflush_r+0xb8>
 80072fc:	4a29      	ldr	r2, [pc, #164]	; (80073a4 <__sflush_r+0x108>)
 80072fe:	410a      	asrs	r2, r1
 8007300:	07d6      	lsls	r6, r2, #31
 8007302:	d427      	bmi.n	8007354 <__sflush_r+0xb8>
 8007304:	2200      	movs	r2, #0
 8007306:	6062      	str	r2, [r4, #4]
 8007308:	04d9      	lsls	r1, r3, #19
 800730a:	6922      	ldr	r2, [r4, #16]
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	d504      	bpl.n	800731a <__sflush_r+0x7e>
 8007310:	1c42      	adds	r2, r0, #1
 8007312:	d101      	bne.n	8007318 <__sflush_r+0x7c>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b903      	cbnz	r3, 800731a <__sflush_r+0x7e>
 8007318:	6560      	str	r0, [r4, #84]	; 0x54
 800731a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800731c:	602f      	str	r7, [r5, #0]
 800731e:	2900      	cmp	r1, #0
 8007320:	d0c9      	beq.n	80072b6 <__sflush_r+0x1a>
 8007322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007326:	4299      	cmp	r1, r3
 8007328:	d002      	beq.n	8007330 <__sflush_r+0x94>
 800732a:	4628      	mov	r0, r5
 800732c:	f7ff f89e 	bl	800646c <_free_r>
 8007330:	2000      	movs	r0, #0
 8007332:	6360      	str	r0, [r4, #52]	; 0x34
 8007334:	e7c0      	b.n	80072b8 <__sflush_r+0x1c>
 8007336:	2301      	movs	r3, #1
 8007338:	4628      	mov	r0, r5
 800733a:	47b0      	blx	r6
 800733c:	1c41      	adds	r1, r0, #1
 800733e:	d1c8      	bne.n	80072d2 <__sflush_r+0x36>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0c5      	beq.n	80072d2 <__sflush_r+0x36>
 8007346:	2b1d      	cmp	r3, #29
 8007348:	d001      	beq.n	800734e <__sflush_r+0xb2>
 800734a:	2b16      	cmp	r3, #22
 800734c:	d101      	bne.n	8007352 <__sflush_r+0xb6>
 800734e:	602f      	str	r7, [r5, #0]
 8007350:	e7b1      	b.n	80072b6 <__sflush_r+0x1a>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	e7ad      	b.n	80072b8 <__sflush_r+0x1c>
 800735c:	690f      	ldr	r7, [r1, #16]
 800735e:	2f00      	cmp	r7, #0
 8007360:	d0a9      	beq.n	80072b6 <__sflush_r+0x1a>
 8007362:	0793      	lsls	r3, r2, #30
 8007364:	680e      	ldr	r6, [r1, #0]
 8007366:	bf08      	it	eq
 8007368:	694b      	ldreq	r3, [r1, #20]
 800736a:	600f      	str	r7, [r1, #0]
 800736c:	bf18      	it	ne
 800736e:	2300      	movne	r3, #0
 8007370:	eba6 0807 	sub.w	r8, r6, r7
 8007374:	608b      	str	r3, [r1, #8]
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	dd9c      	ble.n	80072b6 <__sflush_r+0x1a>
 800737c:	6a21      	ldr	r1, [r4, #32]
 800737e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007380:	4643      	mov	r3, r8
 8007382:	463a      	mov	r2, r7
 8007384:	4628      	mov	r0, r5
 8007386:	47b0      	blx	r6
 8007388:	2800      	cmp	r0, #0
 800738a:	dc06      	bgt.n	800739a <__sflush_r+0xfe>
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e78e      	b.n	80072b8 <__sflush_r+0x1c>
 800739a:	4407      	add	r7, r0
 800739c:	eba8 0800 	sub.w	r8, r8, r0
 80073a0:	e7e9      	b.n	8007376 <__sflush_r+0xda>
 80073a2:	bf00      	nop
 80073a4:	dfbffffe 	.word	0xdfbffffe

080073a8 <_fflush_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b913      	cbnz	r3, 80073b8 <_fflush_r+0x10>
 80073b2:	2500      	movs	r5, #0
 80073b4:	4628      	mov	r0, r5
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	b118      	cbz	r0, 80073c2 <_fflush_r+0x1a>
 80073ba:	6a03      	ldr	r3, [r0, #32]
 80073bc:	b90b      	cbnz	r3, 80073c2 <_fflush_r+0x1a>
 80073be:	f7fd ffbf 	bl	8005340 <__sinit>
 80073c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f3      	beq.n	80073b2 <_fflush_r+0xa>
 80073ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073cc:	07d0      	lsls	r0, r2, #31
 80073ce:	d404      	bmi.n	80073da <_fflush_r+0x32>
 80073d0:	0599      	lsls	r1, r3, #22
 80073d2:	d402      	bmi.n	80073da <_fflush_r+0x32>
 80073d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d6:	f7fe f9cb 	bl	8005770 <__retarget_lock_acquire_recursive>
 80073da:	4628      	mov	r0, r5
 80073dc:	4621      	mov	r1, r4
 80073de:	f7ff ff5d 	bl	800729c <__sflush_r>
 80073e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	4605      	mov	r5, r0
 80073e8:	d4e4      	bmi.n	80073b4 <_fflush_r+0xc>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	059b      	lsls	r3, r3, #22
 80073ee:	d4e1      	bmi.n	80073b4 <_fflush_r+0xc>
 80073f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f2:	f7fe f9be 	bl	8005772 <__retarget_lock_release_recursive>
 80073f6:	e7dd      	b.n	80073b4 <_fflush_r+0xc>

080073f8 <__swhatbuf_r>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	2900      	cmp	r1, #0
 8007402:	b096      	sub	sp, #88	; 0x58
 8007404:	4615      	mov	r5, r2
 8007406:	461e      	mov	r6, r3
 8007408:	da0d      	bge.n	8007426 <__swhatbuf_r+0x2e>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	bf0c      	ite	eq
 8007416:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800741a:	2340      	movne	r3, #64	; 0x40
 800741c:	2000      	movs	r0, #0
 800741e:	6031      	str	r1, [r6, #0]
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	b016      	add	sp, #88	; 0x58
 8007424:	bd70      	pop	{r4, r5, r6, pc}
 8007426:	466a      	mov	r2, sp
 8007428:	f000 f862 	bl	80074f0 <_fstat_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	dbec      	blt.n	800740a <__swhatbuf_r+0x12>
 8007430:	9901      	ldr	r1, [sp, #4]
 8007432:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007436:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800743a:	4259      	negs	r1, r3
 800743c:	4159      	adcs	r1, r3
 800743e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007442:	e7eb      	b.n	800741c <__swhatbuf_r+0x24>

08007444 <__smakebuf_r>:
 8007444:	898b      	ldrh	r3, [r1, #12]
 8007446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007448:	079d      	lsls	r5, r3, #30
 800744a:	4606      	mov	r6, r0
 800744c:	460c      	mov	r4, r1
 800744e:	d507      	bpl.n	8007460 <__smakebuf_r+0x1c>
 8007450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2301      	movs	r3, #1
 800745a:	6163      	str	r3, [r4, #20]
 800745c:	b002      	add	sp, #8
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	ab01      	add	r3, sp, #4
 8007462:	466a      	mov	r2, sp
 8007464:	f7ff ffc8 	bl	80073f8 <__swhatbuf_r>
 8007468:	9900      	ldr	r1, [sp, #0]
 800746a:	4605      	mov	r5, r0
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff f871 	bl	8006554 <_malloc_r>
 8007472:	b948      	cbnz	r0, 8007488 <__smakebuf_r+0x44>
 8007474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007478:	059a      	lsls	r2, r3, #22
 800747a:	d4ef      	bmi.n	800745c <__smakebuf_r+0x18>
 800747c:	f023 0303 	bic.w	r3, r3, #3
 8007480:	f043 0302 	orr.w	r3, r3, #2
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	e7e3      	b.n	8007450 <__smakebuf_r+0xc>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	6020      	str	r0, [r4, #0]
 800748c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	9b00      	ldr	r3, [sp, #0]
 8007494:	6163      	str	r3, [r4, #20]
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	6120      	str	r0, [r4, #16]
 800749a:	b15b      	cbz	r3, 80074b4 <__smakebuf_r+0x70>
 800749c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a0:	4630      	mov	r0, r6
 80074a2:	f000 f837 	bl	8007514 <_isatty_r>
 80074a6:	b128      	cbz	r0, 80074b4 <__smakebuf_r+0x70>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	431d      	orrs	r5, r3
 80074b8:	81a5      	strh	r5, [r4, #12]
 80074ba:	e7cf      	b.n	800745c <__smakebuf_r+0x18>

080074bc <memmove>:
 80074bc:	4288      	cmp	r0, r1
 80074be:	b510      	push	{r4, lr}
 80074c0:	eb01 0402 	add.w	r4, r1, r2
 80074c4:	d902      	bls.n	80074cc <memmove+0x10>
 80074c6:	4284      	cmp	r4, r0
 80074c8:	4623      	mov	r3, r4
 80074ca:	d807      	bhi.n	80074dc <memmove+0x20>
 80074cc:	1e43      	subs	r3, r0, #1
 80074ce:	42a1      	cmp	r1, r4
 80074d0:	d008      	beq.n	80074e4 <memmove+0x28>
 80074d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074da:	e7f8      	b.n	80074ce <memmove+0x12>
 80074dc:	4402      	add	r2, r0
 80074de:	4601      	mov	r1, r0
 80074e0:	428a      	cmp	r2, r1
 80074e2:	d100      	bne.n	80074e6 <memmove+0x2a>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ee:	e7f7      	b.n	80074e0 <memmove+0x24>

080074f0 <_fstat_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d07      	ldr	r5, [pc, #28]	; (8007510 <_fstat_r+0x20>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f7f9 ff94 	bl	800142a <_fstat>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d102      	bne.n	800750c <_fstat_r+0x1c>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b103      	cbz	r3, 800750c <_fstat_r+0x1c>
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	20000388 	.word	0x20000388

08007514 <_isatty_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_isatty_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7f9 ff93 	bl	800144a <_isatty>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_isatty_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_isatty_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000388 	.word	0x20000388

08007534 <_sbrk_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d06      	ldr	r5, [pc, #24]	; (8007550 <_sbrk_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f7f9 ff9c 	bl	800147c <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_sbrk_r+0x1a>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_sbrk_r+0x1a>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000388 	.word	0x20000388

08007554 <memcpy>:
 8007554:	440a      	add	r2, r1
 8007556:	4291      	cmp	r1, r2
 8007558:	f100 33ff 	add.w	r3, r0, #4294967295
 800755c:	d100      	bne.n	8007560 <memcpy+0xc>
 800755e:	4770      	bx	lr
 8007560:	b510      	push	{r4, lr}
 8007562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800756a:	4291      	cmp	r1, r2
 800756c:	d1f9      	bne.n	8007562 <memcpy+0xe>
 800756e:	bd10      	pop	{r4, pc}

08007570 <__assert_func>:
 8007570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007572:	4614      	mov	r4, r2
 8007574:	461a      	mov	r2, r3
 8007576:	4b09      	ldr	r3, [pc, #36]	; (800759c <__assert_func+0x2c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4605      	mov	r5, r0
 800757c:	68d8      	ldr	r0, [r3, #12]
 800757e:	b14c      	cbz	r4, 8007594 <__assert_func+0x24>
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <__assert_func+0x30>)
 8007582:	9100      	str	r1, [sp, #0]
 8007584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007588:	4906      	ldr	r1, [pc, #24]	; (80075a4 <__assert_func+0x34>)
 800758a:	462b      	mov	r3, r5
 800758c:	f000 f872 	bl	8007674 <fiprintf>
 8007590:	f000 f882 	bl	8007698 <abort>
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <__assert_func+0x38>)
 8007596:	461c      	mov	r4, r3
 8007598:	e7f3      	b.n	8007582 <__assert_func+0x12>
 800759a:	bf00      	nop
 800759c:	20000064 	.word	0x20000064
 80075a0:	080079e7 	.word	0x080079e7
 80075a4:	080079f4 	.word	0x080079f4
 80075a8:	08007a22 	.word	0x08007a22

080075ac <_calloc_r>:
 80075ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ae:	fba1 2402 	umull	r2, r4, r1, r2
 80075b2:	b94c      	cbnz	r4, 80075c8 <_calloc_r+0x1c>
 80075b4:	4611      	mov	r1, r2
 80075b6:	9201      	str	r2, [sp, #4]
 80075b8:	f7fe ffcc 	bl	8006554 <_malloc_r>
 80075bc:	9a01      	ldr	r2, [sp, #4]
 80075be:	4605      	mov	r5, r0
 80075c0:	b930      	cbnz	r0, 80075d0 <_calloc_r+0x24>
 80075c2:	4628      	mov	r0, r5
 80075c4:	b003      	add	sp, #12
 80075c6:	bd30      	pop	{r4, r5, pc}
 80075c8:	220c      	movs	r2, #12
 80075ca:	6002      	str	r2, [r0, #0]
 80075cc:	2500      	movs	r5, #0
 80075ce:	e7f8      	b.n	80075c2 <_calloc_r+0x16>
 80075d0:	4621      	mov	r1, r4
 80075d2:	f7fe f851 	bl	8005678 <memset>
 80075d6:	e7f4      	b.n	80075c2 <_calloc_r+0x16>

080075d8 <__ascii_mbtowc>:
 80075d8:	b082      	sub	sp, #8
 80075da:	b901      	cbnz	r1, 80075de <__ascii_mbtowc+0x6>
 80075dc:	a901      	add	r1, sp, #4
 80075de:	b142      	cbz	r2, 80075f2 <__ascii_mbtowc+0x1a>
 80075e0:	b14b      	cbz	r3, 80075f6 <__ascii_mbtowc+0x1e>
 80075e2:	7813      	ldrb	r3, [r2, #0]
 80075e4:	600b      	str	r3, [r1, #0]
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	1e10      	subs	r0, r2, #0
 80075ea:	bf18      	it	ne
 80075ec:	2001      	movne	r0, #1
 80075ee:	b002      	add	sp, #8
 80075f0:	4770      	bx	lr
 80075f2:	4610      	mov	r0, r2
 80075f4:	e7fb      	b.n	80075ee <__ascii_mbtowc+0x16>
 80075f6:	f06f 0001 	mvn.w	r0, #1
 80075fa:	e7f8      	b.n	80075ee <__ascii_mbtowc+0x16>

080075fc <_realloc_r>:
 80075fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007600:	4680      	mov	r8, r0
 8007602:	4614      	mov	r4, r2
 8007604:	460e      	mov	r6, r1
 8007606:	b921      	cbnz	r1, 8007612 <_realloc_r+0x16>
 8007608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	4611      	mov	r1, r2
 800760e:	f7fe bfa1 	b.w	8006554 <_malloc_r>
 8007612:	b92a      	cbnz	r2, 8007620 <_realloc_r+0x24>
 8007614:	f7fe ff2a 	bl	800646c <_free_r>
 8007618:	4625      	mov	r5, r4
 800761a:	4628      	mov	r0, r5
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	f000 f841 	bl	80076a6 <_malloc_usable_size_r>
 8007624:	4284      	cmp	r4, r0
 8007626:	4607      	mov	r7, r0
 8007628:	d802      	bhi.n	8007630 <_realloc_r+0x34>
 800762a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800762e:	d812      	bhi.n	8007656 <_realloc_r+0x5a>
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7fe ff8e 	bl	8006554 <_malloc_r>
 8007638:	4605      	mov	r5, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d0ed      	beq.n	800761a <_realloc_r+0x1e>
 800763e:	42bc      	cmp	r4, r7
 8007640:	4622      	mov	r2, r4
 8007642:	4631      	mov	r1, r6
 8007644:	bf28      	it	cs
 8007646:	463a      	movcs	r2, r7
 8007648:	f7ff ff84 	bl	8007554 <memcpy>
 800764c:	4631      	mov	r1, r6
 800764e:	4640      	mov	r0, r8
 8007650:	f7fe ff0c 	bl	800646c <_free_r>
 8007654:	e7e1      	b.n	800761a <_realloc_r+0x1e>
 8007656:	4635      	mov	r5, r6
 8007658:	e7df      	b.n	800761a <_realloc_r+0x1e>

0800765a <__ascii_wctomb>:
 800765a:	b149      	cbz	r1, 8007670 <__ascii_wctomb+0x16>
 800765c:	2aff      	cmp	r2, #255	; 0xff
 800765e:	bf85      	ittet	hi
 8007660:	238a      	movhi	r3, #138	; 0x8a
 8007662:	6003      	strhi	r3, [r0, #0]
 8007664:	700a      	strbls	r2, [r1, #0]
 8007666:	f04f 30ff 	movhi.w	r0, #4294967295
 800766a:	bf98      	it	ls
 800766c:	2001      	movls	r0, #1
 800766e:	4770      	bx	lr
 8007670:	4608      	mov	r0, r1
 8007672:	4770      	bx	lr

08007674 <fiprintf>:
 8007674:	b40e      	push	{r1, r2, r3}
 8007676:	b503      	push	{r0, r1, lr}
 8007678:	4601      	mov	r1, r0
 800767a:	ab03      	add	r3, sp, #12
 800767c:	4805      	ldr	r0, [pc, #20]	; (8007694 <fiprintf+0x20>)
 800767e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	f7ff fcef 	bl	8007068 <_vfiprintf_r>
 800768a:	b002      	add	sp, #8
 800768c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007690:	b003      	add	sp, #12
 8007692:	4770      	bx	lr
 8007694:	20000064 	.word	0x20000064

08007698 <abort>:
 8007698:	b508      	push	{r3, lr}
 800769a:	2006      	movs	r0, #6
 800769c:	f000 f834 	bl	8007708 <raise>
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7f9 fe8f 	bl	80013c4 <_exit>

080076a6 <_malloc_usable_size_r>:
 80076a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076aa:	1f18      	subs	r0, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfbc      	itt	lt
 80076b0:	580b      	ldrlt	r3, [r1, r0]
 80076b2:	18c0      	addlt	r0, r0, r3
 80076b4:	4770      	bx	lr

080076b6 <_raise_r>:
 80076b6:	291f      	cmp	r1, #31
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	460d      	mov	r5, r1
 80076be:	d904      	bls.n	80076ca <_raise_r+0x14>
 80076c0:	2316      	movs	r3, #22
 80076c2:	6003      	str	r3, [r0, #0]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
 80076ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076cc:	b112      	cbz	r2, 80076d4 <_raise_r+0x1e>
 80076ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076d2:	b94b      	cbnz	r3, 80076e8 <_raise_r+0x32>
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 f831 	bl	800773c <_getpid_r>
 80076da:	462a      	mov	r2, r5
 80076dc:	4601      	mov	r1, r0
 80076de:	4620      	mov	r0, r4
 80076e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e4:	f000 b818 	b.w	8007718 <_kill_r>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d00a      	beq.n	8007702 <_raise_r+0x4c>
 80076ec:	1c59      	adds	r1, r3, #1
 80076ee:	d103      	bne.n	80076f8 <_raise_r+0x42>
 80076f0:	2316      	movs	r3, #22
 80076f2:	6003      	str	r3, [r0, #0]
 80076f4:	2001      	movs	r0, #1
 80076f6:	e7e7      	b.n	80076c8 <_raise_r+0x12>
 80076f8:	2400      	movs	r4, #0
 80076fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076fe:	4628      	mov	r0, r5
 8007700:	4798      	blx	r3
 8007702:	2000      	movs	r0, #0
 8007704:	e7e0      	b.n	80076c8 <_raise_r+0x12>
	...

08007708 <raise>:
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <raise+0xc>)
 800770a:	4601      	mov	r1, r0
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	f7ff bfd2 	b.w	80076b6 <_raise_r>
 8007712:	bf00      	nop
 8007714:	20000064 	.word	0x20000064

08007718 <_kill_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d07      	ldr	r5, [pc, #28]	; (8007738 <_kill_r+0x20>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f7f9 fe3d 	bl	80013a4 <_kill>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d102      	bne.n	8007734 <_kill_r+0x1c>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b103      	cbz	r3, 8007734 <_kill_r+0x1c>
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	20000388 	.word	0x20000388

0800773c <_getpid_r>:
 800773c:	f7f9 be2a 	b.w	8001394 <_getpid>

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
